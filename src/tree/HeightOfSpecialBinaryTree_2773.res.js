// Generated by ReScript, PLEASE EDIT WITH CARE

import * as TreeNode from "./TreeNode.res.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function heightOfSpecialBinaryTree(root) {
  if (root !== undefined) {
    var _height = 0;
    var _stack = {
      hd: [
        root,
        root,
        0
      ],
      tl: /* [] */0
    };
    while(true) {
      var stack = _stack;
      var height = _height;
      if (!stack) {
        return height;
      }
      var match = stack.hd;
      var node = match[0];
      var right = node.right;
      var left = node.left;
      var rest = stack.tl;
      var heightSoFar = match[2];
      var parentNode = match[1];
      var newHeight = height > heightSoFar ? height : heightSoFar;
      if (left !== undefined) {
        if (right !== undefined) {
          var r = left.right;
          var leftBack = r !== undefined ? r === parentNode : false;
          var l = right.left;
          var rightBack = l !== undefined ? l === parentNode : false;
          var next = leftBack ? (
              rightBack ? rest : ({
                    hd: [
                      right,
                      node,
                      heightSoFar + 1 | 0
                    ],
                    tl: rest
                  })
            ) : (
              rightBack ? ({
                    hd: [
                      left,
                      node,
                      heightSoFar + 1 | 0
                    ],
                    tl: rest
                  }) : ({
                    hd: [
                      left,
                      node,
                      heightSoFar + 1 | 0
                    ],
                    tl: {
                      hd: [
                        right,
                        node,
                        heightSoFar + 1 | 0
                      ],
                      tl: rest
                    }
                  })
            );
          _stack = next;
          _height = newHeight;
          continue ;
        }
        var r$1 = left.right;
        if (r$1 !== undefined && r$1 === parentNode) {
          _stack = rest;
          _height = newHeight;
          continue ;
        }
        _stack = {
          hd: [
            left,
            node,
            heightSoFar + 1 | 0
          ],
          tl: rest
        };
        _height = newHeight;
        continue ;
      }
      if (right !== undefined) {
        var l$1 = right.left;
        if (l$1 !== undefined && l$1 === parentNode) {
          _stack = rest;
          _height = newHeight;
          continue ;
        }
        _stack = {
          hd: [
            right,
            node,
            heightSoFar + 1 | 0
          ],
          tl: rest
        };
        _height = newHeight;
        continue ;
      }
      _stack = rest;
      _height = newHeight;
      continue ;
    };
  } else {
    return 0;
  }
}

var tree1 = TreeNode.make(1, Caml_option.some(TreeNode.make(2, undefined, undefined)), Caml_option.some(TreeNode.make(3, Caml_option.some(TreeNode.make(4, undefined, undefined)), Caml_option.some(TreeNode.make(5, undefined, undefined)))));

var r1 = heightOfSpecialBinaryTree(tree1);

console.log("r1: ", r1);

export {
  heightOfSpecialBinaryTree ,
  tree1 ,
  r1 ,
}
/* tree1 Not a pure module */
