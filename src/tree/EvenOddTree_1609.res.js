// Generated by ReScript, PLEASE EDIT WITH CARE

import * as TreeNode from "./TreeNode.res.js";
import * as Core__List from "@rescript/core/src/Core__List.res.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.js";
import * as Core__Option from "@rescript/core/src/Core__Option.res.js";

function evenOddTree(root) {
  var breadthFirstTraverse = function (levelValuesTable, _queue) {
    while(true) {
      var queue = _queue;
      var match = queue.at(0);
      if (match === undefined) {
        return levelValuesTable;
      }
      var level = match[1];
      var node = match[0];
      var rest = queue.slice(1);
      var right = node.right;
      var left = node.left;
      var val = node.val;
      var values = Core__Option.mapOr(levelValuesTable.get(level), {
            hd: val,
            tl: /* [] */0
          }, (function(val){
          return function (vals) {
            return {
                    hd: val,
                    tl: vals
                  };
          }
          }(val)));
      levelValuesTable.set(level, values);
      if (left !== undefined) {
        if (right !== undefined) {
          rest.push([
                left,
                level + 1 | 0
              ]);
          rest.push([
                right,
                level + 1 | 0
              ]);
          _queue = rest;
          continue ;
        }
        rest.push([
              left,
              level + 1 | 0
            ]);
        _queue = rest;
        continue ;
      }
      if (right !== undefined) {
        rest.push([
              right,
              level + 1 | 0
            ]);
        _queue = rest;
        continue ;
      }
      _queue = rest;
      continue ;
    };
  };
  var checkIsMonotonic = function (values, kind) {
    if (Core__List.reduceWithIndex(values, new Set(), (function (acc, curr, idx) {
                var prev = Core__List.get(values, idx - 1 | 0);
                if (prev === undefined) {
                  return acc;
                }
                var tmp;
                tmp = kind === "Increasing" ? curr > prev : curr < prev;
                acc.add(tmp);
                return acc;
              })).has(false)) {
      return false;
    } else {
      return true;
    }
  };
  var checkAllElementsEvenOrOdd = function (values, kind) {
    if (Core__List.reduce(values, new Set(), (function (acc, curr) {
                var tmp;
                tmp = kind === "Even" ? curr % 2.0 === 0.0 : curr % 2.0 !== 0.0;
                acc.add(tmp);
                return acc;
              })).has(false)) {
      return false;
    } else {
      return true;
    }
  };
  if (root !== undefined && !Core__Array.reduce(Array.from(breadthFirstTraverse(new Map(), [[
                        root,
                        0
                      ]]).entries()), new Set(), (function (acc, param) {
              var isLevelEven = param[0] % 2.0 === 0.0;
              var original = Core__List.reverse(param[1]);
              if (isLevelEven) {
                var areAllElementsOdd = checkAllElementsEvenOrOdd(original, "Odd");
                var isMonotonicallyIncreasing = checkIsMonotonic(original, "Increasing");
                acc.add(areAllElementsOdd && isMonotonicallyIncreasing);
                return acc;
              }
              var areAllElementsEven = checkAllElementsEvenOrOdd(original, "Even");
              var isMonotonicallyDecreasing = checkIsMonotonic(original, "Decreasing");
              acc.add(areAllElementsEven && isMonotonicallyDecreasing);
              return acc;
            })).has(false)) {
    return true;
  } else {
    return false;
  }
}

var tree1 = TreeNode.make(1, Caml_option.some(TreeNode.make(10, Caml_option.some(TreeNode.make(3, Caml_option.some(TreeNode.make(12, undefined, undefined)), Caml_option.some(TreeNode.make(8, undefined, undefined)))), undefined)), Caml_option.some(TreeNode.make(4, Caml_option.some(TreeNode.make(7, Caml_option.some(TreeNode.make(6, undefined, undefined)), undefined)), Caml_option.some(TreeNode.make(9, undefined, Caml_option.some(TreeNode.make(2, undefined, undefined)))))));

var r1 = evenOddTree(tree1);

console.log("r1: ", r1);

var tree2 = TreeNode.make(5, Caml_option.some(TreeNode.make(4, Caml_option.some(TreeNode.make(3, undefined, undefined)), Caml_option.some(TreeNode.make(3, undefined, undefined)))), Caml_option.some(TreeNode.make(2, Caml_option.some(TreeNode.make(7, undefined, undefined)), undefined)));

var r2 = evenOddTree(tree2);

console.log("r2: ", r2);

var tree3 = TreeNode.make(5, Caml_option.some(TreeNode.make(9, Caml_option.some(TreeNode.make(3, undefined, undefined)), Caml_option.some(TreeNode.make(5, undefined, undefined)))), Caml_option.some(TreeNode.make(1, Caml_option.some(TreeNode.make(7, undefined, undefined)), undefined)));

var r2$1 = evenOddTree(tree3);

console.log("r2: ", r2$1);

export {
  evenOddTree ,
  tree1 ,
  r1 ,
  tree2 ,
  tree3 ,
  r2$1 as r2,
}
/* tree1 Not a pure module */
