// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Int32 from "rescript/lib/es6/int32.js";
import * as TreeNode from "./TreeNode.res.js";
import * as Core__List from "@rescript/core/src/Core__List.res.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.js";
import * as Core__Option from "@rescript/core/src/Core__Option.res.js";

function lowestCommonAncestorOfABinaryTree_IV(root, nodes) {
  var preorderTraverse = function (_pathToRoot, valueToFind, _stack) {
    while(true) {
      var stack = _stack;
      var pathToRoot = _pathToRoot;
      if (pathToRoot !== undefined) {
        return Core__List.reverse(pathToRoot);
      }
      if (!stack) {
        return /* [] */0;
      }
      var match = stack.hd;
      var node = match[0];
      var val = node.val;
      var rest = stack.tl;
      var left = node.left;
      var right = node.right;
      var newPath_1 = match[1];
      var newPath = {
        hd: val,
        tl: newPath_1
      };
      var match$1 = val === valueToFind;
      if (match$1) {
        _stack = rest;
        _pathToRoot = newPath;
        continue ;
      }
      if (left !== undefined) {
        if (right !== undefined) {
          _stack = {
            hd: [
              left,
              newPath
            ],
            tl: {
              hd: [
                right,
                newPath
              ],
              tl: rest
            }
          };
          continue ;
        }
        _stack = {
          hd: [
            left,
            newPath
          ],
          tl: rest
        };
        continue ;
      }
      if (right !== undefined) {
        _stack = {
          hd: [
            right,
            newPath
          ],
          tl: rest
        };
        continue ;
      }
      _stack = rest;
      continue ;
    };
  };
  var match = nodes.length;
  if (root !== undefined && match !== 0) {
    if (match !== 1) {
      var paths = Core__Array.reduceRight(nodes, /* [] */0, (function (acc, curr) {
              var path = preorderTraverse(undefined, curr, {
                    hd: [
                      root,
                      /* [] */0
                    ],
                    tl: /* [] */0
                  });
              return {
                      hd: path,
                      tl: acc
                    };
            }));
      var _matches = /* [] */0;
      var _nodeIdx = 0;
      while(true) {
        var nodeIdx = _nodeIdx;
        var matches = _matches;
        var matchSet = Core__List.reduce(paths, new Set(), (function(nodeIdx){
            return function (acc, path) {
              var node = Core__List.get(path, nodeIdx);
              if (node !== undefined) {
                acc.add(node);
                return acc;
              } else {
                acc.add(Int32.min_int);
                acc.add(Int32.max_int);
                return acc;
              }
            }
            }(nodeIdx)));
        if (matchSet.size !== 1) {
          return Core__Option.getOr(Core__List.head(matches), Int32.min_int);
        }
        var match$1 = Core__Option.getOr(Array.from(matchSet.values()).at(0), Int32.min_int);
        _nodeIdx = nodeIdx + 1 | 0;
        _matches = {
          hd: match$1,
          tl: matches
        };
        continue ;
      };
    } else {
      return Core__Option.getOr(nodes[0], Int32.min_int);
    }
  } else {
    return Int32.min_int;
  }
}

var tree = TreeNode.make(3, Caml_option.some(TreeNode.make(5, Caml_option.some(TreeNode.make(6, undefined, undefined)), Caml_option.some(TreeNode.make(2, Caml_option.some(TreeNode.make(7, undefined, undefined)), Caml_option.some(TreeNode.make(4, undefined, undefined)))))), Caml_option.some(TreeNode.make(1, Caml_option.some(TreeNode.make(0, undefined, undefined)), Caml_option.some(TreeNode.make(8, undefined, undefined)))));

var r1 = lowestCommonAncestorOfABinaryTree_IV(tree, [
      4,
      7
    ]);

console.log("r1: ", r1);

var r2 = lowestCommonAncestorOfABinaryTree_IV(tree, [1]);

console.log("r2: ", r2);

var r3 = lowestCommonAncestorOfABinaryTree_IV(tree, [
      7,
      6,
      2,
      4
    ]);

console.log("r3: ", r3);

var r4 = lowestCommonAncestorOfABinaryTree_IV(tree, [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8
    ]);

console.log("r4: ", r4);

export {
  lowestCommonAncestorOfABinaryTree_IV ,
  tree ,
  r1 ,
  r2 ,
  r3 ,
  r4 ,
}
/* tree Not a pure module */
