// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml from "rescript/lib/es6/caml.js";
import * as Int32 from "rescript/lib/es6/int32.js";
import * as TreeNode from "./TreeNode.res.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.js";
import * as Core__Option from "@rescript/core/src/Core__Option.res.js";

function findModeInBinarySearchTree(root) {
  var inorderTraverse = function (freqTable, _curr, _stack) {
    while(true) {
      var stack = _stack;
      var curr = _curr;
      if (curr !== undefined) {
        _stack = {
          hd: curr,
          tl: stack
        };
        _curr = curr.left;
        continue ;
      }
      if (!stack) {
        return freqTable;
      }
      var popped = stack.hd;
      var val = popped.val;
      var freq = Core__Option.mapOr(freqTable.get(val), 1, (function (f) {
              return f + 1 | 0;
            }));
      freqTable.set(val, freq);
      _stack = stack.tl;
      _curr = popped.right;
      continue ;
    };
  };
  var sorted = Array.from(inorderTraverse(new Map(), root, /* [] */0).entries()).toSorted(function (param, param$1) {
        return Caml.int_compare(param$1[1], param[1]);
      });
  var match = Core__Option.mapOr(sorted.at(0), [
        Int32.min_int,
        0
      ], (function (t) {
          return t;
        }));
  var maxFreq = match[1];
  if (maxFreq === 1) {
    return [];
  } else {
    return Core__Array.reduce(sorted, [], (function (acc, param) {
                  if (param[1] === maxFreq) {
                    return acc.concat([param[0]]);
                  } else {
                    return acc;
                  }
                }));
  }
}

var n5 = TreeNode.make(5, Caml_option.some(TreeNode.make(3, undefined, undefined)), Caml_option.some(TreeNode.make(7, undefined, undefined)));

var n15 = TreeNode.make(15, undefined, Caml_option.some(TreeNode.make(18, undefined, undefined)));

var root1 = TreeNode.make(10, Caml_option.some(n5), Caml_option.some(n15));

var r1 = findModeInBinarySearchTree(root1);

console.log("r1: ", r1);

var symmetric = TreeNode.make(1, Caml_option.some(TreeNode.make(2, Caml_option.some(TreeNode.make(3, undefined, undefined)), Caml_option.some(TreeNode.make(4, undefined, undefined)))), Caml_option.some(TreeNode.make(2, Caml_option.some(TreeNode.make(4, undefined, undefined)), Caml_option.some(TreeNode.make(3, undefined, undefined)))));

var r2 = findModeInBinarySearchTree(symmetric);

console.log("r2: ", r2);

export {
  findModeInBinarySearchTree ,
  n5 ,
  n15 ,
  root1 ,
  r1 ,
  symmetric ,
  r2 ,
}
/* n5 Not a pure module */
