// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml from "rescript/lib/es6/caml.js";
import * as TreeNode from "./TreeNode.res.js";
import * as Core__List from "@rescript/core/src/Core__List.res.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.res.js";

function smallestStringStartingFromLeaf(root) {
  var preorderTraverse = function (_paths, _stack) {
    while(true) {
      var stack = _stack;
      var paths = _paths;
      if (!stack) {
        return paths;
      }
      var match = stack.hd;
      var node = match[0];
      var right = node.right;
      var left = node.left;
      var rest = stack.tl;
      var $$char = String.fromCharCode(97 + node.val | 0);
      var newPath = $$char + match[1];
      if (left !== undefined) {
        if (right !== undefined) {
          _stack = {
            hd: [
              left,
              newPath
            ],
            tl: {
              hd: [
                right,
                newPath
              ],
              tl: rest
            }
          };
          continue ;
        }
        _stack = {
          hd: [
            left,
            newPath
          ],
          tl: rest
        };
        continue ;
      }
      if (right !== undefined) {
        _stack = {
          hd: [
            right,
            newPath
          ],
          tl: rest
        };
        continue ;
      }
      _stack = rest;
      _paths = {
        hd: newPath,
        tl: paths
      };
      continue ;
    };
  };
  if (root !== undefined) {
    return Core__Option.mapOr(Core__List.head(Core__List.sort(preorderTraverse(/* [] */0, {
                            hd: [
                              root,
                              String()
                            ],
                            tl: /* [] */0
                          }), Caml.string_compare)), String(), (function (str) {
                  return str;
                }));
  } else {
    return String();
  }
}

var tree1 = TreeNode.make(0, Caml_option.some(TreeNode.make(1, Caml_option.some(TreeNode.make(3, undefined, undefined)), Caml_option.some(TreeNode.make(4, undefined, undefined)))), Caml_option.some(TreeNode.make(2, Caml_option.some(TreeNode.make(3, undefined, undefined)), Caml_option.some(TreeNode.make(4, undefined, undefined)))));

var r1 = smallestStringStartingFromLeaf(tree1);

console.log("r1: ", r1);

var tree2 = TreeNode.make(25, Caml_option.some(TreeNode.make(1, Caml_option.some(TreeNode.make(1, undefined, undefined)), Caml_option.some(TreeNode.make(3, undefined, undefined)))), Caml_option.some(TreeNode.make(3, Caml_option.some(TreeNode.make(0, undefined, undefined)), Caml_option.some(TreeNode.make(2, undefined, undefined)))));

var r2 = smallestStringStartingFromLeaf(tree2);

console.log("r2: ", r2);

var tree3 = TreeNode.make(2, Caml_option.some(TreeNode.make(2, undefined, Caml_option.some(TreeNode.make(1, Caml_option.some(TreeNode.make(0, undefined, undefined)), undefined)))), Caml_option.some(TreeNode.make(1, Caml_option.some(TreeNode.make(0, undefined, undefined)), undefined)));

var r3 = smallestStringStartingFromLeaf(tree3);

console.log("r3: ", r3);

export {
  smallestStringStartingFromLeaf ,
  tree1 ,
  r1 ,
  tree2 ,
  r2 ,
  tree3 ,
  r3 ,
}
/* tree1 Not a pure module */
