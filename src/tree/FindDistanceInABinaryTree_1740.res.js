// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Int32 from "rescript/lib/es6/int32.js";
import * as TreeNode from "./TreeNode.res.js";
import * as Core__List from "@rescript/core/src/Core__List.res.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.res.js";

function findDistanceInABinaryTree(root, p, q) {
  var preorderTraverse = function (_pathToRoot, valueToFind, _stack) {
    while(true) {
      var stack = _stack;
      var pathToRoot = _pathToRoot;
      if (pathToRoot !== undefined) {
        return Core__List.reverse(pathToRoot);
      }
      if (!stack) {
        return /* [] */0;
      }
      var match = stack.hd;
      var node = match[0];
      var val = node.val;
      var rest = stack.tl;
      var left = node.left;
      var right = node.right;
      var newPath_1 = match[1];
      var newPath = {
        hd: val,
        tl: newPath_1
      };
      var match$1 = val === valueToFind;
      if (match$1) {
        _stack = rest;
        _pathToRoot = newPath;
        continue ;
      }
      if (left !== undefined) {
        if (right !== undefined) {
          _stack = {
            hd: [
              left,
              newPath
            ],
            tl: {
              hd: [
                right,
                newPath
              ],
              tl: rest
            }
          };
          _pathToRoot = undefined;
          continue ;
        }
        _stack = {
          hd: [
            left,
            newPath
          ],
          tl: rest
        };
        _pathToRoot = undefined;
        continue ;
      }
      if (right !== undefined) {
        _stack = {
          hd: [
            right,
            newPath
          ],
          tl: rest
        };
        _pathToRoot = undefined;
        continue ;
      }
      _stack = rest;
      _pathToRoot = undefined;
      continue ;
    };
  };
  var findLastMatchingElement = function (paths) {
    var _matches = /* [] */0;
    var _nodeIdx = 0;
    while(true) {
      var nodeIdx = _nodeIdx;
      var matches = _matches;
      var matchSet = Core__List.reduce(paths, new Set(), (function(nodeIdx){
          return function (acc, path) {
            var nodeVal = Core__List.get(path, nodeIdx);
            if (nodeVal !== undefined) {
              acc.add(nodeVal);
              return acc;
            } else {
              acc.add(0);
              acc.add(0);
              return acc;
            }
          }
          }(nodeIdx)));
      if (matchSet.size !== 1) {
        return Core__Option.getOr(Core__List.head(matches), Int32.min_int);
      }
      var commonVal = Core__Option.getOr(Array.from(matchSet.values()).at(0), Int32.min_int);
      _nodeIdx = nodeIdx + 1 | 0;
      _matches = {
        hd: commonVal,
        tl: matches
      };
      continue ;
    };
  };
  var match = p === q;
  if (root === undefined) {
    if (match) {
      return 0;
    } else {
      return Int32.min_int;
    }
  }
  if (match) {
    return 0;
  }
  var pPath = preorderTraverse(undefined, p, {
        hd: [
          root,
          /* [] */0
        ],
        tl: /* [] */0
      });
  var qPath = preorderTraverse(undefined, q, {
        hd: [
          root,
          /* [] */0
        ],
        tl: /* [] */0
      });
  var lcaVal = findLastMatchingElement({
        hd: pPath,
        tl: {
          hd: qPath,
          tl: /* [] */0
        }
      });
  var lcaPath = preorderTraverse(undefined, lcaVal, {
        hd: [
          root,
          /* [] */0
        ],
        tl: /* [] */0
      });
  return (Core__List.size(pPath) + Core__List.size(qPath) | 0) - (Core__List.size(lcaPath) << 1) | 0;
}

var tree = TreeNode.make(3, Caml_option.some(TreeNode.make(5, Caml_option.some(TreeNode.make(6, undefined, undefined)), Caml_option.some(TreeNode.make(2, Caml_option.some(TreeNode.make(7, undefined, undefined)), Caml_option.some(TreeNode.make(4, undefined, undefined)))))), Caml_option.some(TreeNode.make(1, Caml_option.some(TreeNode.make(0, undefined, undefined)), Caml_option.some(TreeNode.make(8, undefined, undefined)))));

var r1 = findDistanceInABinaryTree(tree, 5, 0);

console.log("r1: ", r1);

var r2 = findDistanceInABinaryTree(tree, 5, 7);

console.log("r2: ", r2);

var r3 = findDistanceInABinaryTree(tree, 5, 5);

console.log("r3: ", r3);

export {
  findDistanceInABinaryTree ,
  tree ,
  r1 ,
  r2 ,
  r3 ,
}
/* tree Not a pure module */
