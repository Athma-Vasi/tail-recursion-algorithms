// Generated by ReScript, PLEASE EDIT WITH CARE

import * as TreeNode from "./TreeNode.res.js";
import * as Caml_int32 from "rescript/lib/es6/caml_int32.js";
import * as Core__List from "@rescript/core/src/Core__List.res.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.js";
import * as Core__Option from "@rescript/core/src/Core__Option.res.js";

function averageOfLevelsInBinaryTree(root) {
  var breadthFirstTraverse = function (levelsValuesTable, _stack) {
    while(true) {
      var stack = _stack;
      if (!stack) {
        return levelsValuesTable;
      }
      var match = stack.hd;
      var poppedNode = match[0];
      var val = poppedNode.val;
      var rest = stack.tl;
      var level = match[1];
      var left = poppedNode.left;
      var right = poppedNode.right;
      var values = Core__Option.mapOr(levelsValuesTable.get(level), {
            hd: val,
            tl: /* [] */0
          }, (function(val){
          return function (vals) {
            return {
                    hd: val,
                    tl: vals
                  };
          }
          }(val)));
      levelsValuesTable.set(level, values);
      if (left !== undefined) {
        if (right !== undefined) {
          _stack = {
            hd: [
              left,
              level + 1 | 0
            ],
            tl: {
              hd: [
                right,
                level + 1 | 0
              ],
              tl: rest
            }
          };
          continue ;
        }
        _stack = {
          hd: [
            left,
            level + 1 | 0
          ],
          tl: rest
        };
        continue ;
      }
      if (right !== undefined) {
        _stack = {
          hd: [
            right,
            level + 1 | 0
          ],
          tl: rest
        };
        continue ;
      }
      _stack = rest;
      continue ;
    };
  };
  if (root !== undefined) {
    return Core__List.toArray(Core__List.reverse(Core__Array.reduce(Array.from(breadthFirstTraverse(new Map(), {
                                  hd: [
                                    root,
                                    0
                                  ],
                                  tl: /* [] */0
                                }).values()), /* [] */0, (function (averages, values) {
                          var sum = Core__List.reduce(values, 0, (function (sumAcc, num) {
                                  return sumAcc + num | 0;
                                }));
                          var size = Core__List.size(values);
                          var average = Caml_int32.div(sum, size);
                          return {
                                  hd: average,
                                  tl: averages
                                };
                        }))));
  } else {
    return [];
  }
}

var n5 = TreeNode.make(5, Caml_option.some(TreeNode.make(3, undefined, undefined)), Caml_option.some(TreeNode.make(7, undefined, undefined)));

var n15 = TreeNode.make(15, undefined, Caml_option.some(TreeNode.make(18, undefined, undefined)));

var root1 = TreeNode.make(10, Caml_option.some(n5), Caml_option.some(n15));

var r1 = averageOfLevelsInBinaryTree(root1);

console.log("r1: ", r1);

export {
  averageOfLevelsInBinaryTree ,
  n5 ,
  n15 ,
  root1 ,
  r1 ,
}
/* n5 Not a pure module */
