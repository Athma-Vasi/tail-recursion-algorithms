// Generated by ReScript, PLEASE EDIT WITH CARE

import * as TreeNode from "./TreeNode.res.js";
import * as Core__List from "@rescript/core/src/Core__List.res.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.res.js";

function findBottomLeftTreeValue(root) {
  var breadthFirstTraverse = function (levelValuesTable, _queue) {
    while(true) {
      var queue = _queue;
      if (!queue) {
        return levelValuesTable;
      }
      var match = queue.hd;
      var node = match[0];
      var right = node.right;
      var left = node.left;
      var val = node.val;
      var rest = queue.tl;
      var level = match[1];
      var values = Core__Option.mapOr(levelValuesTable.get(level), {
            hd: val,
            tl: /* [] */0
          }, (function(val){
          return function (vals) {
            return {
                    hd: val,
                    tl: vals
                  };
          }
          }(val)));
      levelValuesTable.set(level, values);
      if (left !== undefined) {
        if (right !== undefined) {
          _queue = Core__List.concat(rest, {
                hd: [
                  left,
                  level + 1 | 0
                ],
                tl: {
                  hd: [
                    right,
                    level + 1 | 0
                  ],
                  tl: /* [] */0
                }
              });
          continue ;
        }
        _queue = Core__List.concat(rest, {
              hd: [
                left,
                level + 1 | 0
              ],
              tl: /* [] */0
            });
        continue ;
      }
      if (right !== undefined) {
        _queue = Core__List.concat(rest, {
              hd: [
                right,
                level + 1 | 0
              ],
              tl: /* [] */0
            });
        continue ;
      }
      _queue = rest;
      continue ;
    };
  };
  if (root !== undefined) {
    return Core__Option.mapOr(Core__List.head(Core__List.reverse(Core__Option.mapOr(Array.from(breadthFirstTraverse(new Map(), {
                                        hd: [
                                          root,
                                          0
                                        ],
                                        tl: /* [] */0
                                      }).values()).at(-1), /* [] */0, (function (values) {
                              return values;
                            })))), 0, (function (v) {
                  return v;
                }));
  } else {
    return 0;
  }
}

var node7 = TreeNode.make(7, undefined, undefined);

var node5 = TreeNode.make(5, Caml_option.some(node7), undefined);

var node6 = TreeNode.make(6, undefined, undefined);

var node4 = TreeNode.make(4, undefined, undefined);

var node2 = TreeNode.make(2, Caml_option.some(node4), undefined);

var node3 = TreeNode.make(3, Caml_option.some(node5), Caml_option.some(node6));

var root = TreeNode.make(1, Caml_option.some(node2), Caml_option.some(node3));

var r1 = findBottomLeftTreeValue(root);

console.log("r1: ", r1);

export {
  findBottomLeftTreeValue ,
  node7 ,
  node5 ,
  node6 ,
  node4 ,
  node2 ,
  node3 ,
  root ,
  r1 ,
}
/* node7 Not a pure module */
