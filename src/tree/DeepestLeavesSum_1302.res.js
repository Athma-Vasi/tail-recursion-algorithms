// Generated by ReScript, PLEASE EDIT WITH CARE

import * as TreeNode from "./TreeNode.res.js";
import * as Core__List from "@rescript/core/src/Core__List.res.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function deepestLeavesSum(root) {
  var reversePostorderTraverse = function (_maxLevel, _levelValueStack, _workingStack) {
    while(true) {
      var workingStack = _workingStack;
      var levelValueStack = _levelValueStack;
      var maxLevel = _maxLevel;
      if (!workingStack) {
        return [
                maxLevel,
                levelValueStack
              ];
      }
      var match = workingStack.hd;
      var top = match[0];
      var right = top.right;
      var left = top.left;
      var rest = workingStack.tl;
      var level = match[1];
      var newLVStack_0 = [
        top.val,
        level
      ];
      var newLVStack = {
        hd: newLVStack_0,
        tl: levelValueStack
      };
      var newMaxLevel = maxLevel > level ? maxLevel : level;
      if (left !== undefined) {
        if (right !== undefined) {
          _workingStack = {
            hd: [
              left,
              level + 1 | 0
            ],
            tl: {
              hd: [
                right,
                level + 1 | 0
              ],
              tl: rest
            }
          };
          _levelValueStack = newLVStack;
          _maxLevel = newMaxLevel;
          continue ;
        }
        _workingStack = {
          hd: [
            left,
            level + 1 | 0
          ],
          tl: rest
        };
        _levelValueStack = newLVStack;
        _maxLevel = newMaxLevel;
        continue ;
      }
      if (right !== undefined) {
        _workingStack = {
          hd: [
            right,
            level + 1 | 0
          ],
          tl: rest
        };
        _levelValueStack = newLVStack;
        _maxLevel = newMaxLevel;
        continue ;
      }
      _workingStack = rest;
      _levelValueStack = newLVStack;
      _maxLevel = newMaxLevel;
      continue ;
    };
  };
  if (root === undefined) {
    return 0;
  }
  var match = reversePostorderTraverse(0, /* [] */0, {
        hd: [
          root,
          1
        ],
        tl: /* [] */0
      });
  var maxLevel = match[0];
  return Core__List.reduce(match[1], 0, (function (acc, curr) {
                if (curr[1] === maxLevel) {
                  return acc + curr[0] | 0;
                } else {
                  return acc;
                }
              }));
}

var n5 = TreeNode.make(5, Caml_option.some(TreeNode.make(3, undefined, undefined)), Caml_option.some(TreeNode.make(7, undefined, undefined)));

var n15 = TreeNode.make(15, undefined, Caml_option.some(TreeNode.make(18, undefined, undefined)));

var root1 = TreeNode.make(10, Caml_option.some(n5), Caml_option.some(n15));

var r1 = deepestLeavesSum(root1);

console.log("r1: ", r1);

export {
  deepestLeavesSum ,
  n5 ,
  n15 ,
  root1 ,
  r1 ,
}
/* n5 Not a pure module */
