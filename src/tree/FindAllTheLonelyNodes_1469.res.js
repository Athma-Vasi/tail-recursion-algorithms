// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Int32 from "rescript/lib/es6/int32.js";
import * as TreeNode from "./TreeNode.res.js";
import * as Core__List from "@rescript/core/src/Core__List.res.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.res.js";

function findAllTheLonelyNodes(root) {
  var postorderTraverse = function (_rpnStack, _workingStack) {
    while(true) {
      var workingStack = _workingStack;
      var rpnStack = _rpnStack;
      if (!workingStack) {
        return rpnStack;
      }
      var node = workingStack.hd;
      var right = node.right;
      var left = node.left;
      var val = node.val;
      var rest = workingStack.tl;
      if (left !== undefined) {
        if (right !== undefined) {
          _workingStack = {
            hd: right,
            tl: {
              hd: left,
              tl: rest
            }
          };
          _rpnStack = {
            hd: [
              val,
              "Branch"
            ],
            tl: rpnStack
          };
          continue ;
        }
        _workingStack = {
          hd: left,
          tl: rest
        };
        _rpnStack = {
          hd: [
            val,
            "Branch"
          ],
          tl: rpnStack
        };
        continue ;
      }
      if (right !== undefined) {
        _workingStack = {
          hd: right,
          tl: rest
        };
        _rpnStack = {
          hd: [
            val,
            "Branch"
          ],
          tl: rpnStack
        };
        continue ;
      }
      _workingStack = rest;
      _rpnStack = {
        hd: [
          val,
          "Leaf"
        ],
        tl: rpnStack
      };
      continue ;
    };
  };
  var processRPNStack = function (_rpnStack, _lonelies, _evaluationStack) {
    while(true) {
      var evaluationStack = _evaluationStack;
      var lonelies = _lonelies;
      var rpnStack = _rpnStack;
      if (!rpnStack) {
        return lonelies;
      }
      var rest = rpnStack.tl;
      var match = rpnStack.hd;
      var nodeKind = match[1];
      var val = match[0];
      if (nodeKind === "Leaf") {
        _evaluationStack = {
          hd: [
            val,
            nodeKind
          ],
          tl: evaluationStack
        };
        _rpnStack = rest;
        continue ;
      }
      var match$1 = Core__List.reduce(evaluationStack, [
            /* [] */0,
            /* [] */0
          ], (function (acc, curr) {
              var sliced = acc[1];
              var topLeaves = acc[0];
              if (curr[1] === "Leaf") {
                return [
                        {
                          hd: curr[0],
                          tl: topLeaves
                        },
                        sliced
                      ];
              } else {
                return [
                        topLeaves,
                        {
                          hd: curr,
                          tl: sliced
                        }
                      ];
              }
            }));
      var topLeaves = match$1[0];
      var original = Core__List.reverse(match$1[1]);
      var newEvalStack_0 = [
        val,
        nodeKind
      ];
      var newEvalStack = {
        hd: newEvalStack_0,
        tl: original
      };
      if (Core__List.size(topLeaves) === 1) {
        var topLeaf = Core__Option.mapOr(Core__List.head(topLeaves), Int32.min_int, (function (v) {
                return v;
              }));
        _evaluationStack = newEvalStack;
        _lonelies = Core__List.size(rpnStack) === 1 ? lonelies : ({
              hd: topLeaf,
              tl: lonelies
            });
        _rpnStack = rest;
        continue ;
      }
      _evaluationStack = newEvalStack;
      _rpnStack = rest;
      continue ;
    };
  };
  if (root !== undefined) {
    return Core__List.toArray(processRPNStack(postorderTraverse(/* [] */0, {
                        hd: root,
                        tl: /* [] */0
                      }), /* [] */0, /* [] */0));
  } else {
    return [];
  }
}

var tree1 = TreeNode.make(1, Caml_option.some(TreeNode.make(2, undefined, Caml_option.some(TreeNode.make(4, undefined, undefined)))), Caml_option.some(TreeNode.make(3, undefined, undefined)));

var r1 = findAllTheLonelyNodes(tree1);

console.log("r1: ", r1);

export {
  findAllTheLonelyNodes ,
  tree1 ,
  r1 ,
}
/* tree1 Not a pure module */
