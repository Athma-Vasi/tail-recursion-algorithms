// Generated by ReScript, PLEASE EDIT WITH CARE

import * as TreeNode from "./TreeNode.res.js";
import * as Core__List from "@rescript/core/src/Core__List.res.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function maximumDepthOfBinaryTree(root) {
  if (root !== undefined) {
    var _maxDepth = 0;
    var _queue = {
      hd: [
        root,
        1
      ],
      tl: /* [] */0
    };
    while(true) {
      var queue = _queue;
      var maxDepth = _maxDepth;
      if (!queue) {
        return maxDepth;
      }
      var match = queue.hd;
      var poppedNode = match[0];
      var rest = queue.tl;
      var depth = match[1];
      var left = poppedNode.left;
      var right = poppedNode.right;
      var newMaxDepth = maxDepth > depth ? maxDepth : depth;
      if (left !== undefined) {
        if (right !== undefined) {
          _queue = Core__List.concat(rest, {
                hd: [
                  left,
                  depth + 1 | 0
                ],
                tl: {
                  hd: [
                    right,
                    depth + 1 | 0
                  ],
                  tl: /* [] */0
                }
              });
          _maxDepth = newMaxDepth;
          continue ;
        }
        _queue = Core__List.concat(rest, {
              hd: [
                left,
                depth + 1 | 0
              ],
              tl: /* [] */0
            });
        _maxDepth = newMaxDepth;
        continue ;
      }
      if (right !== undefined) {
        _queue = Core__List.concat(rest, {
              hd: [
                right,
                depth + 1 | 0
              ],
              tl: /* [] */0
            });
        _maxDepth = newMaxDepth;
        continue ;
      }
      _queue = rest;
      _maxDepth = newMaxDepth;
      continue ;
    };
  } else {
    return 0;
  }
}

var n5 = TreeNode.make(5, Caml_option.some(TreeNode.make(3, undefined, undefined)), Caml_option.some(TreeNode.make(7, undefined, undefined)));

var n15 = TreeNode.make(15, undefined, Caml_option.some(TreeNode.make(18, undefined, undefined)));

var root1 = TreeNode.make(10, Caml_option.some(n5), Caml_option.some(n15));

var r1 = maximumDepthOfBinaryTree(root1);

console.log("r1: ", r1);

export {
  maximumDepthOfBinaryTree ,
  n5 ,
  n15 ,
  root1 ,
  r1 ,
}
/* n5 Not a pure module */
