// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core__List from "@rescript/core/src/Core__List.res.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.js";
import * as Core__Option from "@rescript/core/src/Core__Option.res.js";
import * as NaryTreeNode from "./NaryTreeNode.res.js";

function naryTreeLevelOrderTraversal(root) {
  var traverse = function (levelValuesTable, _queue) {
    while(true) {
      var queue = _queue;
      if (!queue) {
        return levelValuesTable;
      }
      var match = queue.hd;
      var node = match[0];
      var branches = node.branches;
      var val = node.val;
      var rest = queue.tl;
      var level = match[1];
      var values = Core__Option.mapOr(levelValuesTable.get(level), {
            hd: val,
            tl: /* [] */0
          }, (function(val){
          return function (vals) {
            return {
                    hd: val,
                    tl: vals
                  };
          }
          }(val)));
      levelValuesTable.set(level, values);
      if (branches !== undefined) {
        _queue = Core__List.reduce(Core__List.reverse(branches), rest, (function(level){
            return function (acc, branch) {
              return {
                      hd: [
                        branch,
                        level + 1 | 0
                      ],
                      tl: acc
                    };
            }
            }(level)));
        continue ;
      }
      _queue = rest;
      continue ;
    };
  };
  if (root !== undefined) {
    return Core__List.toArray(Core__List.reverse(Core__Array.reduce(Array.from(traverse(new Map(), {
                                  hd: [
                                    root,
                                    0
                                  ],
                                  tl: /* [] */0
                                }).values()), /* [] */0, (function (acc, values) {
                          return {
                                  hd: Core__List.toArray(Core__List.reverse(values)),
                                  tl: acc
                                };
                        }))));
  } else {
    return [];
  }
}

var n5 = NaryTreeNode.make(5, undefined);

var n6 = NaryTreeNode.make(6, undefined);

var n7 = NaryTreeNode.make(7, undefined);

var n8 = NaryTreeNode.make(8, undefined);

var n9 = NaryTreeNode.make(9, undefined);

var n10 = NaryTreeNode.make(10, undefined);

var n2 = NaryTreeNode.make(2, Caml_option.some({
          hd: n5,
          tl: {
            hd: n6,
            tl: {
              hd: n7,
              tl: /* [] */0
            }
          }
        }));

var n3 = NaryTreeNode.make(3, Caml_option.some({
          hd: n8,
          tl: /* [] */0
        }));

var n4 = NaryTreeNode.make(4, Caml_option.some({
          hd: n9,
          tl: {
            hd: n10,
            tl: /* [] */0
          }
        }));

var root2 = NaryTreeNode.make(1, Caml_option.some({
          hd: n2,
          tl: {
            hd: n3,
            tl: {
              hd: n4,
              tl: /* [] */0
            }
          }
        }));

var r2 = naryTreeLevelOrderTraversal(root2);

console.log("r2: ", r2);

export {
  naryTreeLevelOrderTraversal ,
  n5 ,
  n6 ,
  n7 ,
  n8 ,
  n9 ,
  n10 ,
  n2 ,
  n3 ,
  n4 ,
  root2 ,
  r2 ,
}
/* n5 Not a pure module */
