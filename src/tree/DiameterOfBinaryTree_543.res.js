// Generated by ReScript, PLEASE EDIT WITH CARE

import * as TreeNode from "./TreeNode.res.js";
import * as Core__List from "@rescript/core/src/Core__List.res.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function diameterOfBinaryTree(root) {
  var postorderTraverse = function (_rpnStack, _workingStack) {
    while(true) {
      var workingStack = _workingStack;
      var rpnStack = _rpnStack;
      if (!workingStack) {
        return rpnStack;
      }
      var top = workingStack.hd;
      var right = top.right;
      var left = top.left;
      var val = top.val;
      var rest = workingStack.tl;
      if (left !== undefined) {
        if (right !== undefined) {
          _workingStack = {
            hd: right,
            tl: {
              hd: left,
              tl: rest
            }
          };
          _rpnStack = {
            hd: [
              val,
              "Branch",
              2
            ],
            tl: rpnStack
          };
          continue ;
        }
        _workingStack = {
          hd: left,
          tl: rest
        };
        _rpnStack = {
          hd: [
            val,
            "Branch",
            1
          ],
          tl: rpnStack
        };
        continue ;
      }
      if (right !== undefined) {
        _workingStack = {
          hd: right,
          tl: rest
        };
        _rpnStack = {
          hd: [
            val,
            "Branch",
            1
          ],
          tl: rpnStack
        };
        continue ;
      }
      _workingStack = rest;
      _rpnStack = {
        hd: [
          val,
          "Leaf",
          0
        ],
        tl: rpnStack
      };
      continue ;
    };
  };
  if (root !== undefined) {
    var _rpnStack = postorderTraverse(/* [] */0, {
          hd: root,
          tl: /* [] */0
        });
    var _diameter = -1;
    var _evalStack = /* [] */0;
    while(true) {
      var evalStack = _evalStack;
      var diameter = _diameter;
      var rpnStack = _rpnStack;
      if (!rpnStack) {
        return diameter + 1 | 0;
      }
      var top = rpnStack.hd;
      var leavesCount = top[2];
      var nodeKind = top[1];
      var rest = rpnStack.tl;
      if (nodeKind === "Leaf") {
        _evalStack = {
          hd: [
            0,
            nodeKind,
            0
          ],
          tl: evalStack
        };
        _rpnStack = rest;
        continue ;
      }
      var match = Core__List.reduceWithIndex(evalStack, [
            /* [] */0,
            /* [] */0
          ], (function(leavesCount){
          return function (acc, curr, idx) {
            var sliced = acc[1];
            var topLeaves = acc[0];
            if (leavesCount === 0) {
              if (idx === 0) {
                return [
                        {
                          hd: curr,
                          tl: topLeaves
                        },
                        sliced
                      ];
              } else {
                return [
                        topLeaves,
                        {
                          hd: curr,
                          tl: sliced
                        }
                      ];
              }
            } else if (idx < leavesCount && curr[1] === "Leaf") {
              return [
                      {
                        hd: curr,
                        tl: topLeaves
                      },
                      sliced
                    ];
            } else {
              return [
                      topLeaves,
                      {
                        hd: curr,
                        tl: sliced
                      }
                    ];
            }
          }
          }(leavesCount)));
      var topLeaves = match[0];
      var match$1;
      if (topLeaves) {
        var match$2 = topLeaves.tl;
        var h1 = topLeaves.hd[0];
        match$1 = match$2 ? (
            match$2.tl ? [
                0,
                0
              ] : [
                h1,
                match$2.hd[0]
              ]
          ) : [
            h1,
            0
          ];
      } else {
        match$1 = [
          0,
          0
        ];
      }
      var rightHeight = match$1[1];
      var leftHeight = match$1[0];
      var currentDiameter = (
        leftHeight === 0 ? 1 : leftHeight
      ) + (
        rightHeight === 0 ? 1 : rightHeight
      ) | 0;
      var newDiameter = diameter > currentDiameter ? diameter : currentDiameter;
      var currentSubtreeHeight = (
        leftHeight > rightHeight ? leftHeight : rightHeight
      ) + 1 | 0;
      _evalStack = {
        hd: [
          currentSubtreeHeight,
          "Leaf",
          0
        ],
        tl: match[1]
      };
      _diameter = newDiameter;
      _rpnStack = rest;
      continue ;
    };
  } else {
    return -1;
  }
}

var tree1 = TreeNode.make(1, Caml_option.some(TreeNode.make(2, Caml_option.some(TreeNode.make(4, undefined, undefined)), Caml_option.some(TreeNode.make(5, undefined, undefined)))), Caml_option.some(TreeNode.make(3, undefined, undefined)));

var r1 = diameterOfBinaryTree(tree1);

console.log("r1: ", r1);

export {
  diameterOfBinaryTree ,
  tree1 ,
  r1 ,
}
/* tree1 Not a pure module */
