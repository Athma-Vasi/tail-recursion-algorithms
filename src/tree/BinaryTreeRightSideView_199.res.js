// Generated by ReScript, PLEASE EDIT WITH CARE

import * as TreeNode from "./TreeNode.res.js";
import * as Core__List from "@rescript/core/src/Core__List.res.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.js";

function binaryTreeRightSideView(root) {
  var preorderTraverse = function (levelRightmostTable, _stack) {
    while(true) {
      var stack = _stack;
      if (!stack) {
        return levelRightmostTable;
      }
      var match = stack.hd;
      var node = match[0];
      var right = node.right;
      var left = node.left;
      var rest = stack.tl;
      var level = match[1];
      levelRightmostTable.set(level, node.val);
      if (left !== undefined) {
        if (right !== undefined) {
          _stack = {
            hd: [
              left,
              level + 1 | 0
            ],
            tl: {
              hd: [
                right,
                level + 1 | 0
              ],
              tl: rest
            }
          };
          continue ;
        }
        _stack = {
          hd: [
            left,
            level + 1 | 0
          ],
          tl: rest
        };
        continue ;
      }
      if (right !== undefined) {
        _stack = {
          hd: [
            right,
            level + 1 | 0
          ],
          tl: rest
        };
        continue ;
      }
      _stack = rest;
      continue ;
    };
  };
  if (root !== undefined) {
    return Core__List.toArray(Core__Array.reduceRight(Array.from(preorderTraverse(new Map(), {
                              hd: [
                                root,
                                1
                              ],
                              tl: /* [] */0
                            }).entries()), /* [] */0, (function (acc, param) {
                      return {
                              hd: param[1],
                              tl: acc
                            };
                    })));
  } else {
    return [];
  }
}

var tree1 = TreeNode.make(1, Caml_option.some(TreeNode.make(2, Caml_option.some(TreeNode.make(4, Caml_option.some(TreeNode.make(5, undefined, undefined)), undefined)), undefined)), Caml_option.some(TreeNode.make(3, undefined, undefined)));

var r1 = binaryTreeRightSideView(tree1);

console.log("r1: ", r1);

var tree2 = TreeNode.make(1, Caml_option.some(TreeNode.make(2, undefined, Caml_option.some(TreeNode.make(5, undefined, undefined)))), Caml_option.some(TreeNode.make(3, undefined, Caml_option.some(TreeNode.make(4, undefined, undefined)))));

var r2 = binaryTreeRightSideView(tree2);

console.log("r2: ", r2);

export {
  binaryTreeRightSideView ,
  tree1 ,
  r1 ,
  tree2 ,
  r2 ,
}
/* tree1 Not a pure module */
