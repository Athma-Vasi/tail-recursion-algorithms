// Generated by ReScript, PLEASE EDIT WITH CARE

import * as TreeNode from "./TreeNode.res.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function findACorrespondingNodeOfABinaryTreeInACloneOfThatTree(original, cloned, target) {
  var _currOriginal = original;
  var _currCloned = cloned;
  var _originalsStack = /* [] */0;
  var _clonedsStack = /* [] */0;
  while(true) {
    var clonedsStack = _clonedsStack;
    var originalsStack = _originalsStack;
    var currCloned = _currCloned;
    var currOriginal = _currOriginal;
    if (currOriginal !== undefined) {
      if (currCloned === undefined) {
        return ;
      }
      _clonedsStack = {
        hd: currCloned,
        tl: clonedsStack
      };
      _originalsStack = {
        hd: currOriginal,
        tl: originalsStack
      };
      _currCloned = currCloned.left;
      _currOriginal = currOriginal.left;
      continue ;
    }
    if (currCloned !== undefined) {
      return ;
    }
    if (!originalsStack) {
      return ;
    }
    if (!clonedsStack) {
      return ;
    }
    var _topOriginal = originalsStack.hd;
    var topCloned = clonedsStack.hd;
    if (target.val === _topOriginal.val) {
      return topCloned;
    }
    _clonedsStack = clonedsStack.tl;
    _originalsStack = originalsStack.tl;
    _currCloned = topCloned.right;
    _currOriginal = _topOriginal.right;
    continue ;
  };
}

var o6 = TreeNode.make(6, undefined, undefined);

var o19 = TreeNode.make(19, undefined, undefined);

var o3 = TreeNode.make(3, Caml_option.some(o6), Caml_option.some(o19));

var o4 = TreeNode.make(4, undefined, undefined);

var oRoot1 = TreeNode.make(7, Caml_option.some(o4), Caml_option.some(o3));

var c6 = TreeNode.make(6, undefined, undefined);

var c19 = TreeNode.make(19, undefined, undefined);

var c3 = TreeNode.make(3, Caml_option.some(c6), Caml_option.some(c19));

var c4 = TreeNode.make(4, undefined, undefined);

var cRoot1 = TreeNode.make(7, Caml_option.some(c4), Caml_option.some(c3));

var r1 = findACorrespondingNodeOfABinaryTreeInACloneOfThatTree(oRoot1, cRoot1, o3);

console.log("r1: ", r1);

export {
  findACorrespondingNodeOfABinaryTreeInACloneOfThatTree ,
  o6 ,
  o19 ,
  o3 ,
  o4 ,
  oRoot1 ,
  c6 ,
  c19 ,
  c3 ,
  c4 ,
  cRoot1 ,
  r1 ,
}
/* o6 Not a pure module */
