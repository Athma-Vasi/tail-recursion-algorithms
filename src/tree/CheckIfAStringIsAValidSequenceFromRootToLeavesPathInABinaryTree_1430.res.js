// Generated by ReScript, PLEASE EDIT WITH CARE

import * as TreeNode from "./TreeNode.res.js";
import * as Core__List from "@rescript/core/src/Core__List.res.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function checkIfAStringIsAValidSequenceFromRootToLeavesPathInABinaryTree(root, sequence) {
  var preorderTraverse = function (_paths, _stack) {
    while(true) {
      var stack = _stack;
      var paths = _paths;
      if (!stack) {
        return paths;
      }
      var match = stack.hd;
      var node = match[0];
      var rest = stack.tl;
      var left = node.left;
      var right = node.right;
      var newPathSoFar_0 = node.val;
      var newPathSoFar_1 = match[1];
      var newPathSoFar = {
        hd: newPathSoFar_0,
        tl: newPathSoFar_1
      };
      if (left !== undefined) {
        if (right !== undefined) {
          _stack = {
            hd: [
              left,
              newPathSoFar
            ],
            tl: {
              hd: [
                right,
                newPathSoFar
              ],
              tl: rest
            }
          };
          continue ;
        }
        _stack = {
          hd: [
            left,
            newPathSoFar
          ],
          tl: rest
        };
        continue ;
      }
      if (right !== undefined) {
        _stack = {
          hd: [
            right,
            newPathSoFar
          ],
          tl: rest
        };
        continue ;
      }
      _stack = rest;
      _paths = {
        hd: newPathSoFar,
        tl: paths
      };
      continue ;
    };
  };
  if (root !== undefined) {
    return Core__List.reduce(preorderTraverse(/* [] */0, {
                    hd: [
                      root,
                      /* [] */0
                    ],
                    tl: /* [] */0
                  }), false, (function (acc, path) {
                  var serialized = Core__List.reduce(Core__List.reverse(path), String(), (function (seqAcc, pos) {
                          return seqAcc + pos.toString();
                        }));
                  if (serialized === sequence) {
                    return true;
                  } else {
                    return acc;
                  }
                }));
  } else {
    return false;
  }
}

var tree1 = TreeNode.make(0, Caml_option.some(TreeNode.make(1, Caml_option.some(TreeNode.make(0, undefined, Caml_option.some(TreeNode.make(1, undefined, undefined)))), Caml_option.some(TreeNode.make(1, Caml_option.some(TreeNode.make(1, Caml_option.some(TreeNode.make(0, undefined, undefined)), Caml_option.some(TreeNode.make(0, undefined, undefined)))), undefined)))), Caml_option.some(TreeNode.make(0, Caml_option.some(TreeNode.make(0, undefined, undefined)), undefined)));

var r1 = checkIfAStringIsAValidSequenceFromRootToLeavesPathInABinaryTree(tree1, "0101");

console.log("r1: ", r1);

var r2 = checkIfAStringIsAValidSequenceFromRootToLeavesPathInABinaryTree(tree1, "001");

console.log("r2: ", r2);

var r3 = checkIfAStringIsAValidSequenceFromRootToLeavesPathInABinaryTree(tree1, "011");

console.log("r3: ", r3);

export {
  checkIfAStringIsAValidSequenceFromRootToLeavesPathInABinaryTree ,
  tree1 ,
  r1 ,
  r2 ,
  r3 ,
}
/* tree1 Not a pure module */
