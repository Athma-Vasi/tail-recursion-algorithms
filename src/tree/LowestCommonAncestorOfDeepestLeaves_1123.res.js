// Generated by ReScript, PLEASE EDIT WITH CARE

import * as TreeNode from "./TreeNode.res.js";
import * as Core__List from "@rescript/core/src/Core__List.res.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function lowestCommonAncestorOfDeepestLeaves(root) {
  var postorderTraverse = function (_maxDepth, _rpnStack, _workingStack) {
    while(true) {
      var workingStack = _workingStack;
      var rpnStack = _rpnStack;
      var maxDepth = _maxDepth;
      if (!workingStack) {
        return [
                maxDepth,
                rpnStack
              ];
      }
      var match = workingStack.hd;
      var node = match[0];
      var val = node.val;
      var rest = workingStack.tl;
      var depth = match[1];
      var left = node.left;
      var right = node.right;
      var newMaxDepth = maxDepth > depth ? maxDepth : depth;
      if (left !== undefined) {
        if (right !== undefined) {
          _workingStack = {
            hd: [
              left,
              depth + 1 | 0
            ],
            tl: {
              hd: [
                right,
                depth + 1 | 0
              ],
              tl: rest
            }
          };
          _rpnStack = {
            hd: [
              depth,
              val,
              "Branch"
            ],
            tl: rpnStack
          };
          _maxDepth = newMaxDepth;
          continue ;
        }
        _workingStack = {
          hd: [
            left,
            depth + 1 | 0
          ],
          tl: rest
        };
        _rpnStack = {
          hd: [
            depth,
            val,
            "Branch"
          ],
          tl: rpnStack
        };
        _maxDepth = newMaxDepth;
        continue ;
      }
      if (right !== undefined) {
        _workingStack = {
          hd: [
            right,
            depth + 1 | 0
          ],
          tl: rest
        };
        _rpnStack = {
          hd: [
            depth,
            val,
            "Branch"
          ],
          tl: rpnStack
        };
        _maxDepth = newMaxDepth;
        continue ;
      }
      _workingStack = rest;
      _rpnStack = {
        hd: [
          depth,
          val,
          "Leaf"
        ],
        tl: rpnStack
      };
      _maxDepth = newMaxDepth;
      continue ;
    };
  };
  var processRPNStack = function (_ancestorsStack, _evaluationStack, maxDepth, _rpnStack) {
    while(true) {
      var rpnStack = _rpnStack;
      var evaluationStack = _evaluationStack;
      var ancestorsStack = _ancestorsStack;
      if (!rpnStack) {
        return ancestorsStack;
      }
      var rest = rpnStack.tl;
      var match = rpnStack.hd;
      var nodeKind = match[2];
      var val = match[1];
      var depth = match[0];
      var match$1 = depth === maxDepth;
      if (match$1) {
        if (nodeKind === "Leaf") {
          _rpnStack = rest;
          _evaluationStack = {
            hd: val,
            tl: evaluationStack
          };
          continue ;
        }
        _rpnStack = rest;
        continue ;
      }
      if (nodeKind === "Leaf") {
        _rpnStack = rest;
        continue ;
      }
      _rpnStack = rest;
      _evaluationStack = /* [] */0;
      _ancestorsStack = depth === (maxDepth - 1 | 0) ? Core__List.reduce(evaluationStack, {
              hd: val,
              tl: ancestorsStack
            }, (function (acc, curr) {
                return {
                        hd: curr,
                        tl: acc
                      };
              })) : ancestorsStack;
      continue ;
    };
  };
  if (root === undefined) {
    return [];
  }
  var match = postorderTraverse(-1, /* [] */0, {
        hd: [
          root,
          0
        ],
        tl: /* [] */0
      });
  return Core__List.toArray(processRPNStack(/* [] */0, /* [] */0, match[0], match[1]));
}

var n5 = TreeNode.make(5, Caml_option.some(TreeNode.make(3, undefined, undefined)), Caml_option.some(TreeNode.make(7, undefined, undefined)));

var n15 = TreeNode.make(15, undefined, Caml_option.some(TreeNode.make(18, undefined, undefined)));

var root1 = TreeNode.make(10, Caml_option.some(n5), Caml_option.some(n15));

var r1 = lowestCommonAncestorOfDeepestLeaves(root1);

console.log("r1: ", r1);

export {
  lowestCommonAncestorOfDeepestLeaves ,
  n5 ,
  n15 ,
  root1 ,
  r1 ,
}
/* n5 Not a pure module */
