// Generated by ReScript, PLEASE EDIT WITH CARE

import * as TreeNode from "./TreeNode.res.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function subtreeOfAnotherTree(root, subRoot) {
  var preorderTraverse = function (_serialized, _workingStack) {
    while(true) {
      var workingStack = _workingStack;
      var serialized = _serialized;
      if (!workingStack) {
        return serialized;
      }
      var top = workingStack.hd;
      var rest = workingStack.tl;
      var left = top.left;
      var right = top.right;
      var serialized_ = serialized.concat("->" + top.val.toString());
      if (left !== undefined) {
        if (right !== undefined) {
          _workingStack = {
            hd: left,
            tl: {
              hd: right,
              tl: rest
            }
          };
          _serialized = serialized_;
          continue ;
        }
        _workingStack = {
          hd: left,
          tl: rest
        };
        _serialized = serialized_;
        continue ;
      }
      if (right !== undefined) {
        _workingStack = {
          hd: right,
          tl: rest
        };
        _serialized = serialized_;
        continue ;
      }
      _workingStack = rest;
      _serialized = serialized_;
      continue ;
    };
  };
  if (root === undefined) {
    return false;
  }
  if (subRoot === undefined) {
    return false;
  }
  var rootSerialized = preorderTraverse(String(), {
        hd: root,
        tl: /* [] */0
      });
  var subRootSerialized = preorderTraverse(String(), {
        hd: subRoot,
        tl: /* [] */0
      });
  return rootSerialized.includes(subRootSerialized);
}

var n5 = TreeNode.make(5, Caml_option.some(TreeNode.make(3, undefined, undefined)), Caml_option.some(TreeNode.make(7, undefined, undefined)));

var n15 = TreeNode.make(15, undefined, Caml_option.some(TreeNode.make(18, undefined, undefined)));

var root1 = TreeNode.make(10, Caml_option.some(n5), Caml_option.some(n15));

var r1 = subtreeOfAnotherTree(root1, n5);

console.log("r1: ", r1);

export {
  subtreeOfAnotherTree ,
  n5 ,
  n15 ,
  root1 ,
  r1 ,
}
/* n5 Not a pure module */
