// Generated by ReScript, PLEASE EDIT WITH CARE

import * as TreeNode from "./TreeNode.res.js";
import * as Core__List from "@rescript/core/src/Core__List.res.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function countUnivalueSubtrees(root) {
  var postorderTraverse = function (_rpnStack, _workingStack) {
    while(true) {
      var workingStack = _workingStack;
      var rpnStack = _rpnStack;
      if (!workingStack) {
        return rpnStack;
      }
      var top = workingStack.hd;
      var val = top.val;
      var rest = workingStack.tl;
      var left = top.left;
      var right = top.right;
      if (left !== undefined) {
        if (right !== undefined) {
          _workingStack = {
            hd: right,
            tl: {
              hd: left,
              tl: rest
            }
          };
          _rpnStack = {
            hd: [
              val,
              "Branch"
            ],
            tl: rpnStack
          };
          continue ;
        }
        _workingStack = {
          hd: left,
          tl: rest
        };
        _rpnStack = {
          hd: [
            val,
            "Branch"
          ],
          tl: rpnStack
        };
        continue ;
      }
      if (right !== undefined) {
        _workingStack = {
          hd: right,
          tl: rest
        };
        _rpnStack = {
          hd: [
            val,
            "Branch"
          ],
          tl: rpnStack
        };
        continue ;
      }
      _workingStack = rest;
      _rpnStack = {
        hd: [
          val,
          "Leaf"
        ],
        tl: rpnStack
      };
      continue ;
    };
  };
  if (root !== undefined) {
    var _rpnStack = postorderTraverse(/* [] */0, {
          hd: root,
          tl: /* [] */0
        });
    var _univalueCount = 0;
    var _leavesCount = 0;
    var _evaluationStack = /* [] */0;
    while(true) {
      var evaluationStack = _evaluationStack;
      var leavesCount = _leavesCount;
      var univalueCount = _univalueCount;
      var rpnStack = _rpnStack;
      if (!rpnStack) {
        return univalueCount;
      }
      var rest = rpnStack.tl;
      var match = rpnStack.hd;
      var nodeKind = match[1];
      var val = match[0];
      if (nodeKind === "Leaf") {
        _evaluationStack = {
          hd: [
            val,
            nodeKind,
            1
          ],
          tl: evaluationStack
        };
        _leavesCount = leavesCount + 1 | 0;
        _rpnStack = rest;
        continue ;
      }
      var match$1 = Core__List.reduceWithIndex(evaluationStack, [
            /* [] */0,
            /* [] */0
          ], (function(leavesCount){
          return function (acc, curr, idx) {
            var countSoFar = curr[2];
            var nodeKind = curr[1];
            var val = curr[0];
            var sliced = acc[1];
            var topLeaves = acc[0];
            if (idx < leavesCount && nodeKind === "Leaf") {
              return [
                      {
                        hd: [
                          val,
                          countSoFar
                        ],
                        tl: topLeaves
                      },
                      sliced
                    ];
            } else {
              return [
                      topLeaves,
                      {
                        hd: [
                          val,
                          nodeKind,
                          countSoFar
                        ],
                        tl: sliced
                      }
                    ];
            }
          }
          }(leavesCount)));
      var match$2 = Core__List.reduce(match$1[0], [
            /* [] */0,
            univalueCount
          ], (function (acc, param) {
              return [
                      {
                        hd: param[0],
                        tl: acc[0]
                      },
                      acc[1] + param[1] | 0
                    ];
            }));
      var countWithLeaves = match$2[1];
      var leavesValues = match$2[0];
      var newCount;
      if (leavesValues) {
        var restLeaves = leavesValues.tl;
        var topLeaf = leavesValues.hd;
        newCount = restLeaves ? (
            val === topLeaf && val === restLeaves.hd ? countWithLeaves + 1 | 0 : countWithLeaves
          ) : (
            val === topLeaf ? countWithLeaves + 1 | 0 : countWithLeaves
          );
      } else {
        newCount = countWithLeaves;
      }
      _evaluationStack = {
        hd: [
          val,
          "Leaf",
          newCount
        ],
        tl: match$1[1]
      };
      _leavesCount = 0;
      _univalueCount = newCount;
      _rpnStack = rest;
      continue ;
    };
  } else {
    return -1;
  }
}

var tree1 = TreeNode.make(5, Caml_option.some(TreeNode.make(1, Caml_option.some(TreeNode.make(5, undefined, undefined)), Caml_option.some(TreeNode.make(5, undefined, undefined)))), Caml_option.some(TreeNode.make(5, undefined, Caml_option.some(TreeNode.make(5, undefined, undefined)))));

var r1 = countUnivalueSubtrees(tree1);

console.log("r1: ", r1);

export {
  countUnivalueSubtrees ,
  tree1 ,
  r1 ,
}
/* tree1 Not a pure module */
