// Generated by ReScript, PLEASE EDIT WITH CARE

import * as TreeNode from "./TreeNode.res.js";
import * as Core__List from "@rescript/core/src/Core__List.res.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function lowestCommonAncestorOfABinaryTree_III(root, p, q) {
  var postorderTraverse = function (_rpnStack, _workingStack) {
    while(true) {
      var workingStack = _workingStack;
      var rpnStack = _rpnStack;
      if (!workingStack) {
        return rpnStack;
      }
      var node = workingStack.hd;
      var right = node.right;
      var left = node.left;
      var val = node.val;
      var rest = workingStack.tl;
      if (left !== undefined) {
        if (right !== undefined) {
          _workingStack = {
            hd: right,
            tl: {
              hd: left,
              tl: rest
            }
          };
          _rpnStack = {
            hd: [
              val,
              "Branch"
            ],
            tl: rpnStack
          };
          continue ;
        }
        _workingStack = {
          hd: left,
          tl: rest
        };
        _rpnStack = {
          hd: [
            val,
            "Branch"
          ],
          tl: rpnStack
        };
        continue ;
      }
      if (right !== undefined) {
        _workingStack = {
          hd: right,
          tl: rest
        };
        _rpnStack = {
          hd: [
            val,
            "Branch"
          ],
          tl: rpnStack
        };
        continue ;
      }
      _workingStack = rest;
      _rpnStack = {
        hd: [
          val,
          "Leaf"
        ],
        tl: rpnStack
      };
      continue ;
    };
  };
  if (root !== undefined) {
    var _rpnStack = postorderTraverse(/* [] */0, {
          hd: root,
          tl: /* [] */0
        });
    var _lowestCommonAncestor;
    var _evaluationStack = /* [] */0;
    while(true) {
      var evaluationStack = _evaluationStack;
      var lowestCommonAncestor = _lowestCommonAncestor;
      var rpnStack = _rpnStack;
      if (!rpnStack) {
        return lowestCommonAncestor;
      }
      var rest = rpnStack.tl;
      var match = rpnStack.hd;
      var nodeKind = match[1];
      var val = match[0];
      if (nodeKind === "Leaf") {
        _evaluationStack = {
          hd: [
            val,
            nodeKind
          ],
          tl: evaluationStack
        };
        _rpnStack = rest;
        continue ;
      }
      var match$1 = Core__List.reduceWithIndex(evaluationStack, [
            /* [] */0,
            /* [] */0
          ], (function (acc, curr, idx) {
              var nodeKind = curr[1];
              var sliced = acc[1];
              var topLeaves = acc[0];
              var match = idx < 2;
              if (match && nodeKind === "Leaf") {
                return [
                        {
                          hd: [
                            curr[0],
                            nodeKind
                          ],
                          tl: topLeaves
                        },
                        sliced
                      ];
              } else {
                return [
                        topLeaves,
                        {
                          hd: curr,
                          tl: sliced
                        }
                      ];
              }
            }));
      var topLeaves = match$1[0];
      var original = Core__List.reverse(match$1[1]);
      var isLCA = Core__List.size(topLeaves) < 2 ? false : Core__List.size(Core__List.reduce(topLeaves, /* [] */0, (function (acc, param) {
                    var val = param[0];
                    if (val === p || val === q) {
                      return {
                              hd: true,
                              tl: acc
                            };
                    } else {
                      return acc;
                    }
                  }))) === 2;
      _evaluationStack = {
        hd: [
          val,
          "Leaf"
        ],
        tl: original
      };
      _lowestCommonAncestor = isLCA ? val : lowestCommonAncestor;
      _rpnStack = rest;
      continue ;
    };
  }
  
}

var tree1 = TreeNode.make(3, Caml_option.some(TreeNode.make(5, Caml_option.some(TreeNode.make(6, undefined, undefined)), Caml_option.some(TreeNode.make(2, Caml_option.some(TreeNode.make(7, undefined, undefined)), Caml_option.some(TreeNode.make(4, undefined, undefined)))))), Caml_option.some(TreeNode.make(1, Caml_option.some(TreeNode.make(0, undefined, undefined)), Caml_option.some(TreeNode.make(8, undefined, undefined)))));

var r1 = lowestCommonAncestorOfABinaryTree_III(tree1, 5, 1);

console.log("r1: ", r1);

var tree2 = TreeNode.make(3, Caml_option.some(TreeNode.make(5, Caml_option.some(TreeNode.make(6, undefined, undefined)), Caml_option.some(TreeNode.make(2, Caml_option.some(TreeNode.make(7, undefined, undefined)), Caml_option.some(TreeNode.make(4, undefined, undefined)))))), Caml_option.some(TreeNode.make(1, Caml_option.some(TreeNode.make(0, undefined, undefined)), Caml_option.some(TreeNode.make(8, undefined, undefined)))));

var r2 = lowestCommonAncestorOfABinaryTree_III(tree2, 5, 4);

console.log("r2: ", r2);

export {
  lowestCommonAncestorOfABinaryTree_III ,
  tree1 ,
  r1 ,
  tree2 ,
  r2 ,
}
/* tree1 Not a pure module */
