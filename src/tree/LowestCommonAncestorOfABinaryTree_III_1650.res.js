// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Int32 from "rescript/lib/es6/int32.js";
import * as TreeNode from "./TreeNode.res.js";
import * as Core__List from "@rescript/core/src/Core__List.res.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.res.js";

function lowestCommonAncestorOfABinaryTree_III(root, p, q) {
  var preorderTraverse = function (pathToRoot, valueToFind, _stack) {
    while(true) {
      var stack = _stack;
      if (!stack) {
        return pathToRoot;
      }
      var match = stack.hd;
      var node = match[0];
      var right = node.right;
      var left = node.left;
      var val = node.val;
      var rest = stack.tl;
      var newPath_1 = match[1];
      var newPath = {
        hd: val,
        tl: newPath_1
      };
      if (val === valueToFind) {
        return newPath;
      }
      if (left !== undefined) {
        if (right !== undefined) {
          _stack = {
            hd: [
              left,
              newPath
            ],
            tl: {
              hd: [
                right,
                newPath
              ],
              tl: rest
            }
          };
          continue ;
        }
        _stack = {
          hd: [
            left,
            newPath
          ],
          tl: rest
        };
        continue ;
      }
      if (right !== undefined) {
        _stack = {
          hd: [
            right,
            newPath
          ],
          tl: rest
        };
        continue ;
      }
      _stack = rest;
      continue ;
    };
  };
  if (root === undefined) {
    return Int32.min_int;
  }
  var pPath = Core__List.reverse(preorderTraverse(/* [] */0, p, {
            hd: [
              root,
              /* [] */0
            ],
            tl: /* [] */0
          }));
  var qPath = Core__List.reverse(preorderTraverse(/* [] */0, q, {
            hd: [
              root,
              /* [] */0
            ],
            tl: /* [] */0
          }));
  var _stack = /* [] */0;
  var _index = 0;
  while(true) {
    var index = _index;
    var stack = _stack;
    var match = Core__List.get(pPath, index);
    var match$1 = Core__List.get(qPath, index);
    if (match !== undefined && match$1 !== undefined) {
      if (match !== match$1) {
        return Core__Option.mapOr(Core__List.head(stack), Int32.min_int, (function (v) {
                      return v;
                    }));
      }
      _index = index + 1 | 0;
      _stack = {
        hd: match,
        tl: stack
      };
      continue ;
    }
    return Core__Option.mapOr(Core__List.head(stack), Int32.min_int, (function (v) {
                  return v;
                }));
  };
}

var tree1 = TreeNode.make(3, Caml_option.some(TreeNode.make(5, Caml_option.some(TreeNode.make(6, undefined, undefined)), Caml_option.some(TreeNode.make(2, Caml_option.some(TreeNode.make(7, undefined, undefined)), Caml_option.some(TreeNode.make(4, undefined, undefined)))))), Caml_option.some(TreeNode.make(1, Caml_option.some(TreeNode.make(0, undefined, undefined)), Caml_option.some(TreeNode.make(8, undefined, undefined)))));

var r1 = lowestCommonAncestorOfABinaryTree_III(tree1, 5, 1);

console.log("r1: ", r1);

var tree2 = TreeNode.make(3, Caml_option.some(TreeNode.make(5, Caml_option.some(TreeNode.make(6, undefined, undefined)), Caml_option.some(TreeNode.make(2, Caml_option.some(TreeNode.make(7, undefined, undefined)), Caml_option.some(TreeNode.make(4, undefined, undefined)))))), Caml_option.some(TreeNode.make(1, Caml_option.some(TreeNode.make(0, undefined, undefined)), Caml_option.some(TreeNode.make(8, undefined, undefined)))));

var r2 = lowestCommonAncestorOfABinaryTree_III(tree2, 5, 4);

console.log("r2: ", r2);

export {
  lowestCommonAncestorOfABinaryTree_III ,
  tree1 ,
  r1 ,
  tree2 ,
  r2 ,
}
/* tree1 Not a pure module */
