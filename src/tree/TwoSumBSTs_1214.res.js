// Generated by ReScript, PLEASE EDIT WITH CARE

import * as TreeNode from "./TreeNode.res.js";
import * as Core__List from "@rescript/core/src/Core__List.res.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function twoSumBSTs(root1, root2, target) {
  var inorderTraverse = function (_resultStack, _curr, _workingStack) {
    while(true) {
      var workingStack = _workingStack;
      var curr = _curr;
      var resultStack = _resultStack;
      if (curr !== undefined) {
        _workingStack = {
          hd: curr,
          tl: workingStack
        };
        _curr = curr.left;
        continue ;
      }
      if (!workingStack) {
        return Core__List.reverse(resultStack);
      }
      var popped = workingStack.hd;
      _workingStack = workingStack.tl;
      _curr = popped.right;
      _resultStack = {
        hd: popped.val,
        tl: resultStack
      };
      continue ;
    };
  };
  var sorted1 = inorderTraverse(/* [] */0, root1, /* [] */0);
  var sorted2 = inorderTraverse(/* [] */0, root2, /* [] */0);
  var length2 = Core__List.size(sorted2);
  var exists = false;
  var _leftIdx = 0;
  var _rightIdx = length2 - 1 | 0;
  while(true) {
    var rightIdx = _rightIdx;
    var leftIdx = _leftIdx;
    if (rightIdx < 0 || leftIdx > length2) {
      return exists;
    }
    var match = Core__List.get(sorted1, leftIdx);
    var match$1 = Core__List.get(sorted2, rightIdx);
    if (match === undefined) {
      return exists;
    }
    if (match$1 === undefined) {
      return exists;
    }
    if ((match + match$1 | 0) === target) {
      return true;
    }
    if ((match + match$1 | 0) < target) {
      _leftIdx = leftIdx + 1 | 0;
      continue ;
    }
    _rightIdx = rightIdx - 1 | 0;
    continue ;
  };
}

var tree1 = TreeNode.make(2, Caml_option.some(TreeNode.make(1, undefined, undefined)), Caml_option.some(TreeNode.make(4, undefined, undefined)));

var tree2 = TreeNode.make(1, Caml_option.some(TreeNode.make(0, undefined, undefined)), Caml_option.some(TreeNode.make(3, undefined, undefined)));

var r1 = twoSumBSTs(tree1, tree2, 5);

console.log("r1: ", r1);

var tree3 = TreeNode.make(0, Caml_option.some(TreeNode.make(-10, undefined, undefined)), Caml_option.some(TreeNode.make(10, undefined, undefined)));

var tree4 = TreeNode.make(5, Caml_option.some(TreeNode.make(1, Caml_option.some(TreeNode.make(0, undefined, undefined)), Caml_option.some(TreeNode.make(2, undefined, undefined)))), Caml_option.some(TreeNode.make(7, undefined, undefined)));

var r2 = twoSumBSTs(tree3, tree4, 18);

console.log("r2: ", r2);

export {
  twoSumBSTs ,
  tree1 ,
  tree2 ,
  r1 ,
  tree3 ,
  tree4 ,
  r2 ,
}
/* tree1 Not a pure module */
