// Generated by ReScript, PLEASE EDIT WITH CARE

import * as TreeNode from "./TreeNode.res.js";
import * as Core__List from "@rescript/core/src/Core__List.res.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.js";
import * as Core__Option from "@rescript/core/src/Core__Option.res.js";

function mostFrequentSubtreeSum(root) {
  var postorderTraverse = function (_rpnStack, _workingStack) {
    while(true) {
      var workingStack = _workingStack;
      var rpnStack = _rpnStack;
      if (!workingStack) {
        return rpnStack;
      }
      var node = workingStack.hd;
      var val = node.val;
      var rest = workingStack.tl;
      var left = node.left;
      var right = node.right;
      if (left !== undefined) {
        if (right !== undefined) {
          _workingStack = {
            hd: left,
            tl: {
              hd: right,
              tl: rest
            }
          };
          _rpnStack = {
            hd: [
              val,
              "Branch"
            ],
            tl: rpnStack
          };
          continue ;
        }
        _workingStack = {
          hd: left,
          tl: rest
        };
        _rpnStack = {
          hd: [
            val,
            "Branch"
          ],
          tl: rpnStack
        };
        continue ;
      }
      if (right !== undefined) {
        _workingStack = {
          hd: right,
          tl: rest
        };
        _rpnStack = {
          hd: [
            val,
            "Branch"
          ],
          tl: rpnStack
        };
        continue ;
      }
      _workingStack = rest;
      _rpnStack = {
        hd: [
          val,
          "Leaf"
        ],
        tl: rpnStack
      };
      continue ;
    };
  };
  var processRPNStack = function (_rpnStack, freqTable, _evaluationStack) {
    while(true) {
      var evaluationStack = _evaluationStack;
      var rpnStack = _rpnStack;
      if (!rpnStack) {
        return freqTable;
      }
      var rest = rpnStack.tl;
      var match = rpnStack.hd;
      var val = match[0];
      if (match[1] === "Leaf") {
        var freq = Core__Option.mapOr(freqTable.get(val), 1, (function (f) {
                return f + 1 | 0;
              }));
        freqTable.set(val, freq);
        _evaluationStack = {
          hd: val,
          tl: evaluationStack
        };
        _rpnStack = rest;
        continue ;
      }
      var subtreeSum = Core__List.reduce(evaluationStack, val, (function (acc, num) {
              return acc + num | 0;
            }));
      var freq$1 = Core__Option.mapOr(freqTable.get(subtreeSum), 1, (function (f) {
              return f + 1 | 0;
            }));
      freqTable.set(subtreeSum, freq$1);
      var sliced = Core__List.reduceWithIndex(evaluationStack, /* [] */0, (function (acc, curr, idx) {
              if (idx === 0 || idx === 1) {
                return acc;
              } else {
                return {
                        hd: curr,
                        tl: acc
                      };
              }
            }));
      _evaluationStack = {
        hd: subtreeSum,
        tl: sliced
      };
      _rpnStack = rest;
      continue ;
    };
  };
  if (root === undefined) {
    return [];
  }
  var valFreqTuples = Array.from(processRPNStack(postorderTraverse(/* [] */0, {
                  hd: root,
                  tl: /* [] */0
                }), new Map(), /* [] */0).entries());
  var maxFreq = Core__Array.reduce(valFreqTuples, 0, (function (acc, param) {
          var freq = param[1];
          if (freq > acc) {
            return freq;
          } else {
            return acc;
          }
        }));
  return Core__List.toArray(Core__Array.reduce(valFreqTuples, /* [] */0, (function (acc, param) {
                    if (param[1] === maxFreq) {
                      return {
                              hd: param[0],
                              tl: acc
                            };
                    } else {
                      return acc;
                    }
                  })));
}

var tree1 = TreeNode.make(5, Caml_option.some(TreeNode.make(2, undefined, undefined)), Caml_option.some(TreeNode.make(-3, undefined, undefined)));

var r1 = mostFrequentSubtreeSum(tree1);

console.log("r1: ", r1);

var tree2 = TreeNode.make(5, Caml_option.some(TreeNode.make(2, undefined, undefined)), Caml_option.some(TreeNode.make(-5, undefined, undefined)));

var r2 = mostFrequentSubtreeSum(tree2);

console.log("r2: ", r2);

export {
  mostFrequentSubtreeSum ,
  tree1 ,
  r1 ,
  tree2 ,
  r2 ,
}
/* tree1 Not a pure module */
