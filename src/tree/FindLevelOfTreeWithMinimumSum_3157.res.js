// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml from "rescript/lib/es6/caml.js";
import * as TreeNode from "./TreeNode.res.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.res.js";

function findLevelOfTreeWithMinimumSum(root) {
  var preorderTraverse = function (levelSumsTable, _stack) {
    while(true) {
      var stack = _stack;
      if (!stack) {
        return levelSumsTable;
      }
      var match = stack.hd;
      var node = match[0];
      var right = node.right;
      var left = node.left;
      var rest = stack.tl;
      var level = match[1];
      var sums = Core__Option.getOr(levelSumsTable.get(level), 0);
      levelSumsTable.set(level, sums + node.val | 0);
      if (left !== undefined) {
        if (right !== undefined) {
          _stack = {
            hd: [
              left,
              level + 1 | 0
            ],
            tl: {
              hd: [
                right,
                level + 1 | 0
              ],
              tl: rest
            }
          };
          continue ;
        }
        _stack = {
          hd: [
            left,
            level + 1 | 0
          ],
          tl: rest
        };
        continue ;
      }
      if (right !== undefined) {
        _stack = {
          hd: [
            right,
            level + 1 | 0
          ],
          tl: rest
        };
        continue ;
      }
      _stack = rest;
      continue ;
    };
  };
  if (root !== undefined) {
    return Core__Option.mapOr(Array.from(preorderTraverse(new Map(), {
                                hd: [
                                  root,
                                  1
                                ],
                                tl: /* [] */0
                              }).entries()).toSorted(function (param, param$1) {
                        var sum2 = param$1[1];
                        var sum1 = param[1];
                        if (sum1 === sum2) {
                          return Caml.int_compare(param[0], param$1[0]);
                        } else {
                          return Caml.int_compare(sum1, sum2);
                        }
                      }).at(0), [
                  -1,
                  0
                ], (function (tuple) {
                    return tuple;
                  }))[0];
  } else {
    return -1;
  }
}

var tree1 = TreeNode.make(50, Caml_option.some(TreeNode.make(6, Caml_option.some(TreeNode.make(30, undefined, undefined)), Caml_option.some(TreeNode.make(80, undefined, undefined)))), Caml_option.some(TreeNode.make(2, Caml_option.some(TreeNode.make(7, undefined, undefined)), undefined)));

var r1 = findLevelOfTreeWithMinimumSum(tree1);

console.log("r1: ", r1);

var tree2 = TreeNode.make(36, Caml_option.some(TreeNode.make(17, undefined, undefined)), Caml_option.some(TreeNode.make(10, Caml_option.some(TreeNode.make(24, undefined, undefined)), undefined)));

var r2 = findLevelOfTreeWithMinimumSum(tree2);

console.log("r2: ", r2);

var tree3 = TreeNode.make(5, undefined, Caml_option.some(TreeNode.make(5, undefined, Caml_option.some(TreeNode.make(5, undefined, undefined)))));

var r3 = findLevelOfTreeWithMinimumSum(tree3);

console.log("r3: ", r3);

export {
  findLevelOfTreeWithMinimumSum ,
  tree1 ,
  r1 ,
  tree2 ,
  r2 ,
  tree3 ,
  r3 ,
}
/* tree1 Not a pure module */
