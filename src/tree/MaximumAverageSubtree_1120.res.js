// Generated by ReScript, PLEASE EDIT WITH CARE

import * as TreeNode from "./TreeNode.res.js";
import * as Core__List from "@rescript/core/src/Core__List.res.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.js";

function maximumAverageSubtree(root) {
  var postorderTraverse = function (_rpnStack, _workingStack) {
    while(true) {
      var workingStack = _workingStack;
      var rpnStack = _rpnStack;
      if (!workingStack) {
        return rpnStack;
      }
      var top = workingStack.hd;
      var right = top.right;
      var left = top.left;
      var val = top.val;
      var rest = workingStack.tl;
      if (left !== undefined) {
        if (right !== undefined) {
          _workingStack = {
            hd: right,
            tl: {
              hd: left,
              tl: rest
            }
          };
          _rpnStack = {
            hd: [
              val,
              "Branch"
            ],
            tl: rpnStack
          };
          continue ;
        }
        _workingStack = {
          hd: left,
          tl: rest
        };
        _rpnStack = {
          hd: [
            val,
            "Branch"
          ],
          tl: rpnStack
        };
        continue ;
      }
      if (right !== undefined) {
        _workingStack = {
          hd: right,
          tl: rest
        };
        _rpnStack = {
          hd: [
            val,
            "Branch"
          ],
          tl: rpnStack
        };
        continue ;
      }
      _workingStack = rest;
      _rpnStack = {
        hd: [
          val,
          "Leaf"
        ],
        tl: rpnStack
      };
      continue ;
    };
  };
  if (root !== undefined) {
    var _rpnStack = postorderTraverse(/* [] */0, {
          hd: root,
          tl: /* [] */0
        });
    var _maxAverage = -1;
    var _evaluationStack = /* [] */0;
    while(true) {
      var evaluationStack = _evaluationStack;
      var maxAverage = _maxAverage;
      var rpnStack = _rpnStack;
      if (!rpnStack) {
        return maxAverage;
      }
      var rest = rpnStack.tl;
      var match = rpnStack.hd;
      var nodeKind = match[1];
      var val = match[0];
      if (nodeKind === "Leaf") {
        _evaluationStack = {
          hd: [
            val,
            nodeKind
          ],
          tl: evaluationStack
        };
        _rpnStack = rest;
        continue ;
      }
      var match$1 = Core__List.reduceWithIndex(evaluationStack, [
            /* [] */0,
            /* [] */0
          ], (function (acc, curr, idx) {
              var nodeKind = curr[1];
              var val = curr[0];
              var sliced = acc[1];
              var topLeaves = acc[0];
              if (idx < 2 && nodeKind === "Leaf") {
                return [
                        {
                          hd: val,
                          tl: topLeaves
                        },
                        sliced
                      ];
              } else {
                return [
                        topLeaves,
                        {
                          hd: [
                            val,
                            nodeKind
                          ],
                          tl: sliced
                        }
                      ];
              }
            }));
      var sliced = match$1[1];
      var topLeaves = match$1[0];
      if (topLeaves) {
        var restLeaves = topLeaves.tl;
        var topLeaf = topLeaves.hd;
        var avg = (val + topLeaf | 0) / 2 | 0;
        var newMaxAverage = Core__Array.reduce([
              topLeaf,
              avg,
              maxAverage
            ], -2, (function (max, curr) {
                if (max > curr) {
                  return max;
                } else {
                  return curr;
                }
              }));
        if (restLeaves) {
          var nextTopLeaf = restLeaves.hd;
          var avg$1 = ((val + topLeaf | 0) + nextTopLeaf | 0) / 3 | 0;
          var newMaxAverage$1 = Core__Array.reduce([
                topLeaf,
                nextTopLeaf,
                avg$1,
                maxAverage
              ], -2, (function (max, curr) {
                  if (max > curr) {
                    return max;
                  } else {
                    return curr;
                  }
                }));
          _evaluationStack = {
            hd: [
              newMaxAverage$1,
              "Leaf"
            ],
            tl: sliced
          };
          _maxAverage = newMaxAverage$1;
          _rpnStack = rest;
          continue ;
        }
        _evaluationStack = {
          hd: [
            newMaxAverage,
            "Leaf"
          ],
          tl: sliced
        };
        _maxAverage = newMaxAverage;
        _rpnStack = rest;
        continue ;
      }
      var newMaxAverage$2 = val > maxAverage ? val : maxAverage;
      _evaluationStack = {
        hd: [
          newMaxAverage$2,
          "Leaf"
        ],
        tl: sliced
      };
      _maxAverage = newMaxAverage$2;
      _rpnStack = rest;
      continue ;
    };
  } else {
    return -1;
  }
}

var tree1 = TreeNode.make(5, Caml_option.some(TreeNode.make(6, undefined, undefined)), Caml_option.some(TreeNode.make(1, undefined, undefined)));

var r1 = maximumAverageSubtree(tree1);

console.log("r1: ", r1);

export {
  maximumAverageSubtree ,
  tree1 ,
  r1 ,
}
/* tree1 Not a pure module */
