// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Int32 from "rescript/lib/es6/int32.js";
import * as TreeNode from "./TreeNode.res.js";
import * as Core__List from "@rescript/core/src/Core__List.res.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.js";
import * as Core__Option from "@rescript/core/src/Core__Option.res.js";

function findNearestRightNodeInBinaryTree(root, u) {
  var preorderTraverse = function (levelValuesTable, _stack) {
    while(true) {
      var stack = _stack;
      if (!stack) {
        return levelValuesTable;
      }
      var match = stack.hd;
      var node = match[0];
      var val = node.val;
      var rest = stack.tl;
      var level = match[1];
      var left = node.left;
      var right = node.right;
      var values = Core__Option.mapOr(levelValuesTable.get(level), {
            hd: val,
            tl: /* [] */0
          }, (function(val){
          return function (vals) {
            return {
                    hd: val,
                    tl: vals
                  };
          }
          }(val)));
      levelValuesTable.set(level, values);
      if (left !== undefined) {
        if (right !== undefined) {
          _stack = {
            hd: [
              left,
              level + 1 | 0
            ],
            tl: {
              hd: [
                right,
                level + 1 | 0
              ],
              tl: rest
            }
          };
          continue ;
        }
        _stack = {
          hd: [
            left,
            level + 1 | 0
          ],
          tl: rest
        };
        continue ;
      }
      if (right !== undefined) {
        _stack = {
          hd: [
            right,
            level + 1 | 0
          ],
          tl: rest
        };
        continue ;
      }
      _stack = rest;
      continue ;
    };
  };
  if (root !== undefined) {
    return Core__Array.reduce(Array.from(preorderTraverse(new Map(), {
                          hd: [
                            root,
                            0
                          ],
                          tl: /* [] */0
                        }).values()), Int32.min_int, (function (acc, values) {
                  var uIdx = Core__List.reduceWithIndex(values, -1, (function (idxAcc, value, idx) {
                          if (value === u) {
                            return Core__Option.mapOr(Core__List.get(values, idx - 1 | 0), Int32.min_int, (function (v) {
                                          return v;
                                        }));
                          } else {
                            return idxAcc;
                          }
                        }));
                  if (uIdx >= 0) {
                    return uIdx;
                  } else {
                    return acc;
                  }
                }));
  } else {
    return Int32.min_int;
  }
}

var tree1 = TreeNode.make(1, Caml_option.some(TreeNode.make(2, Caml_option.some(undefined), Caml_option.some(TreeNode.make(4, undefined, undefined)))), Caml_option.some(TreeNode.make(3, Caml_option.some(TreeNode.make(5, undefined, undefined)), Caml_option.some(TreeNode.make(6, undefined, undefined)))));

var r1 = findNearestRightNodeInBinaryTree(tree1, 4);

console.log("r1: ", r1);

export {
  findNearestRightNodeInBinaryTree ,
  tree1 ,
  r1 ,
}
/* tree1 Not a pure module */
