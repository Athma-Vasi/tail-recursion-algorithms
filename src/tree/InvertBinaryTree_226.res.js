// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Int32 from "rescript/lib/es6/int32.js";
import * as TreeNode from "./TreeNode.res.js";
import * as Core__List from "@rescript/core/src/Core__List.res.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function invertBinaryTree(root) {
  var postorderTraverse = function (_rpnStack, _workingStack) {
    while(true) {
      var workingStack = _workingStack;
      var rpnStack = _rpnStack;
      if (!workingStack) {
        return rpnStack;
      }
      var top = workingStack.hd;
      var right = top.right;
      var left = top.left;
      var val = top.val;
      var rest = workingStack.tl;
      if (left !== undefined) {
        if (right !== undefined) {
          _workingStack = {
            hd: right,
            tl: {
              hd: left,
              tl: rest
            }
          };
          _rpnStack = {
            hd: [
              val,
              "Branch",
              2
            ],
            tl: rpnStack
          };
          continue ;
        }
        _workingStack = {
          hd: left,
          tl: rest
        };
        _rpnStack = {
          hd: [
            val,
            "Branch",
            1
          ],
          tl: rpnStack
        };
        continue ;
      }
      if (right !== undefined) {
        _workingStack = {
          hd: right,
          tl: rest
        };
        _rpnStack = {
          hd: [
            val,
            "Branch",
            1
          ],
          tl: rpnStack
        };
        continue ;
      }
      _workingStack = rest;
      _rpnStack = {
        hd: [
          val,
          "Leaf",
          0
        ],
        tl: rpnStack
      };
      continue ;
    };
  };
  var $$default = TreeNode.make(Int32.min_int, undefined, undefined);
  if (root !== undefined) {
    var _rpnStack = postorderTraverse(/* [] */0, {
          hd: root,
          tl: /* [] */0
        });
    var _inverted = $$default;
    var _evalStack = /* [] */0;
    while(true) {
      var evalStack = _evalStack;
      var inverted = _inverted;
      var rpnStack = _rpnStack;
      if (!rpnStack) {
        return inverted;
      }
      var rest = rpnStack.tl;
      var match = rpnStack.hd;
      var leavesCount = match[2];
      var val = match[0];
      if (match[1] === "Leaf") {
        _evalStack = {
          hd: [
            TreeNode.make(val, undefined, undefined),
            "Leaf"
          ],
          tl: evalStack
        };
        _rpnStack = rest;
        continue ;
      }
      var match$1 = Core__List.reduceWithIndex(evalStack, [
            /* [] */0,
            /* [] */0
          ], (function(leavesCount){
          return function (acc, curr, idx) {
            var nodeKind = curr[1];
            var node = curr[0];
            var sliced = acc[1];
            var topLeaves = acc[0];
            if (idx < leavesCount && nodeKind === "Leaf") {
              return [
                      {
                        hd: [
                          node,
                          nodeKind
                        ],
                        tl: topLeaves
                      },
                      sliced
                    ];
            } else {
              return [
                      topLeaves,
                      {
                        hd: [
                          node,
                          nodeKind
                        ],
                        tl: sliced
                      }
                    ];
            }
          }
          }(leavesCount)));
      var sliced = match$1[1];
      var topLeaves = match$1[0];
      var newSubtree;
      if (topLeaves) {
        var restSubtrees = topLeaves.tl;
        var leftSubtree = topLeaves.hd[0];
        newSubtree = restSubtrees ? TreeNode.make(val, Caml_option.some(restSubtrees.hd[0]), Caml_option.some(leftSubtree)) : TreeNode.make(val, undefined, Caml_option.some(leftSubtree));
      } else {
        newSubtree = TreeNode.make(val, undefined, undefined);
      }
      if (Core__List.size(rest) === 0) {
        _evalStack = sliced;
        _inverted = newSubtree;
        _rpnStack = rest;
        continue ;
      }
      _evalStack = {
        hd: [
          newSubtree,
          "Leaf"
        ],
        tl: sliced
      };
      _rpnStack = rest;
      continue ;
    };
  } else {
    return $$default;
  }
}

var tree1 = TreeNode.make(4, Caml_option.some(TreeNode.make(2, Caml_option.some(TreeNode.make(1, undefined, undefined)), Caml_option.some(TreeNode.make(3, undefined, undefined)))), Caml_option.some(TreeNode.make(7, Caml_option.some(TreeNode.make(6, undefined, undefined)), Caml_option.some(TreeNode.make(9, undefined, undefined)))));

var r1 = invertBinaryTree(tree1);

console.log("r1: ", r1);

var tree2 = TreeNode.make(2, Caml_option.some(TreeNode.make(1, undefined, undefined)), Caml_option.some(TreeNode.make(3, undefined, undefined)));

var r2 = invertBinaryTree(tree2);

console.log("r2: ", r2);

export {
  invertBinaryTree ,
  tree1 ,
  r1 ,
  tree2 ,
  r2 ,
}
/* tree1 Not a pure module */
