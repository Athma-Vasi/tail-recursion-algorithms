// Generated by ReScript, PLEASE EDIT WITH CARE

import * as TreeNode from "./TreeNode.res.js";
import * as Core__List from "@rescript/core/src/Core__List.res.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function pathSum_II(root, targetSum) {
  var preorderTraverse = function (_paths, _stack) {
    while(true) {
      var stack = _stack;
      var paths = _paths;
      if (!stack) {
        return paths;
      }
      var match = stack.hd;
      var node = match[0];
      var rest = stack.tl;
      var left = node.left;
      var right = node.right;
      var newPath_0 = node.val;
      var newPath_1 = match[1];
      var newPath = {
        hd: newPath_0,
        tl: newPath_1
      };
      if (left !== undefined) {
        if (right !== undefined) {
          _stack = {
            hd: [
              left,
              newPath
            ],
            tl: {
              hd: [
                right,
                newPath
              ],
              tl: rest
            }
          };
          continue ;
        }
        _stack = {
          hd: [
            left,
            newPath
          ],
          tl: rest
        };
        continue ;
      }
      if (right !== undefined) {
        _stack = {
          hd: [
            right,
            newPath
          ],
          tl: rest
        };
        continue ;
      }
      _stack = rest;
      _paths = {
        hd: newPath,
        tl: paths
      };
      continue ;
    };
  };
  if (root !== undefined) {
    return Core__List.toArray(Core__List.reduce(preorderTraverse(/* [] */0, {
                        hd: [
                          root,
                          /* [] */0
                        ],
                        tl: /* [] */0
                      }), /* [] */0, (function (acc, path) {
                      var original = Core__List.reverse(path);
                      var sum = Core__List.reduce(original, 0, (function (total, curr) {
                              return total + curr | 0;
                            }));
                      if (sum === targetSum) {
                        return {
                                hd: Core__List.toArray(original),
                                tl: acc
                              };
                      } else {
                        return acc;
                      }
                    })));
  } else {
    return [];
  }
}

var tree1 = TreeNode.make(5, Caml_option.some(TreeNode.make(4, Caml_option.some(TreeNode.make(11, Caml_option.some(TreeNode.make(7, undefined, undefined)), Caml_option.some(TreeNode.make(2, undefined, undefined)))), undefined)), Caml_option.some(TreeNode.make(8, Caml_option.some(TreeNode.make(13, undefined, undefined)), Caml_option.some(TreeNode.make(4, Caml_option.some(TreeNode.make(5, undefined, undefined)), Caml_option.some(TreeNode.make(1, undefined, undefined)))))));

var r1 = pathSum_II(tree1, 22);

console.log("r1: ", r1);

var tree2 = TreeNode.make(1, Caml_option.some(TreeNode.make(2, undefined, undefined)), Caml_option.some(TreeNode.make(3, undefined, undefined)));

var r2 = pathSum_II(tree2, 5);

console.log("r2: ", r2);

export {
  pathSum_II ,
  tree1 ,
  r1 ,
  tree2 ,
  r2 ,
}
/* tree1 Not a pure module */
