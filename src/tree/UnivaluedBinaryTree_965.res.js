// Generated by ReScript, PLEASE EDIT WITH CARE

import * as TreeNode from "./TreeNode.res.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function univaluedBinaryTree(root) {
  if (root !== undefined) {
    var _isUnivalued = true;
    var rootVal = root.val;
    var _stack = {
      hd: root,
      tl: /* [] */0
    };
    while(true) {
      var stack = _stack;
      var isUnivalued = _isUnivalued;
      if (!isUnivalued) {
        return false;
      }
      if (!stack) {
        return isUnivalued;
      }
      var popped = stack.hd;
      var right = popped.right;
      var left = popped.left;
      var val = popped.val;
      var rest = stack.tl;
      if (left !== undefined) {
        if (right !== undefined) {
          _stack = {
            hd: left,
            tl: {
              hd: right,
              tl: rest
            }
          };
          _isUnivalued = val === rootVal;
          continue ;
        }
        _stack = {
          hd: left,
          tl: rest
        };
        _isUnivalued = val === rootVal;
        continue ;
      }
      if (right !== undefined) {
        _stack = {
          hd: right,
          tl: rest
        };
        _isUnivalued = val === rootVal;
        continue ;
      }
      _stack = rest;
      _isUnivalued = val === rootVal;
      continue ;
    };
  } else {
    return false;
  }
}

var tree = TreeNode.make(1, Caml_option.some(TreeNode.make(1, Caml_option.some(TreeNode.make(1, undefined, undefined)), undefined)), Caml_option.some(TreeNode.make(1, undefined, Caml_option.some(TreeNode.make(1, undefined, undefined)))));

var r1 = univaluedBinaryTree(tree);

console.log("r1: ", r1);

var n5 = TreeNode.make(5, Caml_option.some(TreeNode.make(3, undefined, undefined)), Caml_option.some(TreeNode.make(7, undefined, undefined)));

var n15 = TreeNode.make(15, undefined, Caml_option.some(TreeNode.make(18, undefined, undefined)));

var root1 = TreeNode.make(10, Caml_option.some(n5), Caml_option.some(n15));

var r2 = univaluedBinaryTree(root1);

console.log("r2: ", r2);

export {
  univaluedBinaryTree ,
  tree ,
  r1 ,
  n5 ,
  n15 ,
  root1 ,
  r2 ,
}
/* tree Not a pure module */
