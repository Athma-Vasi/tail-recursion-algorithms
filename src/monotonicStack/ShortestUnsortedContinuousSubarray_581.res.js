// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Int32 from "rescript/lib/es6/int32.js";

function shortestUnsortedContinousSubarray(nums) {
  var length = nums.length;
  var increasingLoop = function (_maximumIndex, _monoIncrStack, _index) {
    while(true) {
      var index = _index;
      var monoIncrStack = _monoIncrStack;
      var maximumIndex = _maximumIndex;
      if (index === length) {
        return maximumIndex;
      }
      var stackLength = monoIncrStack.length;
      var num = nums[index];
      var currentNum = num !== undefined ? num : Int32.min_int;
      if (stackLength < 1) {
        _index = index + 1 | 0;
        _monoIncrStack = monoIncrStack.concat([index]);
        continue ;
      }
      var num$1 = monoIncrStack.at(-1);
      var prevMaximumIndex = num$1 !== undefined ? num$1 : Int32.min_int;
      var num$2 = nums[prevMaximumIndex];
      var prevMaximum = num$2 !== undefined ? num$2 : Int32.min_int;
      if (currentNum < prevMaximum) {
        _monoIncrStack = monoIncrStack.slice(0, stackLength - 1 | 0);
        _maximumIndex = index;
        continue ;
      }
      _index = index + 1 | 0;
      _monoIncrStack = monoIncrStack.concat([index]);
      continue ;
    };
  };
  var decreasingLoop = function (_minimumIndex, _monoDecrStack, _index) {
    while(true) {
      var index = _index;
      var monoDecrStack = _monoDecrStack;
      var minimumIndex = _minimumIndex;
      if (index === 0) {
        return minimumIndex;
      }
      var stackLength = monoDecrStack.length;
      var num = nums[index];
      var currentNum = num !== undefined ? num : Int32.min_int;
      if (stackLength < 1) {
        _index = index - 1 | 0;
        _monoDecrStack = monoDecrStack.concat([index]);
        continue ;
      }
      var num$1 = monoDecrStack.at(-1);
      var prevMinimumIndex = num$1 !== undefined ? num$1 : Int32.min_int;
      var num$2 = nums[prevMinimumIndex];
      var prevMinimum = num$2 !== undefined ? num$2 : Int32.min_int;
      if (currentNum > prevMinimum) {
        _monoDecrStack = monoDecrStack.slice(0, stackLength - 1 | 0);
        _minimumIndex = index;
        continue ;
      }
      _index = index - 1 | 0;
      _monoDecrStack = monoDecrStack.concat([index]);
      continue ;
    };
  };
  var maximumIndex = increasingLoop(-1, [], 0);
  var minimumIndex = decreasingLoop(-1, [], length - 1 | 0);
  if (minimumIndex < 0 || maximumIndex < 0) {
    return 0;
  } else {
    return (maximumIndex - minimumIndex | 0) + 1 | 0;
  }
}

var n1 = [
  2,
  6,
  4,
  8,
  10,
  9,
  15
];

var r1 = shortestUnsortedContinousSubarray(n1);

console.log("r1: ", r1);

var n2 = [
  1,
  2,
  3,
  4
];

var r2 = shortestUnsortedContinousSubarray(n2);

console.log("r2: ", r2);

var n3 = [1];

var r3 = shortestUnsortedContinousSubarray(n3);

console.log("r3: ", r3);

export {
  shortestUnsortedContinousSubarray ,
  n1 ,
  r1 ,
  n2 ,
  r2 ,
  n3 ,
  r3 ,
}
/* r1 Not a pure module */
