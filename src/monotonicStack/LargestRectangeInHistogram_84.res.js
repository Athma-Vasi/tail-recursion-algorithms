// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Int32 from "rescript/lib/es6/int32.js";

function largestRectangeInHistogram(heights) {
  var updateMonoIncrStack = function (_maxArea, _monoIncrStack, indexToPush) {
    while(true) {
      var monoIncrStack = _monoIncrStack;
      var maxArea = _maxArea;
      var stackLength = monoIncrStack.length;
      var num = heights.at(indexToPush);
      var heightToPush = num !== undefined ? num : -1;
      var num$1 = monoIncrStack.at(-1);
      var previousIndex = num$1 !== undefined ? num$1 : Int32.min_int;
      var num$2 = heights.at(previousIndex);
      var previousHeight = num$2 !== undefined ? num$2 : -1;
      if (heightToPush > previousHeight) {
        return [
                maxArea,
                monoIncrStack.concat([indexToPush])
              ];
      }
      var newArea = Math.imul(previousHeight, indexToPush - previousIndex | 0);
      _monoIncrStack = monoIncrStack.slice(0, stackLength - 1 | 0);
      _maxArea = maxArea > newArea ? maxArea : newArea;
      continue ;
    };
  };
  var _maxArea = Int32.min_int;
  var _monoIncrStack = [];
  var _index = 0;
  while(true) {
    var index = _index;
    var monoIncrStack = _monoIncrStack;
    var maxArea = _maxArea;
    if (index === heights.length) {
      if (monoIncrStack.length < 1) {
        return maxArea;
      } else {
        var _maxArea$1 = maxArea;
        var _monoIncrStack$1 = monoIncrStack;
        while(true) {
          var monoIncrStack$1 = _monoIncrStack$1;
          var maxArea$1 = _maxArea$1;
          var stackLength = monoIncrStack$1.length;
          if (stackLength < 1) {
            return maxArea$1;
          }
          var num = monoIncrStack$1.at(0);
          var smallestHeightIdx = num !== undefined ? num : Int32.min_int;
          var num$1 = heights.at(smallestHeightIdx);
          var smallestHeight = num$1 !== undefined ? num$1 : -1;
          var newArea = Math.imul(smallestHeight, stackLength);
          _monoIncrStack$1 = monoIncrStack$1.slice(1, stackLength);
          _maxArea$1 = maxArea$1 > newArea ? maxArea$1 : newArea;
          continue ;
        };
      }
    }
    var match = updateMonoIncrStack(maxArea, monoIncrStack, index);
    _index = index + 1 | 0;
    _monoIncrStack = match[1];
    _maxArea = match[0];
    continue ;
  };
}

var h1 = [
  2,
  1,
  5,
  6,
  2,
  3
];

var r1 = largestRectangeInHistogram(h1);

console.log("r1: ", r1, r1 === 10);

var h2 = [
  2,
  4
];

var r2 = largestRectangeInHistogram(h2);

console.log("r2: ", r2);

export {
  largestRectangeInHistogram ,
  h1 ,
  r1 ,
  h2 ,
  r2 ,
}
/* r1 Not a pure module */
