// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Int32 from "rescript/lib/es6/int32.js";

function maximumDistanceInArrays(nums) {
  var makeMonoIncrStack = function (_monoIncrStack, _tempStack, _index) {
    while(true) {
      var index = _index;
      var tempStack = _tempStack;
      var monoIncrStack = _monoIncrStack;
      if (index === nums.length) {
        return monoIncrStack.concat(tempStack);
      }
      var a = nums.at(index);
      var arr = a !== undefined ? a : [];
      var innerLoop = (function(arr){
      return function innerLoop(_monoStack, _tStack, _innerIdx) {
        while(true) {
          var innerIdx = _innerIdx;
          var tStack = _tStack;
          var monoStack = _monoStack;
          var n = arr.at(innerIdx);
          var num = n !== undefined ? n : Int32.min_int + 1 | 0;
          var n$1 = monoStack.at(-1);
          var prevNum = n$1 !== undefined ? n$1 : Int32.min_int;
          if (innerIdx === arr.length) {
            return [
                    monoStack,
                    tStack
                  ];
          }
          if (num === (Int32.min_int + 1 | 0)) {
            return [
                    [],
                    []
                  ];
          }
          if (prevNum < num) {
            var tStackLength = tStack.length;
            if (tStackLength === 0) {
              _innerIdx = innerIdx + 1 | 0;
              _monoStack = monoStack.concat([num]);
              continue ;
            }
            var n$2 = tStack.at(0);
            var topTempNum = n$2 !== undefined ? n$2 : Int32.min_int;
            if (topTempNum > num) {
              _innerIdx = innerIdx + 1 | 0;
              _monoStack = monoStack.concat([num]);
              continue ;
            }
            _innerIdx = innerIdx + 1 | 0;
            _tStack = tStack.slice(1, tStackLength);
            _monoStack = monoStack.concat([topTempNum]);
            continue ;
          }
          _tStack = [prevNum].concat(tStack);
          _monoStack = monoStack.slice(0, monoStack.length - 1 | 0);
          continue ;
        };
      }
      }(arr));
      var match = innerLoop(monoIncrStack, tempStack, 0);
      _index = index + 1 | 0;
      _tempStack = match[1];
      _monoIncrStack = match[0];
      continue ;
    };
  };
  var monoIncrStack = makeMonoIncrStack([], [], 0);
  var n = monoIncrStack.at(0);
  var smallest = n !== undefined ? n : Int32.min_int;
  var n$1 = monoIncrStack.at(-1);
  var largest = n$1 !== undefined ? n$1 : Int32.min_int;
  return largest - smallest | 0;
}

var a1 = [
  [
    1,
    2,
    3
  ],
  [
    4,
    5
  ],
  [
    1,
    2,
    3
  ]
];

var r1 = maximumDistanceInArrays(a1);

console.log("r1: ", r1);

var a2 = [
  [
    1,
    2,
    3
  ],
  [
    7,
    8
  ],
  [
    4,
    5,
    6
  ]
];

var r2 = maximumDistanceInArrays(a2);

console.log("r2: ", r2);

var a3 = [
  [1],
  [1]
];

var r3 = maximumDistanceInArrays(a3);

console.log("r3: ", r3);

export {
  maximumDistanceInArrays ,
  a1 ,
  r1 ,
  a2 ,
  r2 ,
  a3 ,
  r3 ,
}
/* r1 Not a pure module */
