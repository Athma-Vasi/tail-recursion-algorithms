// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Int32 from "rescript/lib/es6/int32.js";
import * as Core__Int from "@rescript/core/src/Core__Int.res.js";

function removeKDigits(digits, k) {
  var length = digits.length;
  var updateMonoIncrStack = function (_monoIncrStack, currentNum, _counter) {
    while(true) {
      var counter = _counter;
      var monoIncrStack = _monoIncrStack;
      var stackLength = monoIncrStack.length;
      var num = monoIncrStack.at(-1);
      var prevMaximum = num !== undefined ? num : Int32.min_int + 1 | 0;
      if (stackLength < 1 || currentNum >= prevMaximum || counter === k) {
        return [
                monoIncrStack.concat([currentNum]),
                counter
              ];
      }
      _counter = counter + 1 | 0;
      _monoIncrStack = monoIncrStack.slice(0, stackLength - 1 | 0);
      continue ;
    };
  };
  var loop = function (_monoIncrStack, _counter, _index) {
    while(true) {
      var index = _index;
      var counter = _counter;
      var monoIncrStack = _monoIncrStack;
      var digit = digits[index];
      var currentNum;
      if (digit !== undefined) {
        var num = Core__Int.fromString(digit, undefined);
        currentNum = num !== undefined ? num : Int32.min_int;
      } else {
        currentNum = Int32.min_int;
      }
      if (index === length) {
        return monoIncrStack;
      }
      if (counter > k) {
        _index = index + 1 | 0;
        _monoIncrStack = monoIncrStack.concat([currentNum]);
        continue ;
      }
      var match = updateMonoIncrStack(monoIncrStack, currentNum, counter);
      _index = index + 1 | 0;
      _counter = match[1];
      _monoIncrStack = match[0];
      continue ;
    };
  };
  var str = loop([], 0, 0).map(function (num) {
          return num.toString();
        }).join("");
  var trimLeadingZeroes = function (_stop, _str) {
    while(true) {
      var str = _str;
      var stop = _stop;
      var strLength = str.length;
      if (stop) {
        return str;
      }
      var $$char = str[0];
      var firstChar = $$char !== undefined ? $$char : "";
      if (firstChar === "0") {
        _str = str.slice(1, strLength);
        _stop = false;
        continue ;
      }
      _stop = true;
      continue ;
    };
  };
  var trimmedStr = trimLeadingZeroes(false, str);
  if (trimmedStr.length < 1) {
    return "0";
  } else {
    return trimmedStr;
  }
}

var d1 = "1432219";

var r1 = removeKDigits(d1, 3);

console.log("r1", r1);

var d2 = "10200";

var r2 = removeKDigits(d2, 1);

console.log("r2", r2);

var d3 = "10";

var r3 = removeKDigits(d3, 2);

console.log("r3", r3);

var k1 = 3;

var k2 = 1;

var k3 = 2;

export {
  removeKDigits ,
  d1 ,
  k1 ,
  r1 ,
  d2 ,
  k2 ,
  r2 ,
  d3 ,
  k3 ,
  r3 ,
}
/* r1 Not a pure module */
