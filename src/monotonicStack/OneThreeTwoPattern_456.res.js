// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Int32 from "rescript/lib/es6/int32.js";

function oneThreeTwoPattern(nums) {
  var length = nums.length;
  var updateSetAndStack = function (existsSet, _monoIncrStack, numToPush) {
    while(true) {
      var monoIncrStack = _monoIncrStack;
      var stackLength = monoIncrStack.length;
      var num = monoIncrStack.at(-1);
      var prevMaximum = num !== undefined ? num : Int32.min_int;
      if (stackLength < 1 || numToPush > prevMaximum) {
        return [
                existsSet,
                monoIncrStack.concat([numToPush])
              ];
      }
      if (stackLength > 1) {
        existsSet.add(1);
        _monoIncrStack = monoIncrStack.slice(0, stackLength - 1 | 0);
        continue ;
      }
      _monoIncrStack = monoIncrStack.slice(0, stackLength - 1 | 0);
      continue ;
    };
  };
  var _existsSet = new Set();
  var _monoIncrStack = [];
  var _index = 0;
  while(true) {
    var index = _index;
    var monoIncrStack = _monoIncrStack;
    var existsSet = _existsSet;
    if (index === length) {
      return existsSet.size > 0;
    }
    var num = nums[index];
    var numToPush = num !== undefined ? num : Int32.min_int;
    var match = updateSetAndStack(existsSet, monoIncrStack, numToPush);
    _index = index + 1 | 0;
    _monoIncrStack = match[1];
    _existsSet = match[0];
    continue ;
  };
}

var n1 = [
  1,
  2,
  3,
  4
];

var r1 = oneThreeTwoPattern(n1);

console.log("r1: ", r1);

var n2 = [
  3,
  1,
  4,
  2
];

var r2 = oneThreeTwoPattern(n2);

console.log("r2: ", r2);

var n3 = [
  -1,
  3,
  2,
  0
];

var r3 = oneThreeTwoPattern(n3);

console.log("r3: ", r3);

export {
  oneThreeTwoPattern ,
  n1 ,
  r1 ,
  n2 ,
  r2 ,
  n3 ,
  r3 ,
}
/* r1 Not a pure module */
