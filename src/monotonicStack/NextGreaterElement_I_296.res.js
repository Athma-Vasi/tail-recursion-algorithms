// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Int32 from "rescript/lib/es6/int32.js";

function nextGreaterElementI(nums1, nums2) {
  var length1 = nums1.length;
  var length2 = nums2.length;
  var updateStackAndTable = function (_monoIncrStack, nextGreaterTable, _nums2Index) {
    while(true) {
      var nums2Index = _nums2Index;
      var monoIncrStack = _monoIncrStack;
      var stackLength = monoIncrStack.length;
      var num2 = nums2[nums2Index];
      var num2$1 = num2 !== undefined ? num2 : Int32.min_int;
      var num = monoIncrStack.at(-1);
      var prevMaximum = num !== undefined ? num : Int32.min_int;
      if (nums2Index === length2) {
        return nextGreaterTable;
      }
      if (stackLength < 1) {
        _nums2Index = nums2Index + 1 | 0;
        _monoIncrStack = [num2$1];
        continue ;
      }
      if (prevMaximum > num2$1) {
        _nums2Index = nums2Index + 1 | 0;
        continue ;
      }
      var sliced = monoIncrStack.slice(0, stackLength - 1 | 0);
      var updatedStack = sliced.concat([num2$1]);
      nextGreaterTable.set(prevMaximum, num2$1);
      _nums2Index = nums2Index + 1 | 0;
      _monoIncrStack = updatedStack;
      continue ;
    };
  };
  var nextGreaterTable = updateStackAndTable([], new Map(), 0);
  var _nextGreaterElements = [];
  var _nums1Index = 0;
  while(true) {
    var nums1Index = _nums1Index;
    var nextGreaterElements = _nextGreaterElements;
    if (nums1Index === length1) {
      return nextGreaterElements;
    }
    var num1 = nums1[nums1Index];
    var num1$1 = num1 !== undefined ? num1 : Int32.min_int;
    var num = nextGreaterTable.get(num1$1);
    var nextGreaterElement = num !== undefined ? num : -1;
    _nums1Index = nums1Index + 1 | 0;
    _nextGreaterElements = nextGreaterElements.concat([nextGreaterElement]);
    continue ;
  };
}

var n1 = [
  4,
  1,
  2
];

var n11 = [
  1,
  3,
  4,
  2
];

var r1 = nextGreaterElementI(n1, n11);

console.log(r1);

var n2 = [
  2,
  4
];

var n22 = [
  1,
  2,
  3,
  4
];

var r2 = nextGreaterElementI(n2, n22);

console.log(r2);

export {
  nextGreaterElementI ,
  n1 ,
  n11 ,
  r1 ,
  n2 ,
  n22 ,
  r2 ,
}
/* r1 Not a pure module */
