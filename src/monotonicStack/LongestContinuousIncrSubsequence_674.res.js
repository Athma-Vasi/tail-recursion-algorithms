// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Int32 from "rescript/lib/es6/int32.js";

function longestContinuousIncrSubsequence(nums) {
  var loop = function (_longest, _monoIncrStack, _index) {
    while(true) {
      var index = _index;
      var monoIncrStack = _monoIncrStack;
      var longest = _longest;
      if (index === nums.length) {
        return longest;
      }
      var n = nums.at(index);
      var curr = n !== undefined ? n : Int32.min_int;
      var n$1 = monoIncrStack.at(-1);
      var prev = n$1 !== undefined ? n$1 : Int32.max_int;
      if (curr < prev) {
        var length = monoIncrStack.length;
        _index = index + 1 | 0;
        _monoIncrStack = index === 0 ? [curr] : [];
        _longest = longest > length ? longest : length;
        continue ;
      }
      _index = index + 1 | 0;
      _monoIncrStack = monoIncrStack.concat([curr]);
      continue ;
    };
  };
  var longest = loop(Int32.min_int, [], 0);
  if (longest === 0) {
    return 1;
  } else {
    return longest;
  }
}

var n1 = [
  1,
  3,
  5,
  4,
  7
];

var r1 = longestContinuousIncrSubsequence(n1);

console.log("r1: ", r1);

var n2 = [
  2,
  2,
  2,
  2,
  2
];

var r2 = longestContinuousIncrSubsequence(n2);

console.log("r2: ", r2);

export {
  longestContinuousIncrSubsequence ,
  n1 ,
  r1 ,
  n2 ,
  r2 ,
}
/* r1 Not a pure module */
