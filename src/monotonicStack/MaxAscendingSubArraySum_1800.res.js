// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Int32 from "rescript/lib/es6/int32.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.js";

function maxAscendingSubArraySum(nums) {
  var _maxSum = Int32.min_int;
  var _monoIncrStack = [];
  var _index = 0;
  while(true) {
    var index = _index;
    var monoIncrStack = _monoIncrStack;
    var maxSum = _maxSum;
    if (index === nums.length) {
      var newSum = Core__Array.reduce(monoIncrStack, 0, (function (acc, curr) {
              return acc + curr | 0;
            }));
      if (newSum > maxSum) {
        return newSum;
      } else {
        return maxSum;
      }
    }
    var num = nums.at(index);
    var currentNum = num !== undefined ? num : Int32.min_int;
    var num$1 = monoIncrStack.at(-1);
    var previousNum = num$1 !== undefined ? num$1 : Int32.min_int + 1 | 0;
    if (currentNum < previousNum) {
      var newSum$1 = Core__Array.reduce(monoIncrStack, 0, (function (acc, curr) {
              return acc + curr | 0;
            }));
      _index = index + 1 | 0;
      _monoIncrStack = [currentNum];
      _maxSum = newSum$1 > maxSum ? newSum$1 : maxSum;
      continue ;
    }
    _index = index + 1 | 0;
    _monoIncrStack = monoIncrStack.concat([currentNum]);
    continue ;
  };
}

var n1 = [
  10,
  20,
  30,
  5,
  10,
  50
];

var r1 = maxAscendingSubArraySum(n1);

console.log("r1: ", r1);

var n2 = [
  10,
  20,
  30,
  40,
  50
];

var r2 = maxAscendingSubArraySum(n2);

console.log("r2: ", r2);

var n3 = [
  12,
  17,
  15,
  13,
  10,
  11,
  12
];

var r3 = maxAscendingSubArraySum(n3);

console.log("r3: ", r3);

export {
  maxAscendingSubArraySum ,
  n1 ,
  r1 ,
  n2 ,
  r2 ,
  n3 ,
  r3 ,
}
/* r1 Not a pure module */
