// Generated by ReScript, PLEASE EDIT WITH CARE


function dota2Senate(senate) {
  var makeQueues = function (_dires, _radiants, _index) {
    while(true) {
      var index = _index;
      var radiants = _radiants;
      var dires = _dires;
      if (index === senate.length) {
        return [
                dires,
                radiants
              ];
      }
      var senator = senate.charAt(index);
      if (senator === "D") {
        _index = index + 1 | 0;
        _dires = dires.concat([index]);
        continue ;
      }
      _index = index + 1 | 0;
      _radiants = radiants.concat([index]);
      continue ;
    };
  };
  var match = makeQueues([], [], 0);
  var _dires = match[0];
  var _radiants = match[1];
  var _roundPosition = senate.length;
  while(true) {
    var roundPosition = _roundPosition;
    var radiants = _radiants;
    var dires = _dires;
    var diresRemaining = dires.length;
    var radiantsRemaining = radiants.length;
    if (diresRemaining === 0) {
      return "Radiants";
    }
    if (radiantsRemaining === 0) {
      return "Dires";
    }
    var n = dires.at(0);
    var direPosition = n !== undefined ? n : -1;
    var n$1 = radiants.at(0);
    var radiantPosition = n$1 !== undefined ? n$1 : -1;
    if (direPosition < 0 || radiantPosition < 0) {
      return "Cato";
    }
    if (direPosition < radiantPosition) {
      _roundPosition = roundPosition + 1 | 0;
      _radiants = radiants.slice(1, radiantsRemaining);
      _dires = dires.slice(1, diresRemaining).concat([roundPosition]);
      continue ;
    }
    _roundPosition = roundPosition + 1 | 0;
    _radiants = radiants.slice(1, radiantsRemaining).concat([roundPosition]);
    _dires = dires.slice(1, diresRemaining);
    continue ;
  };
}

var s1 = "RD";

var r1 = dota2Senate(s1);

console.log("r1: ", r1);

var s2 = "RDD";

var r2 = dota2Senate(s2);

console.log("r2: ", r2);

export {
  dota2Senate ,
  s1 ,
  r1 ,
  s2 ,
  r2 ,
}
/* r1 Not a pure module */
