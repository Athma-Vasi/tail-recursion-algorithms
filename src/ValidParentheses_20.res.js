// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.js";

function validParentheses(str) {
  var pairTable = {
    ")": "(",
    "}": "{",
    "]": "["
  };
  var openingParens = Core__Array.reduceRight([
        "(",
        "{",
        "["
      ], new Set(), (function (setAcc, currStr) {
          setAcc.add(currStr);
          return setAcc;
        }));
  if (str.length > 1) {
    var _stack = [];
    var isValid = true;
    var _newStr = str;
    while(true) {
      var newStr = _newStr;
      var stack = _stack;
      var strLength = newStr.length;
      var firstChar = newStr.slice(0, 1);
      var restChars = newStr.slice(1, strLength);
      if (openingParens.has(firstChar)) {
        _newStr = restChars;
        _stack = stack.concat([firstChar]);
        continue ;
      }
      var $$char = pairTable[firstChar];
      var correctOpeningParens = $$char !== undefined ? Caml_option.valFromOption($$char) : "";
      var stackLength = stack.length;
      var $$char$1 = stack[stackLength - 1 | 0];
      var popped = $$char$1 !== undefined ? $$char$1 : "";
      var sliced = stack.slice(0, stackLength - 1 | 0);
      if (correctOpeningParens === "" || popped === "") {
        return isValid;
      }
      if (correctOpeningParens !== popped) {
        return false;
      }
      _newStr = restChars;
      _stack = sliced;
      continue ;
    };
  } else {
    return false;
  }
}

var s1 = "()";

var r1 = validParentheses(s1);

console.log(s1, r1);

var s2 = "()[]{}";

var r2 = validParentheses(s2);

console.log(s2, r2);

var s3 = "(]";

var r3 = validParentheses(s3);

console.log(s3, r3);

var s4 = "([{}])";

var r4 = validParentheses(s4);

console.log(s4, r4);

var s5 = "((({})))";

var r5 = validParentheses(s5);

console.log(s5, r5);

var s6 = "({[()]})";

var r6 = validParentheses(s6);

console.log(s6, r6);

var s4$1 = "([{}])";

var r4$1 = validParentheses(s4$1);

console.log(s4$1, r4$1);

var s5$1 = "((({})))";

var r5$1 = validParentheses(s5$1);

console.log(s5$1, r5$1);

var s6$1 = ")";

var r6$1 = validParentheses(s6$1);

console.log(s6$1, r6$1);

export {
  validParentheses ,
  s1 ,
  r1 ,
  s2 ,
  r2 ,
  s3 ,
  r3 ,
  s4$1 as s4,
  r4$1 as r4,
  s5$1 as s5,
  r5$1 as r5,
  s6$1 as s6,
  r6$1 as r6,
}
/* r1 Not a pure module */
