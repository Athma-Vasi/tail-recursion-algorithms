// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core__Option from "@rescript/core/src/Core__Option.res.js";

function shortestDistanceToTargetStringInACircularArray(words, target, startIndex) {
  var length = words.length;
  var circularTraverse = function (_shortestDistance, _leftIndex, _rightIndex) {
    while(true) {
      var rightIndex = _rightIndex;
      var leftIndex = _leftIndex;
      var shortestDistance = _shortestDistance;
      if (leftIndex === startIndex || rightIndex === startIndex) {
        return shortestDistance;
      }
      var leftDistance = leftIndex === (length - 1 | 0) ? (startIndex - leftIndex | 0) + 1 | 0 : leftIndex - startIndex | 0;
      var absLeftDistance = leftDistance < 0 ? Math.imul(leftDistance, -1) : leftDistance;
      var rightDistance = rightIndex === 0 ? (rightIndex + 1 | 0) + startIndex | 0 : rightIndex - startIndex | 0;
      var absRightDistance = rightDistance < 0 ? Math.imul(rightDistance, -1) : rightDistance;
      var leftWord = Core__Option.mapOr(words.at(leftIndex), "", (function (w) {
              return w;
            }));
      var rightWord = Core__Option.mapOr(words.at(rightIndex), "", (function (w) {
              return w;
            }));
      var newLeftIndex = (leftIndex - 1 | 0) < 0 ? length - 1 | 0 : leftIndex - 1 | 0;
      var newRightIndex = (rightIndex + 1 | 0) === length ? 0 : rightIndex + 1 | 0;
      var match = leftWord === target;
      var match$1 = rightWord === target;
      if (match) {
        if (match$1) {
          _rightIndex = newRightIndex;
          _leftIndex = newLeftIndex;
          _shortestDistance = absLeftDistance < shortestDistance ? absLeftDistance : (
              absRightDistance < shortestDistance ? absRightDistance : shortestDistance
            );
          continue ;
        }
        _rightIndex = newRightIndex;
        _leftIndex = newLeftIndex;
        _shortestDistance = absLeftDistance < shortestDistance ? absLeftDistance : shortestDistance;
        continue ;
      }
      if (match$1) {
        _rightIndex = newRightIndex;
        _leftIndex = newLeftIndex;
        _shortestDistance = absRightDistance < shortestDistance ? absRightDistance : shortestDistance;
        continue ;
      }
      _rightIndex = newRightIndex;
      _leftIndex = newLeftIndex;
      continue ;
    };
  };
  var shortestDistance = circularTraverse(length + 1 | 0, (startIndex - 1 | 0) < 0 ? length - 1 | 0 : startIndex - 1 | 0, (startIndex + 1 | 0) === length ? 0 : startIndex + 1 | 0);
  if (shortestDistance === (length + 1 | 0)) {
    return -1;
  } else {
    return shortestDistance;
  }
}

var w1 = [
  "hello",
  "i",
  "am",
  "leetcode",
  "hello"
];

var t1 = "hello";

var r1 = shortestDistanceToTargetStringInACircularArray(w1, t1, 1);

console.log("r1: hello ", r1);

var w2 = [
  "a",
  "b",
  "leetcode"
];

var t2 = "leetcode";

var r2 = shortestDistanceToTargetStringInACircularArray(w2, t2, 0);

console.log("r2: leetcode ", r2);

var w3 = [
  "i",
  "eat",
  "leetcode"
];

var t3 = "ate";

var r3 = shortestDistanceToTargetStringInACircularArray(w3, t3, 0);

console.log("r3: ate ", r3);

var s1 = 1;

var s2 = 0;

var s3 = 0;

export {
  shortestDistanceToTargetStringInACircularArray ,
  w1 ,
  t1 ,
  s1 ,
  r1 ,
  w2 ,
  t2 ,
  s2 ,
  r2 ,
  w3 ,
  t3 ,
  s3 ,
  r3 ,
}
/* r1 Not a pure module */
