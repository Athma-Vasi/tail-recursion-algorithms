// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml from "rescript/lib/es6/caml.js";
import * as Int32 from "rescript/lib/es6/int32.js";
import * as Core__Option from "@rescript/core/src/Core__Option.res.js";

function largestPositiveIntegerThatExistsWithItsNegative(nums) {
  var sorted = nums.toSorted(Caml.int_compare);
  var findLargest = function (_largest, _leftIndex, _rightIndex) {
    while(true) {
      var rightIndex = _rightIndex;
      var leftIndex = _leftIndex;
      var largest = _largest;
      if (largest !== Int32.min_int || leftIndex >= rightIndex) {
        return largest;
      }
      var leftNum = Core__Option.mapOr(sorted.at(leftIndex), Int32.min_int, (function (n) {
              return n;
            }));
      var rightNum = Core__Option.mapOr(sorted.at(rightIndex), Int32.max_int, (function (n) {
              return n;
            }));
      if ((leftNum + rightNum | 0) === 0) {
        _rightIndex = rightIndex - 1 | 0;
        _leftIndex = leftIndex + 1 | 0;
        _largest = rightNum;
        continue ;
      }
      if ((leftNum + rightNum | 0) < 0) {
        _leftIndex = leftIndex + 1 | 0;
        continue ;
      }
      _rightIndex = rightIndex - 1 | 0;
      continue ;
    };
  };
  var largest = findLargest(Int32.min_int, 0, nums.length - 1 | 0);
  if (largest === Int32.min_int) {
    return -1;
  } else {
    return largest;
  }
}

var n1 = [
  -1,
  2,
  -3,
  3
];

var r1 = largestPositiveIntegerThatExistsWithItsNegative(n1);

console.log("r1: ", r1);

var n2 = [
  -1,
  10,
  6,
  7,
  -7,
  1
];

var r2 = largestPositiveIntegerThatExistsWithItsNegative(n2);

console.log("r2: ", r2);

var n3 = [
  -10,
  8,
  6,
  7,
  -2,
  -3
];

var r3 = largestPositiveIntegerThatExistsWithItsNegative(n3);

console.log("r3: ", r3);

export {
  largestPositiveIntegerThatExistsWithItsNegative ,
  n1 ,
  r1 ,
  n2 ,
  r2 ,
  n3 ,
  r3 ,
}
/* r1 Not a pure module */
