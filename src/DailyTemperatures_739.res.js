// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Int32 from "rescript/lib/es6/int32.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.js";

function dailyTemperatures(temps) {
  var length = temps.length;
  var accumulator = Core__Array.make(temps.length, 0);
  var _accumulator = accumulator;
  var _currentDay = 0;
  var _stack = [];
  while(true) {
    var stack = _stack;
    var currentDay = _currentDay;
    var accumulator$1 = _accumulator;
    var num = temps[currentDay];
    var currentTemp = num !== undefined ? num : Int32.min_int;
    var stackLength = stack.length;
    if (currentDay === (length - 1 | 0)) {
      return accumulator$1;
    }
    if (stackLength === 0) {
      var newStack = stack.concat([currentDay]);
      _stack = newStack;
      _currentDay = currentDay + 1 | 0;
      continue ;
    }
    var num$1 = stack[stackLength - 1 | 0];
    var prevDay = num$1 !== undefined ? num$1 : Int32.min_int;
    var num$2 = temps[prevDay];
    var previousTemp = num$2 !== undefined ? num$2 : Int32.min_int;
    if (currentTemp > previousTemp) {
      var stackLoop = (function(currentDay,stackLength){
      return function stackLoop(_accumulator, _stack) {
        while(true) {
          var stack = _stack;
          var accumulator = _accumulator;
          var stackLen = stack.length;
          var num = stack[stackLen - 1 | 0];
          var prevDay = num !== undefined ? num : Int32.min_int;
          var sliced = stack.slice(0, stackLength - 1 | 0).concat([currentDay]);
          var daysToWait = currentDay - prevDay | 0;
          var newAcc = accumulator.map((function(daysToWait){
              return function (num, idx) {
                if (idx === (currentDay - 1 | 0)) {
                  return daysToWait;
                } else {
                  return num;
                }
              }
              }(daysToWait)));
          if (stackLen === 0 || daysToWait < 0) {
            return [
                    newAcc,
                    sliced
                  ];
          }
          _stack = sliced;
          _accumulator = newAcc;
          continue ;
        };
      }
      }(currentDay,stackLength));
      var tuple = stackLoop(accumulator$1, stack);
      var arr = tuple[0];
      var newAcc = arr !== undefined ? arr : [];
      var arr$1 = tuple[1];
      var newStack$1 = arr$1 !== undefined ? arr$1 : [];
      _stack = newStack$1;
      _currentDay = currentDay + 1 | 0;
      _accumulator = newAcc;
      continue ;
    }
    var newStack$2 = stack.concat([currentDay]);
    _stack = newStack$2;
    _currentDay = currentDay + 1 | 0;
    continue ;
  };
}

var t1 = [
  73,
  74,
  75,
  71,
  69,
  72,
  76,
  73
];

var r1 = dailyTemperatures(t1);

console.log("r1", r1);

var t2 = [
  30,
  40,
  50,
  60
];

var r2 = dailyTemperatures(t2);

console.log("r2", r2);

var t3 = [
  30,
  60,
  90
];

var r3 = dailyTemperatures(t3);

console.log("r3", r3);

export {
  dailyTemperatures ,
  t1 ,
  r1 ,
  t2 ,
  r2 ,
  t3 ,
  r3 ,
}
/* r1 Not a pure module */
