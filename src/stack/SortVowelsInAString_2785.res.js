// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml from "rescript/lib/es6/caml.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.js";

function sortVowelsInAString(s) {
  var match = Core__Array.reduce("aeiou".split(""), [
        new Set(),
        new Set()
      ], (function (acc, $$char) {
          var lower = acc[1];
          var upper = acc[0];
          upper.add($$char.toUpperCase());
          lower.add($$char);
          return [
                  upper,
                  lower
                ];
        }));
  var lowerVowels = match[1];
  var upperVowels = match[0];
  var _vowelsStack = String();
  var _consonantsStack = String();
  var _index = 0;
  while(true) {
    var index = _index;
    var consonantsStack = _consonantsStack;
    var vowelsStack = _vowelsStack;
    if (index === s.length) {
      var vowelsStack$1 = Core__Array.reduce(vowelsStack.split("").toSorted(Caml.string_compare), String(), (function (acc, $$char) {
              return acc.concat($$char);
            }));
      var _merged = String();
      var _slicedVowels = vowelsStack$1;
      var _index$1 = 0;
      while(true) {
        var index$1 = _index$1;
        var slicedVowels = _slicedVowels;
        var merged = _merged;
        if (index$1 === consonantsStack.length) {
          return merged;
        }
        var $$char = consonantsStack.charAt(index$1);
        if ($$char === "&") {
          _index$1 = index$1 + 1 | 0;
          _slicedVowels = slicedVowels.slice(1);
          _merged = merged.concat(slicedVowels.charAt(0));
          continue ;
        }
        _index$1 = index$1 + 1 | 0;
        _merged = merged.concat($$char);
        continue ;
      };
    }
    var $$char$1 = s.charAt(index);
    var isVowel = upperVowels.has($$char$1) || lowerVowels.has($$char$1);
    if (isVowel) {
      _index = index + 1 | 0;
      _consonantsStack = consonantsStack.concat("&");
      _vowelsStack = vowelsStack.concat($$char$1);
      continue ;
    }
    _index = index + 1 | 0;
    _consonantsStack = consonantsStack.concat($$char$1);
    continue ;
  };
}

var s1 = "lEetcOde";

var r1 = sortVowelsInAString(s1);

console.log("r1: ", r1);

var s2 = "lYmpH";

var r2 = sortVowelsInAString(s2);

console.log("r2: ", r2);

export {
  sortVowelsInAString ,
  s1 ,
  r1 ,
  s2 ,
  r2 ,
}
/* r1 Not a pure module */
