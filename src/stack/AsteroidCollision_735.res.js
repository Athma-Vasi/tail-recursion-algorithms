// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Int32 from "rescript/lib/es6/int32.js";

function asteroidCollision(asteroids) {
  var updateStack = function (_stack, asteroid) {
    while(true) {
      var stack = _stack;
      var ast = stack.at(-1);
      var prevAsteroid = ast !== undefined ? ast : Int32.min_int;
      var stackLength = stack.length;
      var areAsteroidsSameDirection = prevAsteroid < 1 && asteroid < 1 || prevAsteroid > 1 && asteroid > 1;
      if (areAsteroidsSameDirection || stackLength === 0) {
        return stack.concat([asteroid]);
      }
      var absPrevAsteroid = prevAsteroid < 1 ? Math.imul(prevAsteroid, -1) : prevAsteroid;
      var absAsteroid = asteroid < 1 ? Math.imul(asteroid, -1) : asteroid;
      if (absPrevAsteroid > absAsteroid) {
        return stack;
      }
      if (absPrevAsteroid === absAsteroid) {
        return stack.slice(0, stackLength - 1 | 0);
      }
      _stack = stack.slice(0, stackLength - 1 | 0);
      continue ;
    };
  };
  var _stack = [];
  var _index = 0;
  while(true) {
    var index = _index;
    var stack = _stack;
    if (index === asteroids.length) {
      return stack;
    }
    var ast = asteroids.at(index);
    var asteroid = ast !== undefined ? ast : Int32.min_int;
    _index = index + 1 | 0;
    _stack = updateStack(stack, asteroid);
    continue ;
  };
}

var a1 = [
  5,
  10,
  -5
];

var r1 = asteroidCollision(a1);

console.log("r1: ", r1);

var a2 = [
  8,
  -8
];

var r2 = asteroidCollision(a2);

console.log("r2: ", r2);

var a3 = [
  10,
  2,
  -5
];

var r3 = asteroidCollision(a3);

console.log("r3: ", r3);

export {
  asteroidCollision ,
  a1 ,
  r1 ,
  a2 ,
  r2 ,
  a3 ,
  r3 ,
}
/* r1 Not a pure module */
