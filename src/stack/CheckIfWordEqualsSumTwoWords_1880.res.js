// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Int32 from "rescript/lib/es6/int32.js";
import * as Core__Int from "@rescript/core/src/Core__Int.res.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function checkIfWordEqualsSumTwoWords(firstWord, secondWord, targetWord) {
  var numericalValueTable = {
    a: "0",
    b: "1",
    c: "2",
    d: "3",
    e: "4",
    f: "5",
    g: "6",
    h: "7",
    i: "8",
    j: "9"
  };
  var calculateNumericalValue = function (_charStack, _index, word) {
    while(true) {
      var index = _index;
      var charStack = _charStack;
      if (index === word.length) {
        return charStack;
      }
      var $$char = word.charAt(index);
      var value = numericalValueTable[$$char];
      var numericalValue = value !== undefined ? Caml_option.valFromOption(value) : "";
      _index = index + 1 | 0;
      _charStack = charStack.concat(numericalValue);
      continue ;
    };
  };
  var num = Core__Int.fromString(calculateNumericalValue("", 0, firstWord), undefined);
  var numericalValue1 = num !== undefined ? num : Int32.min_int;
  var num$1 = Core__Int.fromString(calculateNumericalValue("", 0, secondWord), undefined);
  var numericalValue2 = num$1 !== undefined ? num$1 : Int32.max_int;
  var sum = numericalValue1 + numericalValue2 | 0;
  var num$2 = Core__Int.fromString(calculateNumericalValue("", 0, targetWord), undefined);
  var numericalValueTarget = num$2 !== undefined ? num$2 : Int32.min_int;
  return sum === numericalValueTarget;
}

var w1 = "acb";

var w11 = "cba";

var w111 = "cdb";

var r1 = checkIfWordEqualsSumTwoWords(w1, w11, w111);

console.log("r1: ", r1);

var w2 = "aaa";

var w22 = "a";

var w222 = "aab";

var r2 = checkIfWordEqualsSumTwoWords(w2, w22, w222);

console.log("r2: ", r2);

var w3 = "aaa";

var w33 = "a";

var w333 = "aaaa";

var r3 = checkIfWordEqualsSumTwoWords(w3, w33, w333);

console.log("r3: ", r3);

export {
  checkIfWordEqualsSumTwoWords ,
  w1 ,
  w11 ,
  w111 ,
  r1 ,
  w2 ,
  w22 ,
  w222 ,
  r2 ,
  w3 ,
  w33 ,
  w333 ,
  r3 ,
}
/* r1 Not a pure module */
