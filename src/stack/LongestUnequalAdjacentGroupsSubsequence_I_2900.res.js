// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core__Array from "@rescript/core/src/Core__Array.res.js";

function longestUnequalAdjacentGroupsSubsequence_I(words, groups) {
  var findAlternatingSubsequences = function (_indicesAnswer, _indicesSet, _stack, _currIndex) {
    while(true) {
      var currIndex = _currIndex;
      var stack = _stack;
      var indicesSet = _indicesSet;
      var indicesAnswer = _indicesAnswer;
      if (currIndex >= groups.length) {
        if (indicesSet.size > 0) {
          return indicesAnswer.concat([Array.from(indicesSet.values())]);
        } else {
          return indicesAnswer;
        }
      }
      if (currIndex === 0) {
        var n = groups.at(currIndex);
        _currIndex = currIndex + 1 | 0;
        _stack = stack.concat([n !== undefined ? n : 2]);
        continue ;
      }
      var n$1 = groups.at(currIndex);
      var curr = n$1 !== undefined ? n$1 : 2;
      var n$2 = stack.at(-1);
      var prev = n$2 !== undefined ? n$2 : -1;
      if (prev < 0) {
        _currIndex = currIndex + 1 | 0;
        _stack = stack.concat([curr]);
        continue ;
      }
      if (curr === prev) {
        if (indicesSet.size > 0) {
          var flushed = Array.from(indicesSet.values());
          _currIndex = currIndex + 1 | 0;
          _stack = stack.concat([curr]);
          _indicesSet = new Set();
          _indicesAnswer = indicesAnswer.concat([flushed]);
          continue ;
        }
        _currIndex = currIndex + 1 | 0;
        _stack = stack.concat([curr]);
        continue ;
      }
      indicesSet.add(currIndex - 1 | 0);
      indicesSet.add(currIndex);
      _currIndex = currIndex + 1 | 0;
      _stack = stack.concat([curr]);
      continue ;
    };
  };
  var subsequenceIndicesArray = findAlternatingSubsequences([], new Set(), [], 0);
  var arr = subsequenceIndicesArray.at(0);
  var subsequenceIndices = arr !== undefined ? arr : [];
  return Core__Array.reduce(subsequenceIndices, [], (function (result, subIdx) {
                var w = words.at(subIdx);
                var word = w !== undefined ? w : String();
                return result.concat([word]);
              }));
}

var w1 = [
  "e",
  "a",
  "b"
];

var g1 = [
  0,
  0,
  1
];

var r1 = longestUnequalAdjacentGroupsSubsequence_I(w1, g1);

console.log("r1: ", r1);

var w2 = [
  "a",
  "b",
  "c",
  "d"
];

var g2 = [
  1,
  0,
  1,
  1
];

var r2 = longestUnequalAdjacentGroupsSubsequence_I(w2, g2);

console.log("r2: ", r2);

export {
  longestUnequalAdjacentGroupsSubsequence_I ,
  w1 ,
  g1 ,
  r1 ,
  w2 ,
  g2 ,
  r2 ,
}
/* r1 Not a pure module */
