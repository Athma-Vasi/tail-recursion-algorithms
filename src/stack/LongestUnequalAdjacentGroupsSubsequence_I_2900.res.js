// Generated by ReScript, PLEASE EDIT WITH CARE


function longestUnequalAdjacentGroupsSubsequence_I(words, groups) {
  var _indicesAnswer = [];
  var _temp = [];
  var _index = 0;
  var _indicesStack = [];
  while(true) {
    var indicesStack = _indicesStack;
    var index = _index;
    var temp = _temp;
    var indicesAnswer = _indicesAnswer;
    if (index === groups.length) {
      return indicesAnswer;
    }
    var n = groups.at(index);
    var curr = n !== undefined ? n : 2;
    var n$1 = indicesStack.at(-1);
    var prevIdx = n$1 !== undefined ? n$1 : -1;
    if (prevIdx < 0) {
      _indicesStack = indicesStack.concat([index]);
      _index = index + 1 | 0;
      continue ;
    }
    var n$2 = groups.at(prevIdx);
    var prev = n$2 !== undefined ? n$2 : 2;
    if (curr === prev) {
      var newAnswer = indicesAnswer.concat([temp.concat([index])]);
      _indicesStack = indicesStack.concat([index]);
      _index = index + 1 | 0;
      _temp = [];
      _indicesAnswer = newAnswer;
      continue ;
    }
    _indicesStack = indicesStack.slice(0, indicesStack.length - 1 | 0).concat([index]);
    _index = index + 1 | 0;
    _temp = temp.concat([
          prevIdx,
          index
        ]);
    continue ;
  };
}

var w1 = [
  "e",
  "a",
  "b"
];

var g1 = [
  0,
  0,
  1
];

var r1 = longestUnequalAdjacentGroupsSubsequence_I(w1, g1);

console.log("r1: ", r1);

var w2 = [
  "a",
  "b",
  "c",
  "d"
];

var g2 = [
  1,
  0,
  1,
  1
];

var r2 = longestUnequalAdjacentGroupsSubsequence_I(w2, g2);

console.log("r2: ", r2);

export {
  longestUnequalAdjacentGroupsSubsequence_I ,
  w1 ,
  g1 ,
  r1 ,
  w2 ,
  g2 ,
  r2 ,
}
/* r1 Not a pure module */
