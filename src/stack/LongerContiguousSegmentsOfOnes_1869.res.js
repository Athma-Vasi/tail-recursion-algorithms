// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Int32 from "rescript/lib/es6/int32.js";

function longerContiguousSegmentsOfOnes(str) {
  var strLength = str.length;
  var _index = 0;
  var _longestOnes = Int32.min_int;
  var _longestZeroes = Int32.min_int;
  var _onesCount = 0;
  var _stack = "";
  var _zeroesCount = 0;
  while(true) {
    var zeroesCount = _zeroesCount;
    var stack = _stack;
    var onesCount = _onesCount;
    var longestZeroes = _longestZeroes;
    var longestOnes = _longestOnes;
    var index = _index;
    if (index === strLength) {
      return longestOnes > longestZeroes;
    }
    var currentBinary = str.charAt(index);
    var previousBinary = str.charAt(strLength - 1 | 0);
    if (currentBinary === previousBinary) {
      var newOnesCount = currentBinary === "1" ? onesCount + 1 | 0 : onesCount;
      var newZeroesCount = currentBinary === "0" ? zeroesCount + 1 | 0 : zeroesCount;
      _zeroesCount = newZeroesCount;
      _stack = stack.concat(currentBinary);
      _onesCount = newOnesCount;
      _longestZeroes = longestZeroes > newZeroesCount ? longestZeroes : newZeroesCount;
      _longestOnes = longestOnes > newOnesCount ? longestOnes : newOnesCount;
      _index = index + 1 | 0;
      continue ;
    }
    _zeroesCount = currentBinary === "0" ? 1 : zeroesCount;
    _stack = stack.concat(currentBinary);
    _onesCount = currentBinary === "1" ? 1 : onesCount;
    _index = index + 1 | 0;
    continue ;
  };
}

var s1 = "1101";

var r1 = longerContiguousSegmentsOfOnes(s1);

console.log("r1: ", r1);

var s2 = "111000";

var r2 = longerContiguousSegmentsOfOnes(s2);

console.log("r2: ", r2);

var s3 = "110100010";

var r3 = longerContiguousSegmentsOfOnes(s3);

console.log("r3: ", r3);

export {
  longerContiguousSegmentsOfOnes ,
  s1 ,
  r1 ,
  s2 ,
  r2 ,
  s3 ,
  r3 ,
}
/* r1 Not a pure module */
