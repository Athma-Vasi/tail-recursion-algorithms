// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Int32 from "rescript/lib/es6/int32.js";
import * as Core__Int from "@rescript/core/src/Core__Int.res.js";
import * as Caml_int32 from "rescript/lib/es6/caml_int32.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.js";

function evaluateReversePolishNotation(tokens) {
  var operatorsSet = Core__Array.reduce([
        "+",
        "-",
        "*",
        "/"
      ], new Set(), (function (acc, op) {
          acc.add(op);
          return acc;
        }));
  var evaluate = function (_stack, _index) {
    while(true) {
      var index = _index;
      var stack = _stack;
      if (index === tokens.length) {
        return stack;
      }
      var t = tokens.at(index);
      var curr = t !== undefined ? t : "";
      if (operatorsSet.has(curr)) {
        var t$1 = stack.at(-1);
        var prev = t$1 !== undefined ? t$1 : Int32.min_int;
        var t$2 = stack.at(-2);
        var prevPrev = t$2 !== undefined ? t$2 : Int32.max_int;
        switch (curr) {
          case "*" :
              _index = index + 1 | 0;
              _stack = stack.slice(0, -2).concat([Math.imul(prevPrev, prev)]);
              continue ;
          case "+" :
              _index = index + 1 | 0;
              _stack = stack.slice(0, -2).concat([prevPrev + prev | 0]);
              continue ;
          case "-" :
              _index = index + 1 | 0;
              _stack = stack.slice(0, -2).concat([prevPrev - prev | 0]);
              continue ;
          default:
            _index = index + 1 | 0;
            _stack = stack.slice(0, -2).concat([Caml_int32.div(prevPrev, prev)]);
            continue ;
        }
      } else {
        var n = Core__Int.fromString(curr, undefined);
        var currNum = n !== undefined ? n : Int32.max_int;
        _index = index + 1 | 0;
        _stack = stack.concat([currNum]);
        continue ;
      }
    };
  };
  var n = evaluate([], 0).at(0);
  if (n !== undefined) {
    return n;
  } else {
    return Int32.min_int;
  }
}

var t1 = [
  "2",
  "1",
  "+",
  "3",
  "*"
];

var r1 = evaluateReversePolishNotation(t1);

console.log("r1: ", r1);

var t2 = [
  "4",
  "13",
  "5",
  "/",
  "+"
];

var r2 = evaluateReversePolishNotation(t2);

console.log("r2: ", r2);

var t3 = [
  "10",
  "6",
  "9",
  "3",
  "+",
  "-11",
  "*",
  "/",
  "*",
  "17",
  "+",
  "5",
  "+"
];

var r3 = evaluateReversePolishNotation(t3);

console.log("r3: ", r3);

export {
  evaluateReversePolishNotation ,
  t1 ,
  r1 ,
  t2 ,
  r2 ,
  t3 ,
  r3 ,
}
/* r1 Not a pure module */
