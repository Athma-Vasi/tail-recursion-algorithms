// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Int32 from "rescript/lib/es6/int32.js";

function searchInsertPosition(nums, target) {
  var length = nums.length;
  var foundIndex = -1;
  var _sliced = nums;
  while(true) {
    var sliced = _sliced;
    var sliceLength = sliced.length;
    var isEvenLength = sliceLength % 2.0 === 0.0;
    if (foundIndex > -1) {
      return foundIndex;
    }
    if (isEvenLength) {
      var rightIndex = sliceLength / 2 | 0;
      var num = sliced[rightIndex];
      var rightNum = num !== undefined ? num : Int32.min_int + 1 | 0;
      var leftIndex = rightIndex - 1 | 0;
      var num$1 = sliced[leftIndex];
      var leftNum = num$1 !== undefined ? num$1 : Int32.min_int;
      if (rightNum === (Int32.min_int + 1 | 0)) {
        return length;
      }
      if (leftNum === Int32.min_int) {
        return -1;
      }
      if (leftNum === target) {
        return leftIndex;
      }
      if (rightNum === target) {
        return rightIndex;
      }
      if (leftNum < target && rightNum > target) {
        return rightIndex;
      }
      if (leftNum > target) {
        _sliced = sliced.slice(0, rightIndex);
        continue ;
      }
      _sliced = sliced.slice(rightIndex, sliceLength);
      continue ;
    }
    var middleIndex = Math.floor(sliceLength / 2.0) | 0;
    var num$2 = sliced[middleIndex];
    var middleNum = num$2 !== undefined ? num$2 : Int32.min_int;
    if (middleNum === target) {
      return middleIndex;
    }
    if (middleNum < target) {
      _sliced = sliced.slice(middleIndex + 1 | 0, sliceLength);
      continue ;
    }
    _sliced = sliced.slice(0, middleIndex);
    continue ;
  };
}

var n1 = [
  1,
  3,
  5,
  6
];

var r1 = searchInsertPosition(n1, 5);

console.log("r1: ", r1);

var r2 = searchInsertPosition(n1, 2);

console.log("r2: ", r2);

var r3 = searchInsertPosition(n1, 7);

console.log("r3: ", r3);

var t1 = 5;

var t2 = 2;

var t3 = 7;

export {
  searchInsertPosition ,
  n1 ,
  t1 ,
  r1 ,
  t2 ,
  r2 ,
  t3 ,
  r3 ,
}
/* r1 Not a pure module */
