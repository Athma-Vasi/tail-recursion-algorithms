// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Int32 from "rescript/lib/es6/int32.js";

function checkIfIntegersInRangeAreCovered(ranges, left, right) {
  var rowLength = ranges.length;
  var arr = ranges.at(0);
  var column = arr !== undefined ? arr : [];
  var columnLength = column.length;
  var rowLoop = function (rowCoveredSet, _rowIndex) {
    while(true) {
      var rowIndex = _rowIndex;
      if (rowIndex === rowLength) {
        return rowCoveredSet;
      }
      var arr = ranges.at(rowIndex);
      var currentRow = arr !== undefined ? arr : [];
      var columnLoop = (function(currentRow){
      return function columnLoop(colCoveredSet, _columnIndex) {
        while(true) {
          var columnIndex = _columnIndex;
          if (columnIndex === columnLength) {
            return colCoveredSet.has(true);
          }
          var num = currentRow.at(columnIndex);
          var currentNum = num !== undefined ? num : Int32.min_int;
          if (currentNum >= left && currentNum <= right) {
            colCoveredSet.add(true);
            _columnIndex = columnIndex + 1 | 0;
            continue ;
          }
          colCoveredSet.add(false);
          _columnIndex = columnIndex + 1 | 0;
          continue ;
        };
      }
      }(currentRow));
      var isRowCovered = columnLoop(new Set(), 0);
      rowCoveredSet.add(isRowCovered);
      _rowIndex = rowIndex + 1 | 0;
      continue ;
    };
  };
  return rowLoop(new Set(), 0).has(true);
}

var ranges1 = [
  [
    1,
    2
  ],
  [
    3,
    4
  ],
  [
    5,
    6
  ]
];

var r1 = checkIfIntegersInRangeAreCovered(ranges1, 2, 5);

console.log("r1: ", r1);

var ranges2 = [
  [
    1,
    10
  ],
  [
    10,
    20
  ]
];

var r2 = checkIfIntegersInRangeAreCovered(ranges2, 21, 21);

console.log("r2: ", r2);

var l1 = 2;

var l2 = 21;

export {
  checkIfIntegersInRangeAreCovered ,
  ranges1 ,
  l1 ,
  r1 ,
  ranges2 ,
  l2 ,
  r2 ,
}
/* r1 Not a pure module */
