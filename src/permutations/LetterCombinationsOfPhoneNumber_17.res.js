// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core__Int from "@rescript/core/src/Core__Int.res.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function letterCombinationsOfPhoneNumber(digits) {
  var t9Table = {
    "0": "0",
    "1": "1",
    "2": "abc",
    "3": "def",
    "4": "ghi",
    "5": "jkl",
    "6": "mno",
    "7": "pqrs",
    "8": "tuv",
    "9": "wxyz"
  };
  var _combinations = [];
  var _tempChars = [];
  var _digitIndex = 0;
  while(true) {
    var digitIndex = _digitIndex;
    var tempChars = _tempChars;
    var combinations = _combinations;
    if (digitIndex === digits.length) {
      return combinations;
    }
    var digit = digits.charAt(digitIndex);
    var n = Core__Int.fromString(digit, undefined);
    var digitNum = n !== undefined ? n : -1;
    if (digitNum < 0) {
      return combinations;
    }
    var str = t9Table[digitNum.toString()];
    var t9Chars = (
        str !== undefined ? Caml_option.valFromOption(str) : ""
      ).split("");
    var c = t9Chars.at(0);
    var firstChar = c !== undefined ? c : "";
    var tempCharsLength = tempChars.length;
    if (t9Chars.length === 0 || firstChar === "0" || firstChar === "1") {
      _digitIndex = digitIndex + 1 | 0;
      continue ;
    }
    if (tempCharsLength === 0) {
      _digitIndex = digitIndex + 1 | 0;
      _tempChars = t9Chars;
      _combinations = t9Chars;
      continue ;
    }
    var tempCharsLoop = (function(combinations,t9Chars,tempCharsLength){
    return function tempCharsLoop(_newCombsOuter, _tempCharsIndex) {
      while(true) {
        var tempCharsIndex = _tempCharsIndex;
        var newCombsOuter = _newCombsOuter;
        if (tempCharsIndex === tempCharsLength) {
          return newCombsOuter;
        }
        var str = combinations.at(tempCharsIndex);
        var existingComb = str !== undefined ? str : "";
        var t9CharsLoop = (function(existingComb){
        return function t9CharsLoop(_newCombsInner, _t9CharsIndex) {
          while(true) {
            var t9CharsIndex = _t9CharsIndex;
            var newCombsInner = _newCombsInner;
            if (t9CharsIndex === t9Chars.length) {
              return newCombsInner;
            }
            var c = t9Chars.at(t9CharsIndex);
            var t9Char = c !== undefined ? c : "";
            _t9CharsIndex = t9CharsIndex + 1 | 0;
            _newCombsInner = newCombsInner.concat([existingComb + t9Char]);
            continue ;
          };
        }
        }(existingComb));
        var newCombsInner = t9CharsLoop([], 0);
        _tempCharsIndex = tempCharsIndex + 1 | 0;
        _newCombsOuter = newCombsOuter.concat(newCombsInner);
        continue ;
      };
    }
    }(combinations,t9Chars,tempCharsLength));
    var newCombinations = tempCharsLoop([], 0);
    _digitIndex = digitIndex + 1 | 0;
    _tempChars = t9Chars;
    _combinations = newCombinations;
    continue ;
  };
}

var d1 = "123";

var r1 = letterCombinationsOfPhoneNumber(d1);

console.log("r1: ", r1);

var d2 = "23";

var r2 = letterCombinationsOfPhoneNumber(d2);

console.log("r2: ", r2);

var d3 = "2";

var r3 = letterCombinationsOfPhoneNumber(d3);

console.log("r3: ", r3);

var d4 = "9";

var r4 = letterCombinationsOfPhoneNumber(d4);

console.log("r4: ", r4);

var d5 = "0";

var r5 = letterCombinationsOfPhoneNumber(d5);

console.log("r5: ", r5);

var d6 = "1";

var r6 = letterCombinationsOfPhoneNumber(d6);

console.log("r6: ", r6);

var d7 = "";

var r7 = letterCombinationsOfPhoneNumber(d7);

console.log("r7: ", r7);

export {
  letterCombinationsOfPhoneNumber ,
  d1 ,
  r1 ,
  d2 ,
  r2 ,
  d3 ,
  r3 ,
  d4 ,
  r4 ,
  d5 ,
  r5 ,
  d6 ,
  r6 ,
  d7 ,
  r7 ,
}
/* r1 Not a pure module */
