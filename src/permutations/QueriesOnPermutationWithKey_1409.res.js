// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core__Array from "@rescript/core/src/Core__Array.res.js";

function queriesOnPermutationWithKey(queries, m) {
  var makeRange = function (start, end) {
    var _range = [];
    var _limit = start;
    while(true) {
      var limit = _limit;
      var range = _range;
      if (limit > end) {
        return range;
      }
      _limit = limit + 1 | 0;
      _range = range.concat([limit]);
      continue ;
    };
  };
  var findIndexOfNum = function (nums, num) {
    return Core__Array.reduceWithIndex(nums, -1, (function (acc, n, idx) {
                  if (n === num) {
                    return idx;
                  } else {
                    return acc;
                  }
                }));
  };
  var removeNum = function (nums, index) {
    return nums.filter(function (_num, idx) {
                return idx !== index;
              });
  };
  var range = makeRange(1, m);
  var _processed = [];
  var _shuffledRange = range;
  var _index = 0;
  while(true) {
    var index = _index;
    var shuffledRange = _shuffledRange;
    var processed = _processed;
    if (index === queries.length) {
      return processed;
    }
    var q = queries.at(index);
    var query = q !== undefined ? q : -1;
    var queryIdx = findIndexOfNum(shuffledRange, query);
    var removed = removeNum(shuffledRange, queryIdx);
    _index = index + 1 | 0;
    _shuffledRange = [query].concat(removed);
    _processed = processed.concat([queryIdx]);
    continue ;
  };
}

var q1 = [
  3,
  1,
  2,
  1
];

var r1 = queriesOnPermutationWithKey(q1, 5);

console.log("r1: ", r1);

var q2 = [
  4,
  1,
  2,
  2
];

var r2 = queriesOnPermutationWithKey(q2, 4);

console.log("r2: ", r2);

var q3 = [
  7,
  5,
  5,
  8,
  3
];

var r3 = queriesOnPermutationWithKey(q3, 8);

console.log("r3: ", r3);

var m1 = 5;

var m2 = 4;

var m3 = 8;

export {
  queriesOnPermutationWithKey ,
  q1 ,
  m1 ,
  r1 ,
  q2 ,
  m2 ,
  r2 ,
  q3 ,
  m3 ,
  r3 ,
}
/* r1 Not a pure module */
