// Generated by ReScript, PLEASE EDIT WITH CARE


function runAllSuffixInstructionsStayingInAGrid(n, startPos, moves) {
  var _result = [];
  var _slicedMoves = moves;
  var _startRowIndex = startPos[0];
  var _startColIndex = startPos[1];
  while(true) {
    var startColIndex = _startColIndex;
    var startRowIndex = _startRowIndex;
    var slicedMoves = _slicedMoves;
    var result = _result;
    var length = slicedMoves.length;
    if (length === 0) {
      return result;
    }
    var traverse = (function(slicedMoves,length){
    return function traverse(_instructions, _isOutOfBounds, _movesIndex, _rowIndex, _colIndex) {
      while(true) {
        var colIndex = _colIndex;
        var rowIndex = _rowIndex;
        var movesIndex = _movesIndex;
        var isOutOfBounds = _isOutOfBounds;
        var instructions = _instructions;
        if (movesIndex === length || isOutOfBounds) {
          return [
                  instructions,
                  isOutOfBounds,
                  rowIndex,
                  colIndex
                ];
        }
        var m = slicedMoves.at(movesIndex);
        var move = m !== undefined ? m : "R";
        console.log("\n");
        console.log("--traverse--");
        console.log("instructions: ", instructions);
        console.log("isOutOfBounds: ", isOutOfBounds);
        console.log("movesIndex: ", movesIndex);
        console.log("rowIndex: ", rowIndex);
        console.log("colIndex: ", colIndex);
        console.log("move: ", move);
        switch (move) {
          case "R" :
              var newColIndex = colIndex + 1 | 0;
              console.log("--R--");
              console.log("newColIndex: ", newColIndex);
              if (newColIndex > (n - 1 | 0)) {
                _colIndex = newColIndex;
                _isOutOfBounds = true;
                continue ;
              }
              _colIndex = newColIndex;
              _movesIndex = movesIndex + 1 | 0;
              _isOutOfBounds = false;
              _instructions = instructions + 1 | 0;
              continue ;
          case "D" :
              var newRowIndex = rowIndex + 1 | 0;
              console.log("--D--");
              console.log("newRowIndex: ", newRowIndex);
              if (newRowIndex > (n - 1 | 0)) {
                _rowIndex = newRowIndex;
                _isOutOfBounds = true;
                continue ;
              }
              _rowIndex = newRowIndex;
              _movesIndex = movesIndex + 1 | 0;
              _isOutOfBounds = false;
              _instructions = instructions + 1 | 0;
              continue ;
          case "L" :
              var newColIndex$1 = colIndex - 1 | 0;
              console.log("--L--");
              console.log("newColIndex: ", newColIndex$1);
              if (newColIndex$1 < 0) {
                _colIndex = newColIndex$1;
                _isOutOfBounds = true;
                continue ;
              }
              _colIndex = newColIndex$1;
              _movesIndex = movesIndex + 1 | 0;
              _isOutOfBounds = false;
              _instructions = instructions + 1 | 0;
              continue ;
          case "U" :
              var newRowIndex$1 = rowIndex - 1 | 0;
              console.log("--U--");
              console.log("newRowIndex: ", newRowIndex$1);
              if (newRowIndex$1 < 0) {
                _rowIndex = newRowIndex$1;
                _isOutOfBounds = true;
                continue ;
              }
              _rowIndex = newRowIndex$1;
              _movesIndex = movesIndex + 1 | 0;
              _isOutOfBounds = false;
              _instructions = instructions + 1 | 0;
              continue ;
          
        }
      };
    }
    }(slicedMoves,length));
    var match = traverse(0, false, 0, startRowIndex, startColIndex);
    var colIndex = match[3];
    var rowIndex = match[2];
    var instructions = match[0];
    console.log("\n");
    console.log("--outside traverse--");
    console.log("instructions: ", instructions);
    console.log("rowIndex: ", rowIndex);
    console.log("colIndex: ", colIndex);
    _startColIndex = colIndex;
    _startRowIndex = rowIndex;
    _slicedMoves = slicedMoves.slice(1);
    _result = result.concat([instructions]);
    continue ;
  };
}

var sp1 = [
  0,
  1
];

var m1 = [
  "R",
  "R",
  "D",
  "D",
  "L",
  "U"
];

var r1 = runAllSuffixInstructionsStayingInAGrid(3, sp1, m1);

console.log("r1: ", r1);

var n1 = 3;

export {
  runAllSuffixInstructionsStayingInAGrid ,
  n1 ,
  sp1 ,
  m1 ,
  r1 ,
}
/* r1 Not a pure module */
