// Generated by ReScript, PLEASE EDIT WITH CARE


function runAllSuffixInstructionsStayingInAGrid(n, startPos, moves) {
  var _result = [];
  var _slicedMoves = moves;
  var _startRowIndex = startPos[0];
  var _startColIndex = startPos[1];
  while(true) {
    var startColIndex = _startColIndex;
    var startRowIndex = _startRowIndex;
    var slicedMoves = _slicedMoves;
    var result = _result;
    var length = slicedMoves.length;
    if (length === 0) {
      return result;
    }
    var traverse = (function(slicedMoves,startRowIndex,startColIndex,length){
    return function traverse(_instructions, _isOutOfBounds, _movesIndex, _rowIndex, _colIndex) {
      while(true) {
        var colIndex = _colIndex;
        var rowIndex = _rowIndex;
        var movesIndex = _movesIndex;
        var isOutOfBounds = _isOutOfBounds;
        var instructions = _instructions;
        if (movesIndex === length || isOutOfBounds) {
          return [
                  instructions,
                  startRowIndex,
                  startColIndex
                ];
        }
        var m = slicedMoves.at(movesIndex);
        var move = m !== undefined ? m : "R";
        switch (move) {
          case "R" :
              if ((colIndex + 1 | 0) > (n - 1 | 0)) {
                _colIndex = colIndex + 1 | 0;
                _isOutOfBounds = true;
                continue ;
              }
              _colIndex = colIndex + 1 | 0;
              _movesIndex = movesIndex + 1 | 0;
              _isOutOfBounds = false;
              _instructions = instructions + 1 | 0;
              continue ;
          case "D" :
              if ((rowIndex + 1 | 0) > (n - 1 | 0)) {
                _rowIndex = rowIndex + 1 | 0;
                _isOutOfBounds = true;
                continue ;
              }
              _rowIndex = rowIndex + 1 | 0;
              _movesIndex = movesIndex + 1 | 0;
              _isOutOfBounds = false;
              _instructions = instructions + 1 | 0;
              continue ;
          case "L" :
              if ((colIndex - 1 | 0) < 0) {
                _colIndex = colIndex - 1 | 0;
                _isOutOfBounds = true;
                continue ;
              }
              _colIndex = colIndex - 1 | 0;
              _movesIndex = movesIndex + 1 | 0;
              _isOutOfBounds = false;
              _instructions = instructions + 1 | 0;
              continue ;
          case "U" :
              if ((rowIndex - 1 | 0) < 0) {
                _rowIndex = rowIndex - 1 | 0;
                _isOutOfBounds = true;
                continue ;
              }
              _rowIndex = rowIndex - 1 | 0;
              _movesIndex = movesIndex + 1 | 0;
              _isOutOfBounds = false;
              _instructions = instructions + 1 | 0;
              continue ;
          
        }
      };
    }
    }(slicedMoves,startRowIndex,startColIndex,length));
    var match = traverse(0, false, 0, startRowIndex, startColIndex);
    _startColIndex = match[2];
    _startRowIndex = match[1];
    _slicedMoves = slicedMoves.slice(1);
    _result = result.concat([match[0]]);
    continue ;
  };
}

var sp1 = [
  0,
  1
];

var m1 = [
  "R",
  "R",
  "D",
  "D",
  "L",
  "U"
];

var r1 = runAllSuffixInstructionsStayingInAGrid(3, sp1, m1);

console.log("r1: ", r1);

var sp2 = [
  1,
  1
];

var m2 = [
  "L",
  "U",
  "R",
  "D"
];

var r2 = runAllSuffixInstructionsStayingInAGrid(2, sp2, m2);

console.log("r2: ", r2);

var n1 = 3;

var n2 = 2;

export {
  runAllSuffixInstructionsStayingInAGrid ,
  n1 ,
  sp1 ,
  m1 ,
  r1 ,
  n2 ,
  sp2 ,
  m2 ,
  r2 ,
}
/* r1 Not a pure module */
