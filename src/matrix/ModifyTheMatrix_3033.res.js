// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Int32 from "rescript/lib/es6/int32.js";

function modifyTheMatrix(matrix) {
  var arr = matrix.at(0);
  var row = arr !== undefined ? arr : [];
  var xLength = row.length;
  var yLength = matrix.length;
  var _answer = matrix.slice();
  var _xIndex = 0;
  while(true) {
    var xIndex = _xIndex;
    var answer = _answer;
    if (xIndex === xLength) {
      return answer;
    }
    var findMaxInColumn = (function(xIndex){
    return function findMaxInColumn(_max, _yIndex) {
      while(true) {
        var yIndex = _yIndex;
        var max = _max;
        if (yIndex === yLength) {
          return max;
        }
        var arr = matrix.at(yIndex);
        var row = arr !== undefined ? arr : [];
        var n = row.at(xIndex);
        var num = n !== undefined ? n : Int32.min_int;
        _yIndex = yIndex + 1 | 0;
        _max = max > num ? max : num;
        continue ;
      };
    }
    }(xIndex));
    var max = findMaxInColumn(Int32.min_int, 0);
    var replaceMaxInColumn = (function(xIndex,max){
    return function replaceMaxInColumn(replaced, _yIndex) {
      while(true) {
        var yIndex = _yIndex;
        if (yIndex === yLength) {
          return replaced;
        }
        var arr = matrix.at(yIndex);
        var row = arr !== undefined ? arr : [];
        var n = row.at(xIndex);
        var num = n !== undefined ? n : Int32.min_int;
        row[xIndex] = num === -1 ? max : num;
        replaced[yIndex] = row;
        _yIndex = yIndex + 1 | 0;
        continue ;
      };
    }
    }(xIndex,max));
    _xIndex = xIndex + 1 | 0;
    _answer = replaceMaxInColumn(answer, 0);
    continue ;
  };
}

var m1 = [
  [
    1,
    2,
    -1
  ],
  [
    4,
    -1,
    6
  ],
  [
    7,
    8,
    9
  ]
];

var r1 = modifyTheMatrix(m1);

console.log("r1: ", r1);

var m2 = [
  [
    3,
    -1
  ],
  [
    5,
    2
  ]
];

var r2 = modifyTheMatrix(m2);

console.log("r2: ", r2);

export {
  modifyTheMatrix ,
  m1 ,
  r1 ,
  m2 ,
  r2 ,
}
/* r1 Not a pure module */
