// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml from "rescript/lib/es6/caml.js";
import * as Core__Option from "@rescript/core/src/Core__Option.res.js";

function rowWithMaximumOnes(matrix) {
  var countOnes = function (row) {
    var _amount = 0;
    var _index = 0;
    while(true) {
      var index = _index;
      var amount = _amount;
      if (index === row.length) {
        return amount;
      }
      var num = Core__Option.mapOr(row.at(index), 2, (function (n) {
              return n;
            }));
      _index = index + 1 | 0;
      _amount = num === 1 ? amount + 1 | 0 : amount;
      continue ;
    };
  };
  var rowLoop = function (rowCountTable, _rowIndex) {
    while(true) {
      var rowIndex = _rowIndex;
      if (rowIndex === matrix.length) {
        return rowCountTable;
      }
      var row = Core__Option.mapOr(matrix.at(rowIndex), [], (function (r) {
              return r;
            }));
      rowCountTable.set(rowIndex, countOnes(row));
      _rowIndex = rowIndex + 1 | 0;
      continue ;
    };
  };
  return Core__Option.mapOr(Array.from(rowLoop(new Map(), 0).entries()).toSorted(function (param, param$1) {
                    var v2 = param$1[1];
                    var v1 = param[1];
                    if ((v2 - v1 | 0) === 0) {
                      return Caml.int_compare(param[0], param$1[0]);
                    } else {
                      return Caml.int_compare(v2, v1);
                    }
                  }).at(0), [
              -1,
              -1
            ], (function (param) {
                return [
                        param[0],
                        param[1]
                      ];
              }));
}

var m1 = [
  [
    0,
    1
  ],
  [
    1,
    0
  ]
];

var r1 = rowWithMaximumOnes(m1);

console.log("r1: ", r1);

var m2 = [
  [
    0,
    0,
    0
  ],
  [
    0,
    1,
    1
  ]
];

var r2 = rowWithMaximumOnes(m2);

console.log("r2: ", r2);

var m3 = [
  [
    0,
    0
  ],
  [
    1,
    1
  ],
  [
    0,
    0
  ]
];

var r3 = rowWithMaximumOnes(m3);

console.log("r3: ", r3);

export {
  rowWithMaximumOnes ,
  m1 ,
  r1 ,
  m2 ,
  r2 ,
  m3 ,
  r3 ,
}
/* r1 Not a pure module */
