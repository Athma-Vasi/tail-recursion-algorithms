// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Int32 from "rescript/lib/es6/int32.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.js";

function spiralMatrix(matrix) {
  var rows = matrix.length;
  var row = matrix[0];
  var firstRow = row !== undefined ? row : [];
  var columns = firstRow.length;
  var total = Math.imul(rows, columns);
  var _accumulator = [];
  var _count = 0;
  var _nextDirection = "Right";
  var _newMatrix = matrix;
  var _x = 0;
  var _y = 0;
  while(true) {
    var y = _y;
    var x = _x;
    var newMatrix = _newMatrix;
    var nextDirection = _nextDirection;
    var count = _count;
    var accumulator = _accumulator;
    var newRows = newMatrix.length;
    var row$1 = newMatrix[y];
    var newRow = row$1 !== undefined ? row$1 : [];
    var newColumns = newRow.length;
    var num = newRow[x];
    var currentNum = num !== undefined ? num : Int32.min_int;
    var clone = accumulator.concat([currentNum]);
    if (count === total) {
      return clone;
    }
    if (x === count) {
      _x = x + 1 | 0;
      _nextDirection = "Right";
      _count = count + 1 | 0;
      _accumulator = clone;
      continue ;
    }
    if (x === (newColumns - 1 | 0)) {
      var slicedMatrix = newMatrix.slice(y + 1 | 0, rows);
      var newY = (y - 1 | 0) < 0 ? 0 : y - 1 | 0;
      console.log("\n              ");
      console.group("right boundary");
      console.log("slicedMatrix", slicedMatrix);
      console.log("newY", newY);
      console.groupEnd();
      _y = newY;
      _newMatrix = slicedMatrix;
      _nextDirection = "Down";
      _count = count + 1 | 0;
      _accumulator = clone;
      continue ;
    }
    if (y === (newRows - 1 | 0)) {
      var newX = (x - 1 | 0) < 0 ? 0 : x - 1 | 0;
      var slicedMatrix$1 = Core__Array.reduceRight(newMatrix, [], (function(newX){
          return function (matrixAcc, currRow) {
            var slicedRow = Core__Array.reduceRightWithIndex(currRow, [], (function (rowAcc, num, columnIndex) {
                    if (columnIndex === newX) {
                      return rowAcc;
                    } else {
                      return rowAcc.concat([num]);
                    }
                  }));
            matrixAcc.push(slicedRow);
            return matrixAcc;
          }
          }(newX)));
      _x = newX;
      _newMatrix = slicedMatrix$1;
      _nextDirection = "Left";
      _count = count + 1 | 0;
      _accumulator = clone;
      continue ;
    }
    if (x === 0) {
      var newMatrix$1 = matrix.slice(0, rows - 1 | 0);
      var newY$1 = (y - 1 | 0) < 0 ? 0 : y - 1 | 0;
      _y = newY$1;
      _newMatrix = newMatrix$1;
      _nextDirection = "Up";
      _count = count + 1 | 0;
      _accumulator = clone;
      continue ;
    }
    if (y === 0) {
      var newX$1 = (x - 1 | 0) < 0 ? 0 : x - 1 | 0;
      var slicedMatrix$2 = Core__Array.reduceRight(newMatrix, [], (function (matrixAcc, currRow) {
              var slicedRow = Core__Array.reduceRightWithIndex(currRow, [], (function (rowAcc, num, columnIndex) {
                      if (columnIndex === 0) {
                        return rowAcc;
                      } else {
                        return rowAcc.concat([num]);
                      }
                    }));
              matrixAcc.push(slicedRow);
              return matrixAcc;
            }));
      _x = newX$1;
      _newMatrix = slicedMatrix$2;
      _nextDirection = "Right";
      _count = count + 1 | 0;
      _accumulator = clone;
      continue ;
    }
    switch (nextDirection) {
      case "Right" :
          _x = (x + 1 | 0) === newColumns ? x : x + 1 | 0;
          _count = count + 1 | 0;
          _accumulator = clone;
          continue ;
      case "Down" :
          _y = (y + 1 | 0) === newRows ? y : y + 1 | 0;
          _count = count + 1 | 0;
          _accumulator = clone;
          continue ;
      case "Left" :
          _x = (x - 1 | 0) === 0 ? x : x - 1 | 0;
          _count = count + 1 | 0;
          _accumulator = clone;
          continue ;
      case "Up" :
          _y = (y - 1 | 0) === 0 ? y : y - 1 | 0;
          _count = count + 1 | 0;
          _accumulator = clone;
          continue ;
      
    }
  };
}

var matrix1 = [
  [
    1,
    2,
    3
  ],
  [
    4,
    5,
    6
  ],
  [
    7,
    8,
    9
  ]
];

var result1 = spiralMatrix(matrix1);

console.log("result1", result1);

export {
  spiralMatrix ,
  matrix1 ,
  result1 ,
}
/* result1 Not a pure module */
