// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core__Array from "@rescript/core/src/Core__Array.res.js";
import * as Core__Option from "@rescript/core/src/Core__Option.res.js";

function deleteGreatestValueInEachRow(grid) {
  var _answer = 0;
  var _matrix = grid;
  while(true) {
    var matrix = _matrix;
    var answer = _answer;
    var row = Core__Option.mapOr(matrix.at(0), [], (function (r) {
            return r;
          }));
    var maxColumns = row.length;
    if (maxColumns === 0) {
      return answer;
    }
    var idxGreatestTuples = Core__Array.reduce(matrix, [], (function (acc, row) {
            var match = Core__Array.reduceWithIndex(row, [
                  -1,
                  -1
                ], (function (tuple, val, i) {
                    var greatest = tuple[1];
                    if (val > greatest) {
                      return [
                              i,
                              val
                            ];
                    } else {
                      return [
                              tuple[0],
                              greatest
                            ];
                    }
                  }));
            return acc.concat([[
                          match[0],
                          match[1]
                        ]]);
          }));
    var match = Core__Array.reduceWithIndex(idxGreatestTuples, [
          [],
          -1
        ], (function(matrix){
        return function (acc, tuple, index) {
          var greatest = tuple[1];
          var idx = tuple[0];
          var row = Core__Option.mapOr(matrix.at(index), [], (function (r) {
                  return r;
                }));
          var reduced = row.filter(function (_val, i) {
                return i !== idx;
              });
          var max = acc[1];
          return [
                  acc[0].concat([reduced]),
                  max > greatest ? max : greatest
                ];
        }
        }(matrix)));
    _matrix = match[0];
    _answer = answer + match[1] | 0;
    continue ;
  };
}

var g1 = [
  [
    1,
    2,
    4
  ],
  [
    3,
    3,
    1
  ]
];

var r1 = deleteGreatestValueInEachRow(g1);

console.log("r1: ", r1);

var g2 = [[10]];

var r2 = deleteGreatestValueInEachRow(g2);

console.log("r2: ", r2);

export {
  deleteGreatestValueInEachRow ,
  g1 ,
  r1 ,
  g2 ,
  r2 ,
}
/* r1 Not a pure module */
