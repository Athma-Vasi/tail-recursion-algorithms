// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Int32 from "rescript/lib/es6/int32.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.js";

function maxIncreaseToKeepSkyline(grid) {
  var maxRows = grid.length;
  var r = grid.at(0);
  var row = r !== undefined ? r : [];
  var maxColumns = row.length;
  var findTallest = function (arr) {
    return Core__Array.reduce(arr, Int32.min_int, (function (acc, height) {
                  if (acc > height) {
                    return acc;
                  } else {
                    return height;
                  }
                }));
  };
  var makeTallestInEachRowTable = function (rowsTable, _rowIndex) {
    while(true) {
      var rowIndex = _rowIndex;
      if (rowIndex === maxRows) {
        return rowsTable;
      }
      var r = grid.at(rowIndex);
      var row = r !== undefined ? r : [];
      var tallest = findTallest(row);
      rowsTable.set(rowIndex, tallest);
      _rowIndex = rowIndex + 1 | 0;
      continue ;
    };
  };
  var makeTallestInEachColumnTable = function (columnsTable, _columnIndex) {
    while(true) {
      var columnIndex = _columnIndex;
      if (columnIndex === maxColumns) {
        return columnsTable;
      }
      var collectHeights = (function(columnIndex){
      return function collectHeights(_columnHeights, _rowIndex) {
        while(true) {
          var rowIndex = _rowIndex;
          var columnHeights = _columnHeights;
          if (rowIndex === maxRows) {
            return columnHeights;
          }
          var r = grid.at(rowIndex);
          var row = r !== undefined ? r : [];
          var h = row.at(columnIndex);
          var height = h !== undefined ? h : -1;
          _rowIndex = rowIndex + 1 | 0;
          _columnHeights = columnHeights.concat([height]);
          continue ;
        };
      }
      }(columnIndex));
      var columnHeights = collectHeights([], 0);
      var tallest = findTallest(columnHeights);
      columnsTable.set(columnIndex, tallest);
      _columnIndex = columnIndex + 1 | 0;
      continue ;
    };
  };
  var rowsTable = makeTallestInEachRowTable(new Map(), 0);
  var columnsTable = makeTallestInEachColumnTable(new Map(), 0);
  var _rowIncrease = 0;
  var _rowIndex = 0;
  while(true) {
    var rowIndex = _rowIndex;
    var rowIncrease = _rowIncrease;
    if (rowIndex === maxRows) {
      return rowIncrease;
    }
    var r$1 = grid.at(rowIndex);
    var row$1 = r$1 !== undefined ? r$1 : [];
    var columnLoop = (function(rowIndex,row$1){
    return function columnLoop(_columnIncrease, _columnIndex) {
      while(true) {
        var columnIndex = _columnIndex;
        var columnIncrease = _columnIncrease;
        if (columnIndex === maxColumns) {
          return columnIncrease;
        }
        var h = row$1.at(columnIndex);
        var height = h !== undefined ? h : -1;
        var h$1 = rowsTable.get(rowIndex);
        var tallestInRow = h$1 !== undefined ? h$1 : -1;
        var h$2 = columnsTable.get(columnIndex);
        var tallestInColumn = h$2 !== undefined ? h$2 : -1;
        var smaller = tallestInRow < tallestInColumn ? tallestInRow : tallestInColumn;
        var diffToIncrease = smaller - height | 0;
        _columnIndex = columnIndex + 1 | 0;
        _columnIncrease = columnIncrease + diffToIncrease | 0;
        continue ;
      };
    }
    }(rowIndex,row$1));
    var columnIncrease = columnLoop(rowIncrease, 0);
    _rowIndex = rowIndex + 1 | 0;
    _rowIncrease = columnIncrease;
    continue ;
  };
}

var g1 = [
  [
    3,
    0,
    8,
    4
  ],
  [
    2,
    4,
    5,
    7
  ],
  [
    9,
    2,
    6,
    3
  ],
  [
    0,
    3,
    1,
    0
  ]
];

var r1 = maxIncreaseToKeepSkyline(g1);

console.log("r1: ", r1);

var g2 = [
  [
    0,
    0,
    0
  ],
  [
    0,
    0,
    0
  ],
  [
    0,
    0,
    0
  ]
];

var r2 = maxIncreaseToKeepSkyline(g2);

console.log("r2: ", r2);

export {
  maxIncreaseToKeepSkyline ,
  g1 ,
  r1 ,
  g2 ,
  r2 ,
}
/* r1 Not a pure module */
