// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core__Array from "@rescript/core/src/Core__Array.res.js";

function transposeMatrix(matrix, maxRows, maxColumns) {
  var makeMatrix = function (maxRows, maxColumns) {
    var _matrix = [];
    var _rowCounter = 0;
    while(true) {
      var rowCounter = _rowCounter;
      var matrix = _matrix;
      if (rowCounter === maxRows) {
        return matrix;
      }
      _rowCounter = rowCounter + 1 | 0;
      _matrix = matrix.concat([Core__Array.make(maxColumns, 0)]);
      continue ;
    };
  };
  var _transposedMatrix = makeMatrix(maxRows, maxColumns);
  var _rowIndex = 0;
  while(true) {
    var rowIndex = _rowIndex;
    var transposedMatrix = _transposedMatrix;
    if (rowIndex === maxRows) {
      return transposedMatrix;
    }
    var arr = matrix.at(rowIndex);
    var row = arr !== undefined ? arr : [];
    var columnLoop = (function(rowIndex,row){
    return function columnLoop(_colUpdatedMatrix, _columnIndex) {
      while(true) {
        var columnIndex = _columnIndex;
        var colUpdatedMatrix = _colUpdatedMatrix;
        if (columnIndex === maxColumns) {
          return colUpdatedMatrix;
        }
        var item = row.at(columnIndex);
        var matrixItem = item !== undefined ? item : 0;
        var arr = colUpdatedMatrix.at(columnIndex);
        var rowToUpdate = arr !== undefined ? arr : [];
        var updatedRow = rowToUpdate.map((function(matrixItem){
            return function (item, idx) {
              if (idx === rowIndex) {
                return matrixItem;
              } else {
                return item;
              }
            }
            }(matrixItem)));
        var updatedMatrix = colUpdatedMatrix.map((function(columnIndex,updatedRow){
            return function (row, idx) {
              if (idx === columnIndex) {
                return updatedRow;
              } else {
                return row;
              }
            }
            }(columnIndex,updatedRow)));
        _columnIndex = columnIndex + 1 | 0;
        _colUpdatedMatrix = updatedMatrix;
        continue ;
      };
    }
    }(rowIndex,row));
    _rowIndex = rowIndex + 1 | 0;
    _transposedMatrix = columnLoop(transposedMatrix, 0);
    continue ;
  };
}

function reverseRows(matrix) {
  var _reversed = [];
  var _index = 0;
  while(true) {
    var index = _index;
    var reversed = _reversed;
    if (index === matrix.length) {
      return reversed;
    }
    var arr = matrix.at(index);
    var row = arr !== undefined ? arr : [];
    _index = index + 1 | 0;
    _reversed = reversed.concat([row.toReversed()]);
    continue ;
  };
}

function rotateImage(matrix) {
  var maxRows = matrix.length;
  var r = matrix.at(0);
  var row = r !== undefined ? r : [];
  var maxColumns = row.length;
  return reverseRows(transposeMatrix(matrix, maxRows, maxColumns));
}

var m1 = [
  [
    1,
    2,
    3
  ],
  [
    4,
    5,
    6
  ],
  [
    7,
    8,
    9
  ]
];

var r1 = rotateImage(m1);

console.log("r1: ", r1);

var m2 = [
  [
    5,
    1,
    9,
    11
  ],
  [
    2,
    4,
    8,
    10
  ],
  [
    13,
    3,
    6,
    7
  ],
  [
    15,
    14,
    12,
    16
  ]
];

var r2 = rotateImage(m2);

console.log("r2: ", r2);

export {
  transposeMatrix ,
  reverseRows ,
  rotateImage ,
  m1 ,
  r1 ,
  m2 ,
  r2 ,
}
/* r1 Not a pure module */
