// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core__Array from "@rescript/core/src/Core__Array.res.js";
import * as Core__Option from "@rescript/core/src/Core__Option.res.js";

function rotatingTheBox(boxGrid) {
  var maxRows = boxGrid.length;
  var r = boxGrid.at(0);
  var row = r !== undefined ? r : [];
  var maxColumns = row.length;
  var transposeMatrix = function (matrix) {
    var makeMatrix = function (maxRows, maxColumns) {
      var _matrix = [];
      var _rowCounter = 0;
      while(true) {
        var rowCounter = _rowCounter;
        var matrix = _matrix;
        if (rowCounter === maxRows) {
          return matrix;
        }
        _rowCounter = rowCounter + 1 | 0;
        _matrix = matrix.concat([Core__Array.make(maxColumns, ".")]);
        continue ;
      };
    };
    var _transposedMatrix = makeMatrix(maxRows, maxColumns);
    var _rowIndex = 0;
    while(true) {
      var rowIndex = _rowIndex;
      var transposedMatrix = _transposedMatrix;
      if (rowIndex === maxRows) {
        return transposedMatrix;
      }
      var arr = matrix.at(rowIndex);
      var row = arr !== undefined ? arr : [];
      var columnLoop = (function(rowIndex,row){
      return function columnLoop(_colUpdatedMatrix, _columnIndex) {
        while(true) {
          var columnIndex = _columnIndex;
          var colUpdatedMatrix = _colUpdatedMatrix;
          if (columnIndex === maxColumns) {
            return colUpdatedMatrix;
          }
          var item = row.at(columnIndex);
          var matrixItem = item !== undefined ? item : ".";
          var arr = colUpdatedMatrix.at(columnIndex);
          var rowToUpdate = arr !== undefined ? arr : [];
          var updatedRow = rowToUpdate.map((function(matrixItem){
              return function (item, idx) {
                if (idx === rowIndex) {
                  return matrixItem;
                } else {
                  return item;
                }
              }
              }(matrixItem)));
          var updatedMatrix = colUpdatedMatrix.map((function(columnIndex,updatedRow){
              return function (row, idx) {
                if (idx === columnIndex) {
                  return updatedRow;
                } else {
                  return row;
                }
              }
              }(columnIndex,updatedRow)));
          _columnIndex = columnIndex + 1 | 0;
          _colUpdatedMatrix = updatedMatrix;
          continue ;
        };
      }
      }(rowIndex,row));
      _rowIndex = rowIndex + 1 | 0;
      _transposedMatrix = columnLoop(transposedMatrix, 0);
      continue ;
    };
  };
  var rotateBox = function (boxGrid) {
    var transposed = transposeMatrix(boxGrid);
    var _reversed = [];
    var _index = 0;
    while(true) {
      var index = _index;
      var reversed = _reversed;
      if (index === transposed.length) {
        return reversed;
      }
      var arr = transposed.at(index);
      var row = arr !== undefined ? arr : [];
      _index = index + 1 | 0;
      _reversed = reversed.concat([row.toReversed()]);
      continue ;
    };
  };
  var boxGrid$1 = rotateBox(boxGrid);
  var _applied = boxGrid$1;
  var _columnIndex = 0;
  while(true) {
    var columnIndex = _columnIndex;
    var applied = _applied;
    if (columnIndex === maxColumns) {
      return applied;
    }
    var rowLoop = (function(columnIndex){
    return function rowLoop(_applied_, _anchorIndex, _explorerIndex) {
      while(true) {
        var explorerIndex = _explorerIndex;
        var anchorIndex = _anchorIndex;
        var applied_ = _applied_;
        if (explorerIndex < 0) {
          return applied_;
        }
        var anchor = Core__Option.getOr(Core__Option.flatMap(boxGrid$1.at(anchorIndex), (function(anchorIndex){
                return function (arr) {
                  return arr.at(anchorIndex);
                }
                }(anchorIndex))), ".");
        var explorer = Core__Option.getOr(Core__Option.flatMap(boxGrid$1.at(explorerIndex), (function(explorerIndex){
                return function (arr) {
                  return arr.at(explorerIndex);
                }
                }(explorerIndex))), ".");
        switch (anchor) {
          case "#" :
              _explorerIndex = explorerIndex - 1 | 0;
              _anchorIndex = anchorIndex - 1 | 0;
              continue ;
          case "*" :
              switch (explorer) {
                case "*" :
                    _explorerIndex = explorerIndex - 1 | 0;
                    _anchorIndex = anchorIndex - 1 | 0;
                    continue ;
                case "#" :
                case "." :
                    break;
                
              }
              _explorerIndex = explorerIndex - 1 | 0;
              continue ;
          case "." :
              switch (explorer) {
                case "#" :
                    var arr = applied_.at(anchorIndex);
                    var anchorRow = arr !== undefined ? arr : [];
                    var arr$1 = applied_.at(explorerIndex);
                    var explorerRow = arr$1 !== undefined ? arr$1 : [];
                    var updatedAnchorRow = anchorRow.map(function (item, idx) {
                          if (idx === columnIndex) {
                            return "#";
                          } else {
                            return item;
                          }
                        });
                    var updatedExplorerRow = explorerRow.map(function (item, idx) {
                          if (idx === columnIndex) {
                            return ".";
                          } else {
                            return item;
                          }
                        });
                    var updatedMatrix = applied_.map((function(anchorIndex,explorerIndex,updatedAnchorRow,updatedExplorerRow){
                        return function (row, idx) {
                          if (idx === anchorIndex) {
                            return updatedAnchorRow;
                          } else if (idx === explorerIndex) {
                            return updatedExplorerRow;
                          } else {
                            return row;
                          }
                        }
                        }(anchorIndex,explorerIndex,updatedAnchorRow,updatedExplorerRow)));
                    _explorerIndex = explorerIndex - 1 | 0;
                    _anchorIndex = anchorIndex - 1 | 0;
                    _applied_ = updatedMatrix;
                    continue ;
                case "*" :
                case "." :
                    break;
                
              }
              _explorerIndex = explorerIndex - 1 | 0;
              _anchorIndex = anchorIndex - 1 | 0;
              continue ;
          
        }
      };
    }
    }(columnIndex));
    _columnIndex = columnIndex + 1 | 0;
    _applied = rowLoop(applied, maxRows - 1 | 0, maxRows - 2 | 0);
    continue ;
  };
}

var b1 = [[
    "#",
    ".",
    "#"
  ]];

var r1 = rotatingTheBox(b1);

console.log("r1: ", r1);

export {
  rotatingTheBox ,
  b1 ,
  r1 ,
}
/* r1 Not a pure module */
