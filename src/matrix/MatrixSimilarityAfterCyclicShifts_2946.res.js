// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Int32 from "rescript/lib/es6/int32.js";

function matrixSimilarityAfterCyclicShifts(matrix, k) {
  var cyclicLeftShift = function (_shifted, _first, row, _index) {
    while(true) {
      var index = _index;
      var first = _first;
      var shifted = _shifted;
      if (index === row.length) {
        return shifted.concat([first]);
      }
      var n = row.at(index);
      var num = n !== undefined ? n : 0;
      if (index === 0) {
        _index = index + 1 | 0;
        _first = num;
        continue ;
      }
      _index = index + 1 | 0;
      _shifted = shifted.concat([num]);
      continue ;
    };
  };
  var cyclicRightShift = function (_shifted, _last, row, _index) {
    while(true) {
      var index = _index;
      var last = _last;
      var shifted = _shifted;
      if (index === row.length) {
        return [last].concat(shifted);
      }
      var n = row.at(index);
      var num = n !== undefined ? n : 0;
      if (index === (row.length - 1 | 0)) {
        _index = index + 1 | 0;
        _last = num;
        continue ;
      }
      _index = index + 1 | 0;
      _shifted = shifted.concat([num]);
      continue ;
    };
  };
  var numberOfRows = matrix.length;
  var arr = matrix.at(0);
  var row = arr !== undefined ? arr : [];
  var numberOfColumns = row.length;
  var cyclicShift = function (_shiftedMatrix, _count, _index) {
    while(true) {
      var index = _index;
      var count = _count;
      var shiftedMatrix = _shiftedMatrix;
      if (count === k) {
        return shiftedMatrix;
      }
      var r = shiftedMatrix.at(index);
      var row = r !== undefined ? r : [];
      var match = (index + 1 | 0) >= row.length ? [
          0,
          count + 1 | 0
        ] : [
          index + 1 | 0,
          count
        ];
      var newCount = match[1];
      var newIdx = match[0];
      var isIndexEven = index % 2.0 === 0.0;
      var replaceRowWithShifted = function (shifted, matrix, index) {
        return matrix.map(function (row, idx) {
                    if (idx === index) {
                      return shifted;
                    } else {
                      return row;
                    }
                  });
      };
      if (isIndexEven) {
        var leftShifted = cyclicLeftShift([], 0, row, 0);
        var replaced = replaceRowWithShifted(leftShifted, shiftedMatrix, index);
        _index = newIdx;
        _count = newCount;
        _shiftedMatrix = replaced;
        continue ;
      }
      var rightShifted = cyclicRightShift([], 0, row, 0);
      var replaced$1 = replaceRowWithShifted(rightShifted, shiftedMatrix, index);
      _index = newIdx;
      _count = newCount;
      _shiftedMatrix = replaced$1;
      continue ;
    };
  };
  var matrix2 = cyclicShift(matrix, 0, 0);
  var rowsEqualSet = new Set();
  var _rowIndex = 0;
  while(true) {
    var rowIndex = _rowIndex;
    if (rowIndex === numberOfRows) {
      if (rowsEqualSet.has(false)) {
        return false;
      } else {
        return true;
      }
    }
    var arr$1 = matrix.at(rowIndex);
    var row1 = arr$1 !== undefined ? arr$1 : [];
    var arr$2 = matrix2.at(rowIndex);
    var row2 = arr$2 !== undefined ? arr$2 : [];
    var columnLoop = function (columnsEqualSet, _columnIndex, row1, row2) {
      while(true) {
        var columnIndex = _columnIndex;
        if (columnIndex === numberOfColumns) {
          if (columnsEqualSet.has(false)) {
            return false;
          } else {
            return true;
          }
        }
        var num = row1.at(columnIndex);
        var num1 = num !== undefined ? num : Int32.min_int;
        var num$1 = row2.at(columnIndex);
        var num2 = num$1 !== undefined ? num$1 : Int32.min_int;
        columnsEqualSet.add(num1 === num2);
        _columnIndex = columnIndex + 1 | 0;
        continue ;
      };
    };
    var areColumnsEqual = columnLoop(new Set(), 0, row1, row2);
    rowsEqualSet.add(areColumnsEqual);
    _rowIndex = rowIndex + 1 | 0;
    continue ;
  };
}

var m1 = [
  [
    1,
    2,
    3
  ],
  [
    4,
    5,
    6
  ],
  [
    7,
    8,
    9
  ]
];

var r1 = matrixSimilarityAfterCyclicShifts(m1, 4);

console.log("r1: ", r1);

var m2 = [
  [
    1,
    2,
    1,
    2
  ],
  [
    5,
    5,
    5,
    5
  ],
  [
    6,
    3,
    6,
    3
  ]
];

var r2 = matrixSimilarityAfterCyclicShifts(m2, 2);

console.log("r2: ", r2);

var m3 = [
  [
    2,
    2
  ],
  [
    2,
    2
  ]
];

var r3 = matrixSimilarityAfterCyclicShifts(m3, 3);

console.log("r3: ", r3);

var k1 = 4;

var k2 = 2;

var k3 = 3;

export {
  matrixSimilarityAfterCyclicShifts ,
  m1 ,
  k1 ,
  r1 ,
  m2 ,
  k2 ,
  r2 ,
  m3 ,
  k3 ,
  r3 ,
}
/* r1 Not a pure module */
