// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core__Array from "@rescript/core/src/Core__Array.res.js";

function minAmountOfTimeToCollectGarbage(garbages, travelTimes) {
  var makeMaxIndexTable = function (table, _index) {
    while(true) {
      var index = _index;
      if (index === garbages.length) {
        return table;
      }
      var s = garbages.at(index);
      var garbage = s !== undefined ? s : String();
      var set = new Set(garbage.split(""));
      if (set.has("G")) {
        table.set("G", index);
      }
      if (set.has("P")) {
        table.set("P", index);
      }
      if (set.has("M")) {
        table.set("M", index);
      }
      _index = index + 1 | 0;
      continue ;
    };
  };
  var maxIndexTable = makeMaxIndexTable(new Map(), 0);
  var collectGarbage = function (_totalTime, truck, _index) {
    while(true) {
      var index = _index;
      var totalTime = _totalTime;
      if (index === garbages.length) {
        return totalTime;
      }
      var s = garbages.at(index);
      var garbage = s !== undefined ? s : String();
      var split = garbage.split("");
      var countTable = Core__Array.reduce(split, new Map(), (function (map, $$char) {
              var c = map.get($$char);
              var count = c !== undefined ? c + 1 | 0 : 1;
              map.set($$char, count);
              return map;
            }));
      var set = new Set(split);
      var t = travelTimes[index - 1 | 0];
      var travelTime = t !== undefined ? t : 0;
      switch (truck) {
        case "G" :
            var i = maxIndexTable.get("G");
            var maxIndex = i !== undefined ? i : -1;
            var c = countTable.get("G");
            var count = c !== undefined ? c : 0;
            if (index > maxIndex) {
              return totalTime;
            }
            if (set.has("G")) {
              _index = index + 1 | 0;
              _totalTime = (totalTime + (count << 0) | 0) + travelTime | 0;
              continue ;
            }
            _index = index + 1 | 0;
            _totalTime = totalTime + travelTime | 0;
            continue ;
        case "P" :
            var i$1 = maxIndexTable.get("P");
            var maxIndex$1 = i$1 !== undefined ? i$1 : -1;
            var c$1 = countTable.get("P");
            var count$1 = c$1 !== undefined ? c$1 : 0;
            if (index > maxIndex$1) {
              return totalTime;
            }
            if (set.has("P")) {
              _index = index + 1 | 0;
              _totalTime = (totalTime + (count$1 << 0) | 0) + travelTime | 0;
              continue ;
            }
            _index = index + 1 | 0;
            _totalTime = totalTime + travelTime | 0;
            continue ;
        case "M" :
            var i$2 = maxIndexTable.get("M");
            var maxIndex$2 = i$2 !== undefined ? i$2 : -1;
            var c$2 = countTable.get("M");
            var count$2 = c$2 !== undefined ? c$2 : 0;
            if (index > maxIndex$2) {
              return totalTime;
            }
            if (set.has("M")) {
              _index = index + 1 | 0;
              _totalTime = (totalTime + (count$2 << 0) | 0) + travelTime | 0;
              continue ;
            }
            _index = index + 1 | 0;
            _totalTime = totalTime + travelTime | 0;
            continue ;
        
      }
    };
  };
  var glassTime = collectGarbage(0, "G", 0);
  var paperTime = collectGarbage(0, "P", 0);
  var metalTime = collectGarbage(0, "M", 0);
  return (glassTime + paperTime | 0) + metalTime | 0;
}

var g1 = [
  "G",
  "P",
  "GP",
  "GG"
];

var t1 = [
  2,
  4,
  3
];

var r1 = minAmountOfTimeToCollectGarbage(g1, t1);

console.log("r1: ", r1);

var g2 = [
  "MMM",
  "PGM",
  "GP"
];

var t2 = [
  3,
  10
];

var r2 = minAmountOfTimeToCollectGarbage(g2, t2);

console.log("r2: ", r2);

export {
  minAmountOfTimeToCollectGarbage ,
  g1 ,
  t1 ,
  r1 ,
  g2 ,
  t2 ,
  r2 ,
}
/* r1 Not a pure module */
