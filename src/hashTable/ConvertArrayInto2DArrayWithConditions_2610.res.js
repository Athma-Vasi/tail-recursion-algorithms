// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml from "rescript/lib/es6/caml.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.js";

function convertArrayInto2DArrayWithConditions(nums) {
  var length = nums.length;
  var makeFreqTable = function (freqTable, _index) {
    while(true) {
      var index = _index;
      if (index === length) {
        return freqTable;
      }
      var n = nums.at(index);
      var num = n !== undefined ? n : 0;
      var f = freqTable.get(num);
      var freq = f !== undefined ? f + 1 | 0 : 1;
      freqTable.set(num, freq);
      _index = index + 1 | 0;
      continue ;
    };
  };
  var freqTable = makeFreqTable(new Map(), 0);
  console.log("freqTable: ", freqTable);
  var r = Array.from(freqTable.values()).toSorted(function (n1, n2) {
          return Caml.int_compare(n2, n1);
        }).at(0);
  var rowsRequired = r !== undefined ? r : 0;
  console.log("rowsRequired: ", rowsRequired);
  var addNumToResultSet = function (resultSet, _isReturn, num, _index) {
    while(true) {
      var index = _index;
      var isReturn = _isReturn;
      if (index === resultSet.length || isReturn) {
        return resultSet;
      }
      var s = resultSet.at(index);
      var set = s !== undefined ? Caml_option.valFromOption(s) : new Set();
      if (set.has(num)) {
        _index = index + 1 | 0;
        continue ;
      }
      console.log("\n");
      console.log("--addNumToResultSet--");
      set.add(num);
      console.log("resultSet before: ", resultSet);
      resultSet[index] = set;
      console.log("index: ", index);
      console.log("num: ", num);
      console.log("set: ", set);
      console.log("resultSet after: ", resultSet);
      console.log("isReturn: ", isReturn);
      _index = index + 1 | 0;
      _isReturn = true;
      continue ;
    };
  };
  var resultSet = Core__Array.make(rowsRequired, new Set());
  console.log("resultSet: ", resultSet);
  var _resultSet = resultSet;
  var _index = 0;
  while(true) {
    var index = _index;
    var resultSet$1 = _resultSet;
    if (index === length) {
      return resultSet$1.map(function (set) {
                  return Array.from(set.values());
                });
    }
    var n = nums.at(index);
    var num = n !== undefined ? n : 0;
    var newResultSet = addNumToResultSet(resultSet$1, false, num, 0);
    console.log("\n");
    console.log("index: ", index);
    console.log("num: ", num);
    console.log("newResultSet: ", newResultSet);
    _index = index + 1 | 0;
    _resultSet = newResultSet;
    continue ;
  };
}

var n1 = [
  1,
  3,
  4,
  1,
  2,
  3,
  1
];

var r1 = convertArrayInto2DArrayWithConditions(n1);

console.log("r1: ", r1);

export {
  convertArrayInto2DArrayWithConditions ,
  n1 ,
  r1 ,
}
/* r1 Not a pure module */
