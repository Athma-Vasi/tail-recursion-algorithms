// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core__Option from "@rescript/core/src/Core__Option.res.js";

function findAndReplacePattern(words, pattern) {
  var _result = [];
  var _wordsIndex = 0;
  while(true) {
    var wordsIndex = _wordsIndex;
    var result = _result;
    if (wordsIndex === words.length) {
      return result;
    }
    var word = Core__Option.getOr(Core__Option.map(words.at(wordsIndex), (function (w) {
                return w;
              })), String());
    var wordLoop = (function(word){
    return function wordLoop(_isPattern, wordToPatternMap, patternToWordMap, _charIndex) {
      while(true) {
        var charIndex = _charIndex;
        var isPattern = _isPattern;
        if (charIndex === word.length) {
          return isPattern;
        }
        var wordChar = word.charAt(charIndex);
        var patternChar = pattern.charAt(charIndex);
        var wordToPatternChar = Core__Option.getOr(Core__Option.map(wordToPatternMap.get(wordChar), (function (c) {
                    return c;
                  })), String());
        var patternToWordChar = Core__Option.getOr(Core__Option.map(patternToWordMap.get(patternChar), (function (c) {
                    return c;
                  })), String());
        if (wordToPatternChar.length === 0 || patternToWordChar.length === 0) {
          _charIndex = charIndex + 1 | 0;
          continue ;
        }
        wordToPatternMap.set(wordChar, patternChar);
        patternToWordMap.set(patternChar, wordChar);
        _charIndex = charIndex + 1 | 0;
        _isPattern = true;
        continue ;
      };
    }
    }(word));
    var isPattern = wordLoop(false, new Map(), new Map(), 0);
    _wordsIndex = wordsIndex + 1 | 0;
    _result = isPattern ? result.concat([word]) : result;
    continue ;
  };
}

var w1 = [
  "abc",
  "deq",
  "mee",
  "aqq",
  "dkd",
  "ccc"
];

var p1 = "abb";

var r1 = findAndReplacePattern(w1, p1);

console.log("r1: ", r1);

var w2 = [
  "a",
  "b",
  "c"
];

var p2 = "a";

var r2 = findAndReplacePattern(w2, p2);

console.log("r2: ", r2);

export {
  findAndReplacePattern ,
  w1 ,
  p1 ,
  r1 ,
  w2 ,
  p2 ,
  r2 ,
}
/* r1 Not a pure module */
