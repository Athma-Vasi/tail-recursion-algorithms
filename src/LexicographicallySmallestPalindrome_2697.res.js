// Generated by ReScript, PLEASE EDIT WITH CARE


function lexicographicallySmallestPalindrome(str) {
  var _palindrome = str;
  var _firstIndex = 0;
  var _lastIndex = str.length - 1 | 0;
  while(true) {
    var lastIndex = _lastIndex;
    var firstIndex = _firstIndex;
    var palindrome = _palindrome;
    if ((lastIndex - firstIndex | 0) < 2) {
      return palindrome;
    }
    var firstChar = palindrome.charAt(firstIndex);
    var lastChar = palindrome.charAt(lastIndex);
    if (firstChar === lastChar) {
      _lastIndex = lastIndex - 1 | 0;
      _firstIndex = firstIndex + 1 | 0;
      continue ;
    }
    var firstCharCode = firstChar.charCodeAt(0);
    var lastCharCode = lastChar.charCodeAt(0);
    if (firstCharCode < lastCharCode) {
      _lastIndex = lastIndex - 1 | 0;
      _firstIndex = firstIndex + 1 | 0;
      _palindrome = palindrome.slice(0, lastIndex).concat(firstChar).concat(palindrome.slice(lastIndex + 1 | 0));
      continue ;
    }
    _lastIndex = lastIndex - 1 | 0;
    _firstIndex = firstIndex + 1 | 0;
    _palindrome = palindrome.slice(0, firstIndex).concat(lastChar).concat(palindrome.slice(firstIndex + 1 | 0));
    continue ;
  };
}

var s1 = "egcfe";

var r1 = lexicographicallySmallestPalindrome(s1);

console.log("r1: ", r1);

var s2 = "abcd";

var r2 = lexicographicallySmallestPalindrome(s2);

console.log("r2: ", r2);

var s3 = "seven";

var r3 = lexicographicallySmallestPalindrome(s3);

console.log("r3: ", r3);

export {
  lexicographicallySmallestPalindrome ,
  s1 ,
  r1 ,
  s2 ,
  r2 ,
  s3 ,
  r3 ,
}
/* r1 Not a pure module */
