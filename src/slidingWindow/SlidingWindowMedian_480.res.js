// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Int32 from "rescript/lib/es6/int32.js";

function slidingWindowMedian(numbers, windowSize) {
  var length = numbers.length;
  var _medianArrays = [];
  var _leftIndex = 0;
  var _rightIndex = windowSize - 1 | 0;
  while(true) {
    var rightIndex = _rightIndex;
    var leftIndex = _leftIndex;
    var medianArrays = _medianArrays;
    if (rightIndex === length) {
      return medianArrays;
    }
    var slicedWindow = numbers.slice(leftIndex, rightIndex + 1 | 0);
    slicedWindow.sort(function (a, b) {
          return a - b | 0;
        });
    var isWindowSizeEven = windowSize % 2.0 === 0.0;
    if (isWindowSizeEven) {
      var rightMedianIndex = windowSize / 2.0 | 0;
      var num = slicedWindow[rightMedianIndex];
      var rightMedianNumber = num !== undefined ? num : Int32.min_int;
      var leftMedianIndex = rightMedianIndex - 1 | 0;
      var num$1 = slicedWindow[leftMedianIndex];
      var leftMedianNumber = num$1 !== undefined ? num$1 : Int32.min_int;
      var averageMedianNumber = (leftMedianNumber + rightMedianNumber | 0) / 2.0;
      _rightIndex = rightIndex + 1 | 0;
      _leftIndex = leftIndex + 1 | 0;
      _medianArrays = medianArrays.concat([averageMedianNumber]);
      continue ;
    }
    var medianIndex = Math.floor(windowSize / 2.0) | 0;
    var num$2 = slicedWindow[medianIndex];
    var medianNumber = num$2 !== undefined ? num$2 : Int32.min_int;
    _rightIndex = rightIndex + 1 | 0;
    _leftIndex = leftIndex + 1 | 0;
    _medianArrays = medianArrays.concat([medianNumber]);
    continue ;
  };
}

var n1 = [
  1,
  3,
  -1,
  -3,
  5,
  3,
  6,
  7
];

var r1 = slidingWindowMedian(n1, 3);

console.log("r1", r1);

var n2 = [
  1,
  2,
  3,
  4,
  2,
  3,
  1,
  4,
  2
];

var r2 = slidingWindowMedian(n2, 3);

console.log("r2", r2);

var w1 = 3;

var w2 = 3;

export {
  slidingWindowMedian ,
  n1 ,
  w1 ,
  r1 ,
  n2 ,
  w2 ,
  r2 ,
}
/* r1 Not a pure module */
