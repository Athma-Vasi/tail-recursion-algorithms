// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Int32 from "rescript/lib/es6/int32.js";
import * as Caml_int32 from "rescript/lib/es6/caml_int32.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.js";

function maxAverageSubarray_I(nums, k) {
  var expandWindow = function (_window, _index) {
    while(true) {
      var index = _index;
      var $$window = _window;
      if (index === k) {
        return $$window;
      }
      var n = nums.at(index);
      var num = n !== undefined ? n : Int32.min_int;
      _index = index + 1 | 0;
      _window = $$window.concat([num]);
      continue ;
    };
  };
  var initialWindow = expandWindow([], 0);
  var sum = Core__Array.reduce(initialWindow, 0, (function (total, num) {
          return total + num | 0;
        }));
  var average = Caml_int32.div(sum, k);
  if (nums.length <= k) {
    return Caml_int32.div(sum, k);
  } else {
    var _maxAverage = average;
    var _sum = sum;
    var _leftIndex = 0;
    var _rightIndex = k - 1 | 0;
    while(true) {
      var rightIndex = _rightIndex;
      var leftIndex = _leftIndex;
      var sum$1 = _sum;
      var maxAverage = _maxAverage;
      if (rightIndex === nums.length) {
        return maxAverage;
      }
      var n = nums.at(leftIndex);
      var leftExcludedNum = n !== undefined ? n : Int32.min_int;
      var n$1 = nums.at(rightIndex + 1 | 0);
      var rightIncludedNum = n$1 !== undefined ? n$1 : Int32.max_int;
      var newSum = (sum$1 - leftExcludedNum | 0) + rightIncludedNum | 0;
      var newAverage = Caml_int32.div(newSum, k);
      _rightIndex = rightIndex + 1 | 0;
      _leftIndex = leftIndex + 1 | 0;
      _sum = newSum;
      _maxAverage = maxAverage > newAverage ? maxAverage : newAverage;
      continue ;
    };
  }
}

var n1 = [
  1,
  12,
  -5,
  -6,
  50,
  3
];

var r1 = maxAverageSubarray_I(n1, 4);

console.log("r1: ", r1);

var n2 = [5];

var r2 = maxAverageSubarray_I(n2, 1);

console.log("r2: ", r2);

var k1 = 4;

var k2 = 1;

export {
  maxAverageSubarray_I ,
  n1 ,
  k1 ,
  r1 ,
  n2 ,
  k2 ,
  r2 ,
}
/* r1 Not a pure module */
