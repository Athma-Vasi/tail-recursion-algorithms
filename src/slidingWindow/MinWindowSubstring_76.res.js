// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core__Array from "@rescript/core/src/Core__Array.res.js";

function minWindowSubstring(str, subString) {
  var stringLength = str.length;
  var subStringTable = Core__Array.reduce(subString.split(""), new Map(), (function (acc, $$char) {
          var $$char$1 = acc.get($$char);
          var existingCount = $$char$1 !== undefined ? $$char$1 : 0;
          acc.set($$char, existingCount + 1 | 0);
          return acc;
        }));
  var $$char = str[0];
  var firstChar = $$char !== undefined ? $$char : "";
  if (subStringTable.has(firstChar)) {
    var count = subStringTable.get(firstChar);
    var existingCount = count !== undefined ? count : 0;
    subStringTable.set(firstChar, existingCount - 1 | 0);
  }
  var $$char$1 = str[1];
  var secondChar = $$char$1 !== undefined ? $$char$1 : "";
  if (subStringTable.has(secondChar)) {
    var count$1 = subStringTable.get(secondChar);
    var existingCount$1 = count$1 !== undefined ? count$1 : 0;
    subStringTable.set(secondChar, existingCount$1 - 1 | 0);
  }
  var _result = str + subString;
  var _subStringTable = subStringTable;
  var _lowIndex = 0;
  var _highIndex = 2;
  while(true) {
    var highIndex = _highIndex;
    var lowIndex = _lowIndex;
    var subStringTable$1 = _subStringTable;
    var result = _result;
    var counts = Core__Array.reduce(Array.from(subStringTable$1.entries()), 0, (function (acc, param) {
            return acc + param[1] | 0;
          }));
    if (highIndex === stringLength) {
      if (counts !== 0) {
        return result;
      }
      var newResultLength = (highIndex + 1 | 0) - lowIndex | 0;
      var prevResultLength = result.length;
      if (newResultLength < prevResultLength) {
        return str.slice(lowIndex, highIndex);
      } else {
        return result;
      }
    }
    if (lowIndex === highIndex) {
      _highIndex = highIndex + 1 | 0;
      continue ;
    }
    if (counts === 0) {
      var initialSubStringTable = Core__Array.reduce(subString.split(""), new Map(), (function (acc, $$char) {
              var $$char$1 = acc.get($$char);
              var existingCount = $$char$1 !== undefined ? $$char$1 : 0;
              acc.set($$char, existingCount + 1 | 0);
              return acc;
            }));
      var $$char$2 = str[highIndex];
      var newLowChar = $$char$2 !== undefined ? $$char$2 : "";
      if (subStringTable$1.has(newLowChar)) {
        var count$2 = subStringTable$1.get(newLowChar);
        var existingCount$2 = count$2 !== undefined ? count$2 : 0;
        subStringTable$1.set(newLowChar, existingCount$2 - 1 | 0);
      }
      var newHighIndex = highIndex + 1 | 0;
      var $$char$3 = str[newHighIndex];
      var newHighChar = $$char$3 !== undefined ? $$char$3 : "";
      if (subStringTable$1.has(newHighChar)) {
        var count$3 = subStringTable$1.get(newHighChar);
        var existingCount$3 = count$3 !== undefined ? count$3 : 0;
        subStringTable$1.set(newHighChar, existingCount$3 - 1 | 0);
      }
      var newResultLength$1 = highIndex - lowIndex | 0;
      var prevResultLength$1 = result.length;
      if (newResultLength$1 < prevResultLength$1) {
        var newResult = str.slice(lowIndex, highIndex);
        _highIndex = newHighIndex;
        _lowIndex = highIndex;
        _subStringTable = initialSubStringTable;
        _result = newResult;
        continue ;
      }
      _highIndex = newHighIndex;
      _lowIndex = highIndex;
      _subStringTable = initialSubStringTable;
      continue ;
    }
    if (counts === subString.length) {
      var $$char$4 = str[lowIndex + 1 | 0];
      var newLowChar$1 = $$char$4 !== undefined ? $$char$4 : "";
      if (subStringTable$1.has(newLowChar$1)) {
        var count$4 = subStringTable$1.get(newLowChar$1);
        var existingCount$4 = count$4 !== undefined ? count$4 : 0;
        subStringTable$1.set(newLowChar$1, existingCount$4 - 1 | 0);
      }
      var newHighIndex$1 = highIndex + 1 | 0;
      var $$char$5 = str[newHighIndex$1];
      var newHighChar$1 = $$char$5 !== undefined ? $$char$5 : "";
      var newLowIndex;
      if (subStringTable$1.has(newHighChar$1)) {
        var count$5 = subStringTable$1.get(newHighChar$1);
        var existingCount$5 = count$5 !== undefined ? count$5 : 0;
        subStringTable$1.set(newHighChar$1, existingCount$5 - 1 | 0);
        newLowIndex = newHighIndex$1;
      } else {
        newLowIndex = lowIndex + 1 | 0;
      }
      _highIndex = newHighIndex$1;
      _lowIndex = newLowIndex;
      continue ;
    }
    var $$char$6 = str[highIndex];
    var highChar = $$char$6 !== undefined ? $$char$6 : "";
    if (subStringTable$1.has(highChar)) {
      var count$6 = subStringTable$1.get(highChar);
      var existingCount$6 = count$6 !== undefined ? count$6 : 0;
      subStringTable$1.set(highChar, existingCount$6 - 1 | 0);
    }
    _highIndex = highIndex + 1 | 0;
    continue ;
  };
}

var s1 = "ADOBECODEBANC";

var t1 = "ABC";

var r1 = minWindowSubstring(s1, t1);

console.log("ADOBECODEBANC ABC", r1);

export {
  minWindowSubstring ,
  s1 ,
  t1 ,
  r1 ,
}
/* r1 Not a pure module */
