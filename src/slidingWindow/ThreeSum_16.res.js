// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Int32 from "rescript/lib/es6/int32.js";

function threeSum16(nums, target) {
  var length = nums.length;
  var clone = nums.map(function (num) {
        return num;
      });
  clone.sort(function (a, b) {
        return a - b | 0;
      });
  var _closest = Int32.max_int;
  var _anchorIndex = 0;
  while(true) {
    var anchorIndex = _anchorIndex;
    var closest = _closest;
    var num = clone[anchorIndex];
    var currentAnchor = num !== undefined ? num : Int32.min_int;
    var explorersLoop = (function(currentAnchor){
    return function explorersLoop(_tempClosest, _lowIndex, _highIndex) {
      while(true) {
        var highIndex = _highIndex;
        var lowIndex = _lowIndex;
        var tempClosest = _tempClosest;
        var num = clone[lowIndex];
        var lowExplorer = num !== undefined ? num : Int32.min_int;
        var num$1 = clone[highIndex];
        var highExplorer = num$1 !== undefined ? num$1 : Int32.min_int;
        var sum = (currentAnchor + lowExplorer | 0) + highExplorer | 0;
        var newDelta = Math.abs(target - sum | 0) | 0;
        var newClosest = Math.min(tempClosest, newDelta) | 0;
        if (lowIndex === highIndex || lowIndex === length || highIndex === 0 || lowIndex > highIndex) {
          return tempClosest;
        }
        if (newClosest === target) {
          return newClosest;
        }
        if (newClosest < tempClosest) {
          _lowIndex = lowIndex + 1 | 0;
          _tempClosest = newClosest;
          continue ;
        }
        _highIndex = highIndex - 1 | 0;
        _tempClosest = newClosest;
        continue ;
      };
    }
    }(currentAnchor));
    var newClosest = explorersLoop(closest, anchorIndex + 1 | 0, length - 1 | 0);
    if (newClosest === target) {
      return newClosest;
    }
    _anchorIndex = anchorIndex + 1 | 0;
    _closest = newClosest;
    continue ;
  };
}

var n1 = [
  -1,
  2,
  1,
  -4
];

var r1 = threeSum16(n1, 1);

console.log("[-1,2,1,-4]", r1);

export {
  threeSum16 ,
  n1 ,
  r1 ,
}
/* r1 Not a pure module */
