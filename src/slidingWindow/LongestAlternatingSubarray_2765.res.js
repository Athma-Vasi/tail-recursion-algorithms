// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core__Option from "@rescript/core/src/Core__Option.res.js";

function longestAlternatingSubarray(nums) {
  var first = Core__Option.mapOr(nums.at(0), 0, (function (n) {
          return n;
        }));
  var second = Core__Option.mapOr(nums.at(1), 0, (function (n) {
          return n;
        }));
  var _subarrays = [];
  var _stack = (second - first | 0) === -1 || (second - first | 0) === 1 ? [
      first,
      second
    ] : [second];
  var _change = (second - first | 0) === -1 ? "Trough" : (
      (second - first | 0) === 1 ? "Peak" : "Flat"
    );
  var _leftIndex = (second - first | 0) === -1 || (second - first | 0) === 1 ? 0 : 1;
  var _rightIndex = 2;
  while(true) {
    var rightIndex = _rightIndex;
    var leftIndex = _leftIndex;
    var change = _change;
    var stack = _stack;
    var subarrays = _subarrays;
    if (rightIndex >= nums.length) {
      return subarrays;
    }
    if (leftIndex === rightIndex) {
      _rightIndex = rightIndex + 1 | 0;
      continue ;
    }
    var rightNum = Core__Option.mapOr(nums.at(rightIndex), 0, (function (n) {
            return n;
          }));
    var prevNum = Core__Option.mapOr(stack.at(-1), 0, (function (n) {
            return n;
          }));
    switch (change) {
      case "Peak" :
          if ((rightNum - prevNum | 0) === -1) {
            _rightIndex = rightIndex + 1 | 0;
            _change = "Trough";
            _stack = stack.concat([rightNum]);
            continue ;
          }
          _leftIndex = rightIndex - 1 | 0;
          _change = "Peak";
          _stack = [prevNum];
          _subarrays = subarrays.concat([stack]);
          continue ;
      case "Trough" :
          if ((rightNum - prevNum | 0) === 1) {
            _rightIndex = rightIndex + 1 | 0;
            _change = "Peak";
            _stack = stack.concat([rightNum]);
            continue ;
          }
          _leftIndex = rightIndex - 1 | 0;
          _change = "Trough";
          _stack = [prevNum];
          _subarrays = subarrays.concat([stack]);
          continue ;
      case "Flat" :
          var first$1 = Core__Option.mapOr(nums.at(rightIndex), 0, (function (n) {
                  return n;
                }));
          var second$1 = Core__Option.mapOr(nums.at(rightIndex + 1 | 0), 0, (function (n) {
                  return n;
                }));
          if ((second$1 - first$1 | 0) === 1) {
            _rightIndex = rightIndex + 2 | 0;
            _leftIndex = rightIndex + 1 | 0;
            _change = "Peak";
            _stack = [
              first$1,
              second$1
            ];
            continue ;
          }
          if ((second$1 - first$1 | 0) === -1) {
            _rightIndex = rightIndex + 2 | 0;
            _leftIndex = rightIndex + 1 | 0;
            _change = "Trough";
            _stack = [
              first$1,
              second$1
            ];
            continue ;
          }
          _rightIndex = rightIndex + 3 | 0;
          _leftIndex = rightIndex + 2 | 0;
          _change = "Flat";
          _stack = [];
          continue ;
      
    }
  };
}

var n1 = [
  2,
  3,
  4,
  3,
  4
];

var r1 = longestAlternatingSubarray(n1);

console.log("r1: ", r1);

export {
  longestAlternatingSubarray ,
  n1 ,
  r1 ,
}
/* r1 Not a pure module */
