// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core__Array from "@rescript/core/src/Core__Array.res.js";
import * as Core__Option from "@rescript/core/src/Core__Option.res.js";

function removeAllOccurrencesOfASubstring(str, substr) {
  var makeSubstrFreqTable = function (substr) {
    return Core__Array.reduce(substr.split(""), new Map(), (function (map, $$char) {
                  map.set($$char, 0);
                  return map;
                }));
  };
  var expandWindow = function (freqTable, sliced, _index) {
    while(true) {
      var index = _index;
      if (index === substr.length) {
        return freqTable;
      }
      var $$char = sliced.charAt(index);
      if (freqTable.has($$char)) {
        var freq = Core__Option.getOr(Core__Option.map(freqTable.get($$char), (function (f) {
                    return f + 1 | 0;
                  })), 1);
        freqTable.set($$char, freq);
      }
      _index = index + 1 | 0;
      continue ;
    };
  };
  var substrLength = substr.length;
  var checkIfSubstrPresent = function (freqTable) {
    var match = Core__Array.reduce(Array.from(freqTable.entries()), [
          0,
          0
        ], (function (acc, entry) {
            var charsCount = acc[1];
            var chars = acc[0];
            if (entry[1] === 1) {
              return [
                      chars + 1 | 0,
                      charsCount + 1 | 0
                    ];
            } else {
              return [
                      chars + 1 | 0,
                      charsCount
                    ];
            }
          }));
    if (match[0] === substrLength) {
      return match[1] === substrLength;
    } else {
      return false;
    }
  };
  var freqTable = expandWindow(makeSubstrFreqTable(substr), str, 0);
  var _result = str;
  var _freqTable = freqTable;
  var _leftIndex = 0;
  var _rightIndex = substrLength - 1 | 0;
  while(true) {
    var rightIndex = _rightIndex;
    var leftIndex = _leftIndex;
    var freqTable$1 = _freqTable;
    var result = _result;
    if (rightIndex === result.length) {
      return result;
    }
    var leftExcludedChar = result.charAt(leftIndex);
    var rightIncludedChar = result.charAt(rightIndex + 1 | 0);
    var f = freqTable$1.get(leftExcludedChar);
    var leftFreq = f !== undefined ? f - 1 | 0 : -1;
    if (leftFreq >= 0) {
      freqTable$1.set(leftExcludedChar, leftFreq);
    }
    var f$1 = freqTable$1.get(rightIncludedChar);
    var rightFreq = f$1 !== undefined ? f$1 + 1 | 0 : -1;
    if (rightFreq >= 0) {
      freqTable$1.set(rightIncludedChar, rightFreq);
    }
    var isSubstrPresent = checkIfSubstrPresent(freqTable$1);
    if (isSubstrPresent) {
      var sliced = result.slice(0, leftIndex + 1 | 0).concat(result.slice(rightIndex + 2 | 0));
      var newFreqTable = expandWindow(makeSubstrFreqTable(substr), sliced, 0);
      _rightIndex = substrLength - 1 | 0;
      _leftIndex = 0;
      _freqTable = newFreqTable;
      _result = sliced;
      continue ;
    }
    _rightIndex = rightIndex + 1 | 0;
    _leftIndex = leftIndex + 1 | 0;
    continue ;
  };
}

var s1 = "daabcbaabcbc";

var s11 = "abc";

var r1 = removeAllOccurrencesOfASubstring(s1, s11);

console.log("r1: ", r1);

var s2 = "axxxxyyyyb";

var s22 = "xy";

var r2 = removeAllOccurrencesOfASubstring(s2, s22);

console.log("r2: ", r2);

export {
  removeAllOccurrencesOfASubstring ,
  s1 ,
  s11 ,
  r1 ,
  s2 ,
  s22 ,
  r2 ,
}
/* r1 Not a pure module */
