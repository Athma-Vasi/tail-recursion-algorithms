// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Int32 from "rescript/lib/es6/int32.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.js";

function maxLengthSubstringWithTwoOccurrences(str) {
  var uniqueChars = Core__Array.reduce(str.split(""), new Set(), (function (set, $$char) {
          set.add($$char);
          return set;
        }));
  var uniqueCharsAmount = uniqueChars.size;
  var checkOccurrenceOverTwo = function (freqTable) {
    return Core__Array.reduce(Array.from(freqTable.values()), new Set(), (function (set, count) {
                    set.add(count > 2);
                    return set;
                  })).has(true);
  };
  var checkEveryCharPresent = function (freqTable) {
    var match = Core__Array.reduce(Array.from(freqTable.values()), [
          0,
          0
        ], (function (acc, count) {
            var chars = acc[0];
            return [
                    count > 0 ? chars + 1 | 0 : chars,
                    acc[1] + count | 0
                  ];
          }));
    if (match[0] === uniqueCharsAmount) {
      return match[1] >= uniqueCharsAmount;
    } else {
      return false;
    }
  };
  var firstChar = str.charAt(0);
  var freqTable = new Map();
  freqTable.set(firstChar, 1);
  var _maxLength = Int32.min_int;
  var _leftIndex = 0;
  var _rightIndex = 1;
  while(true) {
    var rightIndex = _rightIndex;
    var leftIndex = _leftIndex;
    var maxLength = _maxLength;
    if (rightIndex === str.length) {
      return maxLength;
    }
    if (leftIndex === rightIndex) {
      _rightIndex = rightIndex + 1 | 0;
      continue ;
    }
    var rightChar = str.charAt(rightIndex);
    var c = freqTable.get(rightChar);
    var existingCount = c !== undefined ? c : 0;
    freqTable.set(rightChar, existingCount + 1 | 0);
    var windowSize = (rightIndex - leftIndex | 0) + 1 | 0;
    var newMaxLength = maxLength > windowSize ? maxLength : windowSize;
    var isEveryCharCorrect = checkEveryCharPresent(freqTable);
    var isOccurrenceOverTwo = checkOccurrenceOverTwo(freqTable);
    if (isOccurrenceOverTwo) {
      var leftChar = str.charAt(leftIndex);
      var c$1 = freqTable.get(leftChar);
      var existingCount$1 = c$1 !== undefined ? c$1 : 0;
      freqTable.set(leftChar, existingCount$1 - 1 | 0);
      _leftIndex = leftIndex + 1 | 0;
      continue ;
    }
    if (isEveryCharCorrect) {
      _rightIndex = rightIndex + 1 | 0;
      _maxLength = newMaxLength;
      continue ;
    }
    _rightIndex = rightIndex + 1 | 0;
    continue ;
  };
}

var s1 = "bcbbbcba";

var r1 = maxLengthSubstringWithTwoOccurrences(s1);

console.log("r1: ", r1);

var s2 = "aaaa";

var r2 = maxLengthSubstringWithTwoOccurrences(s2);

console.log("r2: ", r2);

export {
  maxLengthSubstringWithTwoOccurrences ,
  s1 ,
  r1 ,
  s2 ,
  r2 ,
}
/* r1 Not a pure module */
