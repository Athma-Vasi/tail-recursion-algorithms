// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Int32 from "rescript/lib/es6/int32.js";

function maxConsecutiveOnesII(binaryArray) {
  var length = binaryArray.length;
  var maxLength = Int32.min_int;
  var _counter = 0;
  var _lowIndex = 0;
  var _highIndex = 1;
  while(true) {
    var highIndex = _highIndex;
    var lowIndex = _lowIndex;
    var counter = _counter;
    var b = binaryArray[highIndex];
    var highBinary = b !== undefined ? b : 0;
    var diff = highIndex - lowIndex | 0;
    var newMaxLength = maxLength > diff ? maxLength : diff;
    if (highIndex === length) {
      return newMaxLength;
    }
    if (highBinary === 0) {
      if (counter > 1) {
        var inner = (function(highIndex){
        return function inner(_counter, _lowIndexInner) {
          while(true) {
            var lowIndexInner = _lowIndexInner;
            var counter = _counter;
            var b = binaryArray[lowIndexInner];
            var lowBinary = b !== undefined ? b : 0;
            if (lowIndexInner === highIndex || lowBinary === 0) {
              return [
                      counter,
                      lowIndexInner
                    ];
            }
            _lowIndexInner = lowIndexInner + 1 | 0;
            _counter = counter - 1 | 0;
            continue ;
          };
        }
        }(highIndex));
        var match = inner(counter, lowIndex);
        _lowIndex = match[1] + 1 | 0;
        _counter = match[0];
        continue ;
      }
      _highIndex = highIndex + 1 | 0;
      _counter = counter + 1 | 0;
      continue ;
    }
    _highIndex = highIndex + 1 | 0;
    _counter = counter + 1 | 0;
    continue ;
  };
}

var n1 = [
  1,
  0,
  1,
  10
];

var r1 = maxConsecutiveOnesII(n1);

console.log("[1,0,1,10]", r1);

export {
  maxConsecutiveOnesII ,
  n1 ,
  r1 ,
}
/* r1 Not a pure module */
