// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core__Array from "@rescript/core/src/Core__Array.res.js";

function permutationInString(subString, str) {
  var stringLength = str.length;
  var subStringTable = Core__Array.reduce(subString.split(""), new Map(), (function (acc, $$char) {
          var $$char$1 = acc.get($$char);
          var existingCount = $$char$1 !== undefined ? $$char$1 : 0;
          acc.set($$char, existingCount + 1 | 0);
          return acc;
        }));
  var initializeLoop = function (subStringTable, _highIndex) {
    while(true) {
      var highIndex = _highIndex;
      if (highIndex === subStringTable.size) {
        return [
                subStringTable,
                highIndex
              ];
      }
      var $$char = str[highIndex];
      var highChar = $$char !== undefined ? $$char : "";
      if (subStringTable.has(highChar)) {
        var count = subStringTable.get(highChar);
        var existingCount = count !== undefined ? count : 0;
        subStringTable.set(highChar, existingCount - 1 | 0);
      }
      _highIndex = highIndex + 1 | 0;
      continue ;
    };
  };
  var match = initializeLoop(subStringTable, 1);
  var _lowIndex = 0;
  var _highIndex = match[1];
  while(true) {
    var highIndex = _highIndex;
    var lowIndex = _lowIndex;
    var counts = Core__Array.reduce(Array.from(subStringTable.entries()), 0, (function (acc, param) {
            return acc + param[1] | 0;
          }));
    if (highIndex === stringLength) {
      return counts === 0;
    }
    if (counts === 0) {
      return true;
    }
    var $$char = str[lowIndex];
    var lowChar = $$char !== undefined ? $$char : "";
    if (subStringTable.has(lowChar)) {
      var count = subStringTable.get(lowChar);
      var existingCount = count !== undefined ? count : 0;
      subStringTable.set(lowChar, existingCount - 1 | 0);
    }
    var $$char$1 = str[highIndex];
    var highChar = $$char$1 !== undefined ? $$char$1 : "";
    if (subStringTable.has(highChar)) {
      var count$1 = subStringTable.get(highChar);
      var existingCount$1 = count$1 !== undefined ? count$1 : 0;
      subStringTable.set(highChar, existingCount$1 - 1 | 0);
    }
    _highIndex = highIndex + 1 | 0;
    _lowIndex = lowIndex + 1 | 0;
    continue ;
  };
}

var s1 = "ab";

var s11 = "eidbaooo";

var r1 = permutationInString(s1, s11);

console.log("ab eidbaooo", r1);

var s2 = "ab";

var s22 = "eidboaoo";

var r2 = permutationInString(s2, s22);

console.log("ab eidboaoo", r2);

export {
  permutationInString ,
  s1 ,
  s11 ,
  r1 ,
  s2 ,
  s22 ,
  r2 ,
}
/* r1 Not a pure module */
