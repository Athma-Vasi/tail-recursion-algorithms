// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core__Array from "@rescript/core/src/Core__Array.res.js";

function firstOccurrenceIndex(haystack, needle) {
  var haystackLength = haystack.length;
  var needleLength = needle.length;
  var needleCountTable = Core__Array.reduce(needle.split(""), new Map(), (function (acc, $$char) {
          var $$char$1 = acc.get($$char);
          var existingCount = $$char$1 !== undefined ? $$char$1 : 0;
          acc.set($$char, existingCount + 1 | 0);
          return acc;
        }));
  var expandWindow = function (needleCountTable, _index) {
    while(true) {
      var index = _index;
      if (index === needleLength) {
        return needleCountTable;
      }
      var $$char = haystack[index];
      var hayChar = $$char !== undefined ? $$char : "";
      if (needleCountTable.has(hayChar)) {
        var count = needleCountTable.get(hayChar);
        var existingCount = count !== undefined ? count : 0;
        needleCountTable.set(hayChar, existingCount - 1 | 0);
      }
      _index = index + 1 | 0;
      continue ;
    };
  };
  var _occurrences = [];
  var needleCountTable$1 = expandWindow(needleCountTable, 0);
  var _leftIndex = 1;
  var _rightIndex = needleLength;
  while(true) {
    var rightIndex = _rightIndex;
    var leftIndex = _leftIndex;
    var occurrences = _occurrences;
    var needleCounts = Core__Array.reduce(Array.from(needleCountTable$1.entries()), 0, (function (acc, param) {
            return acc + param[1] | 0;
          }));
    var updatedOccurrences = needleCounts === 0 ? occurrences.concat([leftIndex - 1 | 0]) : occurrences;
    if (rightIndex === haystackLength) {
      var num = updatedOccurrences[0];
      if (num !== undefined) {
        return num;
      } else {
        return -1;
      }
    }
    var $$char = haystack[leftIndex - 1 | 0];
    var leftExcludedChar = $$char !== undefined ? $$char : "";
    if (needleCountTable$1.has(leftExcludedChar)) {
      var count = needleCountTable$1.get(leftExcludedChar);
      var existingCount = count !== undefined ? count : 0;
      needleCountTable$1.set(leftExcludedChar, existingCount + 1 | 0);
    }
    var $$char$1 = haystack[rightIndex];
    var rightIncludedChar = $$char$1 !== undefined ? $$char$1 : "";
    if (needleCountTable$1.has(rightIncludedChar)) {
      var count$1 = needleCountTable$1.get(rightIncludedChar);
      var existingCount$1 = count$1 !== undefined ? count$1 : 0;
      needleCountTable$1.set(rightIncludedChar, existingCount$1 - 1 | 0);
    }
    _rightIndex = rightIndex + 1 | 0;
    _leftIndex = leftIndex + 1 | 0;
    _occurrences = updatedOccurrences;
    continue ;
  };
}

var h1 = "sadbutsad";

var n1 = "sad";

var r1 = firstOccurrenceIndex(h1, n1);

console.log("r1: ", r1);

var h2 = "leetcode";

var n2 = "leeta";

var r2 = firstOccurrenceIndex(h2, n2);

console.log("r2: ", r2);

export {
  firstOccurrenceIndex ,
  h1 ,
  n1 ,
  r1 ,
  h2 ,
  n2 ,
  r2 ,
}
/* r1 Not a pure module */
