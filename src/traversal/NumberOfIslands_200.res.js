// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core__Option from "@rescript/core/src/Core__Option.res.js";

function numberOfIslandsDFS(grid) {
  var maxRows = grid.length;
  var row = Core__Option.getOr(Core__Option.map(grid.at(0), (function (r) {
              return r;
            })), []);
  var maxColumns = row.length;
  var depthFirstSearch = function (matrix, _direction, start, _current, _stop) {
    while(true) {
      var stop = _stop;
      var current = _current;
      var direction = _direction;
      if (stop) {
        return matrix;
      }
      var currColumnIndex = current[1];
      var currRowIndex = current[0];
      var startColumnIndex = start[1];
      Core__Option.getOr(Core__Option.flatMap(matrix.at(currRowIndex), (function(currColumnIndex){
              return function (row) {
                return row.at(currColumnIndex);
              }
              }(currColumnIndex))), 0);
      console.log("\n");
      console.log("--depthFirstSearch--");
      console.log("matrix: ", matrix);
      console.log("direction: ", direction);
      console.log("start: ", start);
      console.log("current: ", current);
      console.log("stop: ", stop);
      switch (direction) {
        case "Up" :
            if (currRowIndex < 0) {
              _current = start;
              _direction = "Right";
              continue ;
            }
            console.log("\n");
            console.log("--Up--");
            console.log("matrix: ", matrix);
            _current = [
              currRowIndex - 1 | 0,
              currColumnIndex
            ];
            continue ;
        case "Right" :
            if (currColumnIndex > maxColumns) {
              _current = start;
              _direction = "Down";
              continue ;
            }
            console.log("\n");
            console.log("--Right--");
            console.log("matrix: ", matrix);
            _current = [
              currRowIndex,
              currColumnIndex + 1 | 0
            ];
            continue ;
        case "Down" :
            if (currRowIndex > maxRows) {
              _current = start;
              _direction = "Left";
              continue ;
            }
            console.log("\n");
            console.log("--Down--");
            console.log("matrix: ", matrix);
            _current = [
              currRowIndex + 1 | 0,
              currColumnIndex
            ];
            continue ;
        case "Left" :
            if (currColumnIndex < 0) {
              Core__Option.forEach(matrix.at(start[0]), (function(startColumnIndex){
                  return function (row) {
                    row[startColumnIndex] = 0;
                  }
                  }(startColumnIndex)));
              _stop = true;
              _current = start;
              _direction = "Right";
              continue ;
            }
            console.log("\n");
            console.log("--Left--");
            console.log("matrix: ", matrix);
            _current = [
              currRowIndex,
              currColumnIndex - 1 | 0
            ];
            continue ;
        
      }
    };
  };
  var _count = 0;
  var _rowIndex = 0;
  while(true) {
    var rowIndex = _rowIndex;
    var count = _count;
    if (rowIndex === maxRows) {
      return count;
    }
    var row$1 = Core__Option.getOr(Core__Option.map(grid.at(rowIndex), (function (r) {
                return r;
              })), []);
    console.log("\n");
    console.log("--rowLoop--");
    console.log("row: ", row$1);
    console.log("rowIndex: ", rowIndex);
    console.log("count: ", count);
    var columnLoop = (function(rowIndex,row$1){
    return function columnLoop(_columnCount, _modifiedGrid, _columnIndex) {
      while(true) {
        var columnIndex = _columnIndex;
        var modifiedGrid = _modifiedGrid;
        var columnCount = _columnCount;
        if (columnIndex === maxColumns) {
          return columnCount;
        }
        var cell = Core__Option.getOr(Core__Option.map(row$1.at(columnIndex), (function (c) {
                    return c;
                  })), 0);
        var start = [
          rowIndex,
          columnIndex
        ];
        console.log("\n");
        console.log("--columnLoop--");
        console.log("columnCount: ", columnCount);
        console.log("cell: ", cell);
        console.log("columnIndex: ", columnIndex);
        if (cell !== 1) {
          _columnIndex = columnIndex + 1 | 0;
          _modifiedGrid = grid;
          continue ;
        }
        var modifiedGrid_ = depthFirstSearch(modifiedGrid, "Up", start, start, false);
        console.log("modifiedGrid_: ", modifiedGrid_);
        _columnIndex = columnIndex + 1 | 0;
        _modifiedGrid = modifiedGrid_;
        _columnCount = columnCount + 1 | 0;
        continue ;
      };
    }
    }(rowIndex,row$1));
    var columnCount = columnLoop(count, grid, 0);
    _rowIndex = rowIndex + 1 | 0;
    _count = columnCount;
    continue ;
  };
}

var g1 = [
  [
    1,
    1,
    1,
    1,
    0
  ],
  [
    1,
    1,
    0,
    1,
    0
  ],
  [
    1,
    1,
    0,
    0,
    0
  ],
  [
    0,
    0,
    0,
    0,
    0
  ]
];

var r1 = numberOfIslandsDFS(g1);

console.log("r1: ", r1);

export {
  numberOfIslandsDFS ,
  g1 ,
  r1 ,
}
/* r1 Not a pure module */
