// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Int32 from "rescript/lib/es6/int32.js";

function minimumSumOfMountainTriplets_I(nums) {
  var length = nums.length;
  var leftSideLoop = function (_minSum, _leftSideIdx) {
    while(true) {
      var leftSideIdx = _leftSideIdx;
      var minSum = _minSum;
      if (leftSideIdx === length) {
        return minSum;
      }
      var n = nums.at(leftSideIdx);
      var leftSide = n !== undefined ? n : 0;
      var peakLoop = (function(leftSide){
      return function peakLoop(_minSum_, _peakIdx) {
        while(true) {
          var peakIdx = _peakIdx;
          var minSum_ = _minSum_;
          if (peakIdx === length) {
            return minSum_;
          }
          var n = nums.at(peakIdx);
          var peak = n !== undefined ? n : 0;
          var rightSideLoop = (function(peak){
          return function rightSideLoop(_minSum__, _rightSideIdx) {
            while(true) {
              var rightSideIdx = _rightSideIdx;
              var minSum__ = _minSum__;
              if (rightSideIdx === length) {
                return minSum__;
              }
              var n = nums.at(rightSideIdx);
              var rightSide = n !== undefined ? n : 0;
              if (leftSide < peak && peak > rightSide) {
                var sum = (leftSide + peak | 0) + rightSide | 0;
                _rightSideIdx = rightSideIdx + 1 | 0;
                _minSum__ = minSum__ < sum ? minSum__ : sum;
                continue ;
              }
              _rightSideIdx = rightSideIdx + 1 | 0;
              continue ;
            };
          }
          }(peak));
          var minSum__ = rightSideLoop(minSum_, peakIdx + 1 | 0);
          _peakIdx = peakIdx + 1 | 0;
          _minSum_ = minSum_ < minSum__ ? minSum_ : minSum__;
          continue ;
        };
      }
      }(leftSide));
      var minSum_ = peakLoop(minSum, leftSideIdx + 1 | 0);
      _leftSideIdx = leftSideIdx + 1 | 0;
      _minSum = minSum < minSum_ ? minSum : minSum_;
      continue ;
    };
  };
  var minSum = leftSideLoop(Int32.max_int, 0);
  if (minSum === Int32.max_int) {
    return -1;
  } else {
    return minSum;
  }
}

var n1 = [
  8,
  6,
  1,
  5,
  3
];

var r1 = minimumSumOfMountainTriplets_I(n1);

console.log("[8,6,1,5,3]", r1);

var n2 = [
  5,
  4,
  8,
  7,
  10,
  2
];

var r2 = minimumSumOfMountainTriplets_I(n2);

console.log("[5,4,8,7,10,2]", r2);

var n3 = [
  6,
  5,
  4,
  3,
  4,
  5
];

var r3 = minimumSumOfMountainTriplets_I(n3);

console.log("[6,5,4,3,4,5]", r3);

export {
  minimumSumOfMountainTriplets_I ,
  n1 ,
  r1 ,
  n2 ,
  r2 ,
  n3 ,
  r3 ,
}
/* r1 Not a pure module */
