// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core__Int from "@rescript/core/src/Core__Int.res.js";
import * as Core__Option from "@rescript/core/src/Core__Option.res.js";

function returnDigit(num, position) {
  var numStr = num.toString();
  var length = numStr.length;
  var match = length > 1;
  var tmp;
  tmp = position === "First" ? (
      match ? Core__Int.fromString(numStr.slice(0, 2), undefined) : num
    ) : (
      match ? Core__Int.fromString(numStr.slice(length - 2 | 0, length), undefined) : num
    );
  return Core__Option.mapOr(tmp, 0, (function (n) {
                return n;
              }));
}

function findGCD(a, b) {
  var _answer = a;
  var _remainder = b;
  while(true) {
    var remainder = _remainder;
    var answer = _answer;
    if (remainder === 0) {
      return answer;
    }
    _remainder = answer % remainder | 0;
    _answer = remainder;
    continue ;
  };
}

function numberOfBeautifulPairs(nums) {
  var length = nums.length;
  var _outerCount = 0;
  var _outerIndex = 0;
  while(true) {
    var outerIndex = _outerIndex;
    var outerCount = _outerCount;
    if (outerIndex === length) {
      return outerCount;
    }
    var outerNum = Core__Option.mapOr(nums.at(outerIndex), 0, (function (n) {
            return n;
          }));
    var first = returnDigit(outerNum, "First");
    var innerLoop = (function(first){
    return function innerLoop(_innerCount, _innerIndex) {
      while(true) {
        var innerIndex = _innerIndex;
        var innerCount = _innerCount;
        if (innerIndex === length) {
          return innerCount;
        }
        var innerNum = Core__Option.mapOr(nums.at(innerIndex), 0, (function (n) {
                return n;
              }));
        var last = returnDigit(innerNum, "Last");
        var gcd = findGCD(first, last);
        _innerIndex = innerIndex + 1 | 0;
        _innerCount = gcd === 1 ? innerCount + 1 | 0 : innerCount;
        continue ;
      };
    }
    }(first));
    var innerCount = innerLoop(outerCount, outerIndex + 1 | 0);
    _outerIndex = outerIndex + 1 | 0;
    _outerCount = innerCount;
    continue ;
  };
}

var n1 = [
  2,
  5,
  1,
  4
];

var r1 = numberOfBeautifulPairs(n1);

console.log("r1: ", r1);

var n2 = [
  11,
  21,
  12
];

var r2 = numberOfBeautifulPairs(n2);

console.log("r2: ", r2);

export {
  returnDigit ,
  findGCD ,
  numberOfBeautifulPairs ,
  n1 ,
  r1 ,
  n2 ,
  r2 ,
}
/* r1 Not a pure module */
