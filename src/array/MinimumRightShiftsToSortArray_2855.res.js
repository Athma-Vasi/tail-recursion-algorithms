// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Int32 from "rescript/lib/es6/int32.js";

function minimumRightShiftsToSortArray(nums) {
  var length = nums.length;
  var rightShiftElements = function (nums) {
    var n = nums.at(-1);
    var last = n !== undefined ? n : 0;
    return [last].concat(nums.slice(0, length - 1 | 0));
  };
  var checkIsSorted = function (nums) {
    var _isSorted = true;
    var _prev = Int32.min_int;
    var _index = 0;
    while(true) {
      var index = _index;
      var prev = _prev;
      var isSorted = _isSorted;
      if (index === nums.length || !isSorted) {
        return isSorted;
      }
      var n = nums.at(index);
      var curr = n !== undefined ? n : 0;
      _index = index + 1 | 0;
      _prev = curr;
      _isSorted = curr > prev ? isSorted : false;
      continue ;
    };
  };
  var isSorted = checkIsSorted(nums);
  if (isSorted) {
    return 0;
  } else {
    var _limit = 0;
    var _isSorted = isSorted;
    var _shifted = nums;
    while(true) {
      var shifted = _shifted;
      var isSorted$1 = _isSorted;
      var limit = _limit;
      if (limit === length || isSorted$1) {
        if (limit === length) {
          return -1;
        } else {
          return limit;
        }
      }
      var rightShifted = rightShiftElements(shifted);
      var isSorted_ = checkIsSorted(rightShifted);
      _shifted = rightShifted;
      _isSorted = isSorted_ ? isSorted_ : isSorted$1;
      _limit = limit + 1 | 0;
      continue ;
    };
  }
}

var n1 = [
  3,
  4,
  5,
  1,
  2
];

var r1 = minimumRightShiftsToSortArray(n1);

console.log("r1: ", r1);

var n2 = [
  1,
  3,
  5
];

var r2 = minimumRightShiftsToSortArray(n2);

console.log("r2: ", r2);

var n3 = [
  2,
  1,
  4
];

var r3 = minimumRightShiftsToSortArray(n3);

console.log("r3: ", r3);

export {
  minimumRightShiftsToSortArray ,
  n1 ,
  r1 ,
  n2 ,
  r2 ,
  n3 ,
  r3 ,
}
/* r1 Not a pure module */
