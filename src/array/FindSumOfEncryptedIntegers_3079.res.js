// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Int32 from "rescript/lib/es6/int32.js";
import * as Core__Int from "@rescript/core/src/Core__Int.res.js";

function findSumOfEncryptedIntegers(nums) {
  var _sum = 0;
  var _index = 0;
  while(true) {
    var index = _index;
    var sum = _sum;
    if (index === nums.length) {
      return sum;
    }
    var n = nums.at(index);
    var num = n !== undefined ? n : 0;
    var findMax = function (_max, numStr, _idx) {
      while(true) {
        var idx = _idx;
        var max = _max;
        if (idx === numStr.length) {
          return max;
        }
        var numChar = numStr.charAt(idx);
        var n = Core__Int.fromString(numChar, undefined);
        var number = n !== undefined ? n : 0;
        _idx = idx + 1 | 0;
        _max = max > number ? max : number;
        continue ;
      };
    };
    var numStr = num.toString();
    var max = findMax(Int32.min_int, numStr, 0);
    var replaceWithMax = function (_replaced, numStr, max, _idx) {
      while(true) {
        var idx = _idx;
        var replaced = _replaced;
        if (idx === numStr.length) {
          return replaced;
        }
        var numChar = numStr.charAt(idx);
        var n = Core__Int.fromString(numChar, undefined);
        var number = n !== undefined ? n : 0;
        var larger = number > max ? number : max;
        _idx = idx + 1 | 0;
        _replaced = replaced.concat(larger.toString());
        continue ;
      };
    };
    var replaced = replaceWithMax(String(), numStr, max, 0);
    var n$1 = Core__Int.fromString(replaced, undefined);
    var replacedNum = n$1 !== undefined ? n$1 : 0;
    _index = index + 1 | 0;
    _sum = sum + replacedNum | 0;
    continue ;
  };
}

var n1 = [
  1,
  2,
  3
];

var r1 = findSumOfEncryptedIntegers(n1);

console.log("r1: ", r1);

var n2 = [
  10,
  21,
  31
];

var r2 = findSumOfEncryptedIntegers(n2);

console.log("r2: ", r2);

export {
  findSumOfEncryptedIntegers ,
  n1 ,
  r1 ,
  n2 ,
  r2 ,
}
/* r1 Not a pure module */
