// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml from "rescript/lib/es6/caml.js";
import * as Core__Option from "@rescript/core/src/Core__Option.res.js";

function findTheMaximumDivisibilityScore(nums, divisors) {
  var findDivisibilityScore = function (_scores, _divisorsIndex) {
    while(true) {
      var divisorsIndex = _divisorsIndex;
      var scores = _scores;
      if (divisorsIndex === divisors.length) {
        return scores;
      }
      var divisor = Core__Option.mapOr(divisors.at(divisorsIndex), -1, (function (d) {
              return d;
            }));
      var numsLoop = (function(divisor){
      return function numsLoop(scores_, _numsIndex) {
        while(true) {
          var numsIndex = _numsIndex;
          if (numsIndex === nums.length) {
            return scores_;
          }
          var num = Core__Option.mapOr(nums.at(numsIndex), 0, (function (n) {
                  return n;
                }));
          var remainder = num % divisor;
          var isDivisible = remainder === 0.0;
          var score = Core__Option.mapOr(scores_.get(divisor), 0, (function (s) {
                  return s;
                }));
          scores_.set(divisor, isDivisible ? score + 1 | 0 : score);
          _numsIndex = numsIndex + 1 | 0;
          continue ;
        };
      }
      }(divisor));
      _divisorsIndex = divisorsIndex + 1 | 0;
      _scores = numsLoop(scores, 0);
      continue ;
    };
  };
  return Core__Option.mapOr(Array.from(findDivisibilityScore(new Map(), 0).entries()).toSorted(function (param, param$1) {
                    var v2 = param$1[1];
                    var v1 = param[1];
                    if ((v2 - v1 | 0) === 0) {
                      return Caml.int_compare(param[0], param$1[0]);
                    } else {
                      return Caml.int_compare(v2, v1);
                    }
                  }).at(0), -1, (function (param) {
                return param[0];
              }));
}

var n1 = [
  2,
  9,
  15,
  50
];

var d1 = [
  5,
  3,
  7,
  2
];

var r1 = findTheMaximumDivisibilityScore(n1, d1);

console.log("r1: ", r1);

var n2 = [
  4,
  7,
  9,
  3,
  9
];

var d2 = [
  5,
  2,
  3
];

var r2 = findTheMaximumDivisibilityScore(n2, d2);

console.log("r2: ", r2);

var n3 = [
  20,
  14,
  21,
  10
];

var d3 = [
  10,
  16,
  20
];

var r3 = findTheMaximumDivisibilityScore(n3, d3);

console.log("r3: ", r3);

export {
  findTheMaximumDivisibilityScore ,
  n1 ,
  d1 ,
  r1 ,
  n2 ,
  d2 ,
  r2 ,
  n3 ,
  d3 ,
  r3 ,
}
/* r1 Not a pure module */
