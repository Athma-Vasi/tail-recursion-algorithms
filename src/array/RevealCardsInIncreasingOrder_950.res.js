// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml from "rescript/lib/es6/caml.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.js";

function revealCardsInIncreasingOrder(deck) {
  var sorted = deck.toSorted(Caml.int_compare);
  var length = sorted.length;
  var half = length / 2 | 0;
  var match = Core__Array.reduceWithIndex(sorted, [
        [],
        []
      ], (function (acc, card, idx) {
          var larger = acc[1];
          var smaller = acc[0];
          if (idx <= half) {
            return [
                    smaller.concat([card]),
                    larger
                  ];
          } else {
            return [
                    smaller,
                    larger.concat([card])
                  ];
          }
        }));
  var largerAsc = match[1];
  var smallerAsc = match[0];
  if (deck.length < 3) {
    return deck.toSorted(Caml.int_compare);
  } else {
    var _ordered = [];
    var _index = 0;
    while(true) {
      var index = _index;
      var ordered = _ordered;
      if (index > largerAsc.length) {
        return ordered;
      }
      var c = smallerAsc.at(index);
      var smallerCard = c !== undefined ? c : 0;
      var c$1 = largerAsc.at(index);
      var largerCard = c$1 !== undefined ? c$1 : 0;
      if (largerCard === 0) {
        _index = index + 1 | 0;
        _ordered = ordered.concat([smallerCard]);
        continue ;
      }
      _index = index + 1 | 0;
      _ordered = ordered.concat([
            smallerCard,
            largerCard
          ]);
      continue ;
    };
  }
}

var d1 = [
  17,
  13,
  11,
  2,
  3,
  5,
  7
];

var r1 = revealCardsInIncreasingOrder(d1);

console.log("r1: ", r1);

var d2 = [
  1,
  1000
];

var r2 = revealCardsInIncreasingOrder(d2);

console.log("r2: ", r2);

export {
  revealCardsInIncreasingOrder ,
  d1 ,
  r1 ,
  d2 ,
  r2 ,
}
/* r1 Not a pure module */
