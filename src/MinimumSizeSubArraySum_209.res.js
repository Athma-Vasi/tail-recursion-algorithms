// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Int32 from "rescript/lib/es6/int32.js";

function minSizeSubArraySum(nums, target) {
  var length = nums.length;
  if (length < 1) {
    return 0;
  }
  var num = nums[0];
  var firstNum = num !== undefined ? num : Int32.min_int;
  var num$1 = nums[1];
  var secondNum = num$1 !== undefined ? num$1 : Int32.min_int;
  var accumulator = firstNum + secondNum | 0;
  var _accumulator = accumulator;
  var _minSize = Int32.max_int;
  var _lowIndex = 0;
  var _highIndex = 1;
  while(true) {
    var highIndex = _highIndex;
    var lowIndex = _lowIndex;
    var minSize = _minSize;
    var accumulator$1 = _accumulator;
    if (highIndex === length) {
      if (minSize === Int32.max_int) {
        return 0;
      } else {
        return minSize;
      }
    }
    if (accumulator$1 >= target) {
      var currentMinSize = (highIndex - lowIndex | 0) + 1 | 0;
      var newMinSize = Math.min(minSize, currentMinSize) | 0;
      var num$2 = nums[lowIndex];
      var leftNum = num$2 !== undefined ? num$2 : Int32.min_int;
      _lowIndex = lowIndex + 1 | 0;
      _minSize = newMinSize;
      _accumulator = accumulator$1 - leftNum | 0;
      continue ;
    }
    var newHighIndex = highIndex + 1 | 0;
    var num$3 = nums[newHighIndex];
    var rightNum = num$3 !== undefined ? num$3 : Int32.min_int;
    _highIndex = newHighIndex;
    _accumulator = accumulator$1 + rightNum | 0;
    continue ;
  };
}

var n1 = [
  2,
  3,
  1,
  2,
  4,
  3
];

var r1 = minSizeSubArraySum(n1, 7);

console.log("[2,3,1,2,4,3] 7", r1);

var n2 = [
  1,
  4,
  4
];

var r2 = minSizeSubArraySum(n2, 4);

console.log("[1,4,4] 4", r2);

var n3 = [
  1,
  1,
  1,
  1,
  1,
  1,
  1
];

var r3 = minSizeSubArraySum(n3, 11);

console.log("[1,1,1,1,1,1,1] 11", r3);

export {
  minSizeSubArraySum ,
  n1 ,
  r1 ,
  n2 ,
  r2 ,
  n3 ,
  r3 ,
}
/* r1 Not a pure module */
